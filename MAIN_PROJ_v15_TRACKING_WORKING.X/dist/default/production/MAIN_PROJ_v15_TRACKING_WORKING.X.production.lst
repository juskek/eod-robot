

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Dec 10 09:10:08 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           ; Version 2.00
    62                           ; Generated 27/05/2018 GMT
    63                           ; 
    64                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4331 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     _TRISDbits	set	3989
    96  0000                     _TRISA	set	3986
    97  0000                     _TRISD	set	3989
    98  0000                     _TRISC	set	3988
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATDbits	set	3980
   101  0000                     _LATCbits	set	3979
   102  0000                     _LATC	set	3979
   103  0000                     _T0CONbits	set	4053
   104  0000                     _INTCON2bits	set	4081
   105  0000                     _CAP3BUFH	set	3941
   106  0000                     _CAP3BUFL	set	3940
   107  0000                     _CAP2BUFH	set	3943
   108  0000                     _CAP2BUFL	set	3942
   109  0000                     _PR5L	set	3984
   110  0000                     _PR5H	set	3985
   111  0000                     _T5CONbits	set	4023
   112  0000                     _CAP3CONbits	set	3937
   113  0000                     _CAP2CONbits	set	3938
   114  0000                     _TRISAbits	set	3986
   115  0000                     _DFLTCON	set	3936
   116  0000                     _QEICON	set	4022
   117  0000                     _ANSEL0	set	4024
   118  0000                     _RCONbits	set	4048
   119  0000                     _PIE1bits	set	3997
   120  0000                     _RCREG	set	4014
   121  0000                     _RCSTAbits	set	4011
   122  0000                     _TXSTAbits	set	4012
   123  0000                     _BAUDCONbits	set	4010
   124  0000                     _SPBRGH	set	4016
   125  0000                     _SPBRG	set	4015
   126  0000                     _TRISCbits	set	3988
   127  0000                     _LATB	set	3978
   128  0000                     _PTPERH	set	3962
   129  0000                     _PTPERL	set	3963
   130  0000                     _PWMCON1	set	3950
   131  0000                     _PWMCON0	set	3951
   132  0000                     _PTCON1	set	3966
   133  0000                     _PTCON0	set	3967
   134  0000                     _LATBbits	set	3978
   135  0000                     _TRISBbits	set	3987
   136  0000                     _OSCCONbits	set	4051
   137  0000                     _OSCCON	set	4051
   138  0000                     _TMR0L	set	4054
   139  0000                     _INTCONbits	set	4082
   140  0000                     _PIR1bits	set	3998
   141  0000                     _PDC1H	set	3958
   142  0000                     _PDC1L	set	3959
   143  0000                     _PDC0H	set	3960
   144  0000                     _PDC0L	set	3961
   145                           
   146                           	psect	smallconst
   147  000300                     __psmallconst:
   148                           	opt stack 0
   149  000300  00                 	db	0
   150  000301                     STR_16:
   151  000301  43                 	db	67	;'C'
   152  000302  48                 	db	72	;'H'
   153  000303  45                 	db	69	;'E'
   154  000304  43                 	db	67	;'C'
   155  000305  4B                 	db	75	;'K'
   156  000306  53                 	db	83	;'S'
   157  000307  55                 	db	85	;'U'
   158  000308  4D                 	db	77	;'M'
   159  000309  20                 	db	32
   160  00030A  49                 	db	73	;'I'
   161  00030B  4E                 	db	78	;'N'
   162  00030C  56                 	db	86	;'V'
   163  00030D  41                 	db	65	;'A'
   164  00030E  4C                 	db	76	;'L'
   165  00030F  49                 	db	73	;'I'
   166  000310  44                 	db	68	;'D'
   167  000311  00                 	db	0
   168  000312                     STR_15:
   169  000312  43                 	db	67	;'C'
   170  000313  48                 	db	72	;'H'
   171  000314  45                 	db	69	;'E'
   172  000315  43                 	db	67	;'C'
   173  000316  4B                 	db	75	;'K'
   174  000317  53                 	db	83	;'S'
   175  000318  55                 	db	85	;'U'
   176  000319  4D                 	db	77	;'M'
   177  00031A  20                 	db	32
   178  00031B  56                 	db	86	;'V'
   179  00031C  41                 	db	65	;'A'
   180  00031D  4C                 	db	76	;'L'
   181  00031E  49                 	db	73	;'I'
   182  00031F  44                 	db	68	;'D'
   183  000320  00                 	db	0
   184  000321                     STR_20:
   185  000321  32                 	db	50	;'2'
   186  000322  20                 	db	32
   187  000323  49                 	db	73	;'I'
   188  000324  52                 	db	82	;'R'
   189  000325  73                 	db	115	;'s'
   190  000326  3D                 	db	61	;'='
   191  000327  30                 	db	48	;'0'
   192  000328  00                 	db	0
   193  000329                     STR_21:
   194  000329  31                 	db	49	;'1'
   195  00032A  20                 	db	32
   196  00032B  49                 	db	73	;'I'
   197  00032C  52                 	db	82	;'R'
   198  00032D  3D                 	db	61	;'='
   199  00032E  30                 	db	48	;'0'
   200  00032F  00                 	db	0
   201  000330                     STR_3:
   202  000330  49                 	db	73	;'I'
   203  000331  4E                 	db	78	;'N'
   204  000332  49                 	db	73	;'I'
   205  000333  54                 	db	84	;'T'
   206  000334  00                 	db	0
   207  000335                     STR_22:
   208  000335  43                 	db	67	;'C'
   209  000336  54                 	db	84	;'T'
   210  000337  52                 	db	82	;'R'
   211  000338  00                 	db	0
   212  000339                     STR_13:
   213  000339  3A                 	db	58	;':'
   214  00033A  4D                 	db	77	;'M'
   215  00033B  43                 	db	67	;'C'
   216  00033C  00                 	db	0
   217  00033D                     STR_11:
   218  00033D  3A                 	db	58	;':'
   219  00033E  56                 	db	86	;'V'
   220  00033F  4C                 	db	76	;'L'
   221  000340  00                 	db	0
   222  000341                     STR_12:
   223  000341  3A                 	db	58	;':'
   224  000342  56                 	db	86	;'V'
   225  000343  52                 	db	82	;'R'
   226  000344  00                 	db	0
   227  000345                     STR_7:
   228  000345  31                 	db	49	;'1'
   229  000346  61                 	db	97	;'a'
   230  000347  7C                 	db	124
   231  000348  00                 	db	0
   232  000349                     STR_8:
   233  000349  31                 	db	49	;'1'
   234  00034A  62                 	db	98	;'b'
   235  00034B  7C                 	db	124
   236  00034C  00                 	db	0
   237  00034D                     STR_2:
   238  00034D  3E                 	db	62	;'>'
   239  00034E  52                 	db	82	;'R'
   240  00034F  00                 	db	0
   241  000350                     STR_1:
   242  000350  3E                 	db	62	;'>'
   243  000351  53                 	db	83	;'S'
   244  000352  00                 	db	0
   245  000353                     STR_10:
   246  000353  32                 	db	50	;'2'
   247  000354  61                 	db	97	;'a'
   248  000355  00                 	db	0
   249  000356                     STR_14:
   250  000356  32                 	db	50	;'2'
   251  000357  62                 	db	98	;'b'
   252  000358  00                 	db	0
   253  000359                     STR_6:
   254  000359  31                 	db	49	;'1'
   255  00035A  00                 	db	0
   256  00035B                     STR_9:
   257  00035B  32                 	db	50	;'2'
   258  00035C  00                 	db	0
   259  0000                     
   260                           ; #config settings
   261  00035D  00                 	db	0	; dummy byte at the end
   262  0000                     
   263                           	psect	cinit
   264  001E0A                     __pcinit:
   265                           	opt stack 0
   266  001E0A                     start_initialization:
   267                           	opt stack 0
   268  001E0A                     __initialization:
   269                           	opt stack 0
   270                           
   271                           ; Clear objects allocated to BANK0 (3 bytes)
   272  001E0A  0100               	movlb	0
   273  001E0C  6B89               	clrf	(__pbssBANK0+2)& (0+255),b
   274  001E0E  6B88               	clrf	(__pbssBANK0+1)& (0+255),b
   275  001E10  6B87               	clrf	__pbssBANK0& (0+255),b
   276                           
   277                           ; Clear objects allocated to COMRAM (17 bytes)
   278  001E12  EE00  F039         	lfsr	0,__pbssCOMRAM
   279  001E16  0E11               	movlw	17
   280  001E18                     clear_0:
   281  001E18  6AEE               	clrf	postinc0,c
   282  001E1A  06E8               	decf	wreg,f,c
   283  001E1C  E1FD               	bnz	clear_0
   284  001E1E                     end_of_initialization:
   285                           	opt stack 0
   286  001E1E                     __end_of__initialization:
   287                           	opt stack 0
   288  001E1E  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   289  001E20  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   290  001E22  0E00               	movlw	low (__Lmediumconst shr (0+16))
   291  001E24  6EF8               	movwf	tblptru,c
   292  001E26  0100               	movlb	0
   293  001E28  EFAF  F001         	goto	_main	;jump to C main() function
   294                           tblptru	equ	0xFF8
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssCOMRAM
   299  000039                     __pbssCOMRAM:
   300                           	opt stack 0
   301  000039                     _G_run:
   302                           	opt stack 0
   303  000039                     	ds	1
   304  00003A                     _G_rfid_buf:
   305                           	opt stack 0
   306  00003A                     	ds	16
   307                           tblptru	equ	0xFF8
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	bssBANK0
   312  000087                     __pbssBANK0:
   313                           	opt stack 0
   314  000087                     _G_time_ms:
   315                           	opt stack 0
   316  000087                     	ds	2
   317  000089                     _G_rfid_retrieved:
   318                           	opt stack 0
   319  000089                     	ds	1
   320                           tblptru	equ	0xFF8
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           
   324                           	psect	cstackBANK1
   325  000100                     __pcstackBANK1:
   326                           	opt stack 0
   327  000100                     main@cont:
   328                           	opt stack 0
   329                           
   330                           ; 252 bytes @ 0x0
   331  000100                     	ds	252
   332                           tblptru	equ	0xFF8
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           
   336                           	psect	cstackBANK0
   337  000060                     __pcstackBANK0:
   338                           	opt stack 0
   339  000060                     ir_display@cont:
   340                           	opt stack 0
   341  000060                     steer@cont:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x0
   345  000060                     	ds	2
   346  000062                     orientate@cont:
   347                           	opt stack 0
   348  000062                     steer@motorL:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x2
   352  000062                     	ds	2
   353  000064                     orientate@motorL:
   354                           	opt stack 0
   355  000064                     steer@motorR:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x4
   359  000064                     	ds	2
   360  000066                     ??_steer:
   361  000066                     orientate@motorR:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x6
   365  000066                     	ds	2
   366  000068                     ??_orientate:
   367                           
   368                           ; 1 bytes @ 0x8
   369  000068                     	ds	4
   370  00006C                     ??_main:
   371                           
   372                           ; 1 bytes @ 0xC
   373  00006C                     	ds	3
   374  00006F                     main@chksm:
   375                           	opt stack 0
   376                           
   377                           ; 5 bytes @ 0xF
   378  00006F                     	ds	5
   379  000074                     main@j:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x14
   383  000074                     	ds	1
   384  000075                     main@motorR:
   385                           	opt stack 0
   386                           
   387                           ; 9 bytes @ 0x15
   388  000075                     	ds	9
   389  00007E                     main@motorL:
   390                           	opt stack 0
   391                           
   392                           ; 9 bytes @ 0x1E
   393  00007E                     	ds	9
   394                           tblptru	equ	0xFF8
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	cstackCOMRAM
   399  000001                     __pcstackCOMRAM:
   400                           	opt stack 0
   401  000001                     ??i2_lcd_out:
   402  000001                     get_packet_serial@packet:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x0
   406  000001                     	ds	1
   407  000002                     i2lcd_out@number:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x1
   411  000002                     	ds	1
   412  000003                     i2send_lcd@type:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x2
   416  000003                     	ds	1
   417  000004                     get_packet_serial@i:
   418                           	opt stack 0
   419  000004                     i2send_lcd@Byte:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x3
   423  000004                     	ds	1
   424  000005                     ??i2_clear_lcd:
   425  000005                     i2set_line@line:
   426                           	opt stack 0
   427  000005                     i2lcd_string@string:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x4
   431  000005                     	ds	2
   432  000007                     ??_hp_rfid:
   433  000007                     
   434                           ; 1 bytes @ 0x6
   435  000007                     	ds	12
   436  000013                     ??_lp_timer:
   437                           
   438                           ; 1 bytes @ 0x12
   439  000013                     	ds	3
   440  000016                     ??_delay_s:
   441  000016                     ??_lcd_out:
   442  000016                     ?_get_ir:
   443                           	opt stack 0
   444  000016                     ?___wmul:
   445                           	opt stack 0
   446  000016                     init_pwm@PWMperiod:
   447                           	opt stack 0
   448  000016                     ir_difference@cont:
   449                           	opt stack 0
   450  000016                     ___wmul@multiplier:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x15
   454  000016                     	ds	1
   455  000017                     delay_s@seconds:
   456                           	opt stack 0
   457  000017                     lcd_out@number:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x16
   461  000017                     	ds	1
   462  000018                     get_ir@sensor:
   463                           	opt stack 0
   464  000018                     send_lcd@type:
   465                           	opt stack 0
   466  000018                     delay_s@cycles:
   467                           	opt stack 0
   468  000018                     ir_difference@motorL:
   469                           	opt stack 0
   470  000018                     ___wmul@multiplicand:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x17
   474  000018                     	ds	1
   475  000019                     send_lcd@Byte:
   476                           	opt stack 0
   477  000019                     get_ir@ir_value:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x18
   481  000019                     	ds	1
   482  00001A                     ??_clear_lcd:
   483  00001A                     ??_init_lcd:
   484  00001A                     set_line@line:
   485                           	opt stack 0
   486  00001A                     delay_s@i:
   487                           	opt stack 0
   488  00001A                     ir_difference@motorR:
   489                           	opt stack 0
   490  00001A                     lcd_string@string:
   491                           	opt stack 0
   492  00001A                     ___wmul@product:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x19
   496  00001A                     	ds	1
   497  00001B                     ?_ir_filter:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x1A
   501  00001B                     	ds	1
   502  00001C                     ??_ir_difference:
   503  00001C                     ?_power:
   504                           	opt stack 0
   505  00001C                     ?___awdiv:
   506                           	opt stack 0
   507  00001C                     power@number:
   508                           	opt stack 0
   509  00001C                     ___awdiv@dividend:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x1B
   513  00001C                     	ds	1
   514  00001D                     ??_ir_filter:
   515                           
   516                           ; 1 bytes @ 0x1C
   517  00001D                     	ds	1
   518  00001E                     power@power:
   519                           	opt stack 0
   520  00001E                     ___awdiv@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x1D
   524  00001E                     	ds	2
   525  000020                     ??_power:
   526  000020                     ___awdiv@counter:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x1F
   530  000020                     	ds	1
   531  000021                     ___awdiv@sign:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x20
   535  000021                     	ds	1
   536  000022                     ___awdiv@quotient:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x21
   540  000022                     	ds	1
   541  000023                     power@temp:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x22
   545  000023                     	ds	1
   546  000024                     set_motor_pwm@m:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x23
   550  000024                     	ds	1
   551  000025                     power@i:
   552                           	opt stack 0
   553  000025                     ir_filter@sensor:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x24
   557  000025                     	ds	1
   558  000026                     ??_set_motor_pwm:
   559  000026                     ?___lwdiv:
   560                           	opt stack 0
   561  000026                     ?___lwmod:
   562                           	opt stack 0
   563  000026                     ir_filter@filtered_ir:
   564                           	opt stack 0
   565  000026                     ___lwdiv@dividend:
   566                           	opt stack 0
   567  000026                     ___lwmod@dividend:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x25
   571  000026                     	ds	2
   572  000028                     ___lwdiv@divisor:
   573                           	opt stack 0
   574  000028                     ___lwmod@divisor:
   575                           	opt stack 0
   576  000028                     ir_filter@array:
   577                           	opt stack 0
   578                           
   579                           ; 8 bytes @ 0x27
   580  000028                     	ds	2
   581  00002A                     ___lwdiv@counter:
   582                           	opt stack 0
   583  00002A                     ___lwmod@counter:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x29
   587  00002A                     	ds	1
   588  00002B                     set_motor_pwm@PWMduty:
   589                           	opt stack 0
   590  00002B                     ___lwdiv@quotient:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x2A
   594  00002B                     	ds	2
   595  00002D                     full_speed@mL:
   596                           	opt stack 0
   597  00002D                     veer_left@mL:
   598                           	opt stack 0
   599  00002D                     veer_right@mL:
   600                           	opt stack 0
   601  00002D                     stop_all@mL:
   602                           	opt stack 0
   603  00002D                     itoa_5@number:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x2C
   607  00002D                     	ds	2
   608  00002F                     full_speed@mR:
   609                           	opt stack 0
   610  00002F                     veer_left@mR:
   611                           	opt stack 0
   612  00002F                     veer_right@mR:
   613                           	opt stack 0
   614  00002F                     stop_all@mR:
   615                           	opt stack 0
   616  00002F                     itoa_5@buffer:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x2E
   620  00002F                     	ds	1
   621  000030                     ir_filter@same_values_flag:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2F
   625  000030                     	ds	1
   626  000031                     ??_stop_all:
   627  000031                     full_speed@direction:
   628                           	opt stack 0
   629  000031                     veer_left@direction:
   630                           	opt stack 0
   631  000031                     veer_right@direction:
   632                           	opt stack 0
   633  000031                     ir_filter@i:
   634                           	opt stack 0
   635  000031                     itoa_5@remainder:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x30
   639  000031                     	ds	1
   640  000032                     ??_veer_left:
   641  000032                     ??_veer_right:
   642  000032                     ??_full_speed:
   643  000032                     turn_left@mL:
   644                           	opt stack 0
   645  000032                     turn_right@mL:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x31
   649  000032                     	ds	1
   650  000033                     itoa_5@quotient:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x32
   654  000033                     	ds	1
   655  000034                     turn_left@mR:
   656                           	opt stack 0
   657  000034                     turn_right@mR:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x33
   661  000034                     	ds	1
   662  000035                     itoa_5@k:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x34
   666  000035                     	ds	1
   667  000036                     ??_turn_left:
   668  000036                     ??_turn_right:
   669  000036                     itoa_5@j:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x35
   673  000036                     	ds	1
   674  000037                     itoa_5@i:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x36
   678  000037                     	ds	1
   679  000038                     
   680                           ; 1 bytes @ 0x37
   681  000038                     	ds	1
   682                           tblptru	equ	0xFF8
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 144 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  cont          252    0[BANK1 ] struct Control
   696 ;;  motorL          9   30[BANK0 ] struct DC_motor
   697 ;;  motorR          9   21[BANK0 ] struct DC_motor
   698 ;;  chksm           5   15[BANK0 ] unsigned char [5]
   699 ;;  j               1   20[BANK0 ] unsigned char 
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   709 ;;      Params:         0       0       0       0
   710 ;;      Locals:         0      24     252       0
   711 ;;      Temps:          0       3       0       0
   712 ;;      Totals:         0      27     252       0
   713 ;;Total ram usage:      279 bytes
   714 ;; Hardware stack levels required when called:   12
   715 ;; This function calls:
   716 ;;		_clear_lcd
   717 ;;		_delay_s
   718 ;;		_full_speed
   719 ;;		_get_ir
   720 ;;		_init_button
   721 ;;		_init_counter
   722 ;;		_init_interrupt
   723 ;;		_init_ir
   724 ;;		_init_lcd
   725 ;;		_init_pwm
   726 ;;		_init_serial
   727 ;;		_ir_difference
   728 ;;		_ir_display
   729 ;;		_ir_filter
   730 ;;		_itoa_5
   731 ;;		_lcd_string
   732 ;;		_orientate
   733 ;;		_set_line
   734 ;;		_steer
   735 ;;		_stop_all
   736 ;;		_veer_left
   737 ;;		_veer_right
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text0
   744  00035E                     __ptext0:
   745                           	opt stack 0
   746  00035E                     _main:
   747                           	opt stack 19
   748                           
   749                           ;incstack = 0
   750  00035E  0EF2               	movlw	242
   751  000360  6ED3               	movwf	4051,c	;volatile
   752  000362  A4D3               	btfss	4051,2,c	;volatile
   753  000364  D7FE               	goto	l98
   754  000366  EC6E  F00F         	call	_init_button	;wreg free
   755  00036A  EC59  F00B         	call	_init_lcd	;wreg free
   756  00036E  EC4E  F00F         	call	_init_serial	;wreg free
   757  000372  EC68  F00F         	call	_init_interrupt	;wreg free
   758  000376  EC82  F00E         	call	_init_ir	;wreg free
   759  00037A  0E00               	movlw	0
   760  00037C  6E17               	movwf	init_pwm@PWMperiod+1,c
   761  00037E  0E64               	movlw	100
   762  000380  6E16               	movwf	init_pwm@PWMperiod,c
   763  000382  EC16  F00F         	call	_init_pwm	;wreg free
   764  000386  EC27  F00F         	call	_init_counter	;wreg free
   765  00038A  EC34  F00F         	call	_clear_lcd	;wreg free
   766  00038E  0E00               	movlw	0
   767  000390  6E39               	movwf	_G_run,c	;volatile
   768  000392  0E00               	movlw	0
   769  000394  0100               	movlb	0	; () banked
   770  000396  6F7E               	movwf	main@motorL& (0+255),b
   771  000398  0E00               	movlw	0
   772  00039A  6F7F               	movwf	(main@motorL+1)& (0+255),b
   773                           
   774                           ; BSR set to: 0
   775  00039C  0E79               	movlw	121
   776  00039E  6F80               	movwf	(main@motorL+2)& (0+255),b
   777  0003A0  0E0F               	movlw	15
   778  0003A2  6F81               	movwf	(main@motorL+3)& (0+255),b
   779                           
   780                           ; BSR set to: 0
   781  0003A4  0E78               	movlw	120
   782  0003A6  6F82               	movwf	(main@motorL+4)& (0+255),b
   783  0003A8  0E0F               	movlw	15
   784  0003AA  6F83               	movwf	(main@motorL+5)& (0+255),b
   785  0003AC  0E00               	movlw	0
   786  0003AE  6F84               	movwf	(main@motorL+6)& (0+255),b
   787  0003B0  0E00               	movlw	0
   788  0003B2  6F86               	movwf	(main@motorL+8)& (0+255),b
   789  0003B4  0EC7               	movlw	199
   790  0003B6  6F85               	movwf	(main@motorL+7)& (0+255),b
   791  0003B8  0E00               	movlw	0
   792  0003BA  6F75               	movwf	main@motorR& (0+255),b
   793  0003BC  0E00               	movlw	0
   794  0003BE  6F76               	movwf	(main@motorR+1)& (0+255),b
   795                           
   796                           ; BSR set to: 0
   797  0003C0  0E77               	movlw	119
   798  0003C2  6F77               	movwf	(main@motorR+2)& (0+255),b
   799  0003C4  0E0F               	movlw	15
   800  0003C6  6F78               	movwf	(main@motorR+3)& (0+255),b
   801                           
   802                           ; BSR set to: 0
   803  0003C8  0E76               	movlw	118
   804  0003CA  6F79               	movwf	(main@motorR+4)& (0+255),b
   805  0003CC  0E0F               	movlw	15
   806  0003CE  6F7A               	movwf	(main@motorR+5)& (0+255),b
   807  0003D0  0E02               	movlw	2
   808  0003D2  6F7B               	movwf	(main@motorR+6)& (0+255),b
   809  0003D4  0E00               	movlw	0
   810  0003D6  6F7D               	movwf	(main@motorR+8)& (0+255),b
   811  0003D8  0EC7               	movlw	199
   812  0003DA  6F7C               	movwf	(main@motorR+7)& (0+255),b
   813  0003DC  0E00               	movlw	0
   814  0003DE  0101               	movlb	1	; () banked
   815  0003E0  6F01               	movwf	(main@cont+1)& (0+255),b
   816  0003E2  0E00               	movlw	0
   817  0003E4  6F00               	movwf	main@cont& (0+255),b
   818  0003E6  0E00               	movlw	0
   819  0003E8  6F03               	movwf	(main@cont+3)& (0+255),b
   820  0003EA  0E00               	movlw	0
   821  0003EC  6F02               	movwf	(main@cont+2)& (0+255),b
   822  0003EE  0E00               	movlw	0
   823  0003F0  6F05               	movwf	(main@cont+5)& (0+255),b
   824  0003F2  0E00               	movlw	0
   825  0003F4  6F04               	movwf	(main@cont+4)& (0+255),b
   826  0003F6  0E00               	movlw	0
   827  0003F8  6F06               	movwf	(main@cont+6)& (0+255),b
   828  0003FA  0E28               	movlw	40
   829  0003FC  6F09               	movwf	(main@cont+9)& (0+255),b
   830  0003FE  0E00               	movlw	0
   831  000400  6F0B               	movwf	(main@cont+11)& (0+255),b
   832  000402  0E00               	movlw	0
   833  000404  6F0A               	movwf	(main@cont+10)& (0+255),b
   834  000406  0E01               	movlw	1
   835  000408  6F08               	movwf	(main@cont+8)& (0+255),b
   836  00040A  0E5E               	movlw	94
   837  00040C  6F07               	movwf	(main@cont+7)& (0+255),b
   838  00040E  0EB7               	movlw	183
   839  000410  6F0D               	movwf	(main@cont+13)& (0+255),b
   840  000412  0E98               	movlw	152
   841  000414  6F0C               	movwf	(main@cont+12)& (0+255),b
   842  000416  0E00               	movlw	0
   843  000418  6F1E               	movwf	(main@cont+30)& (0+255),b
   844  00041A  0E00               	movlw	0
   845  00041C  6F1F               	movwf	(main@cont+31)& (0+255),b
   846  00041E  0E00               	movlw	0
   847  000420  0100               	movlb	0	; () banked
   848  000422  6F74               	movwf	main@j& (0+255),b
   849                           
   850                           ; BSR set to: 0
   851  000424  EC34  F00F         	call	_clear_lcd	;wreg free
   852  000428  0E01               	movlw	1
   853  00042A  EC9E  F00E         	call	_set_line
   854  00042E  0E30               	movlw	low STR_3
   855  000430  6E1A               	movwf	lcd_string@string,c
   856  000432  0E03               	movlw	high STR_3
   857  000434  6E1B               	movwf	lcd_string@string+1,c
   858  000436  ECA3  F00D         	call	_lcd_string	;wreg free
   859  00043A  0E06               	movlw	6
   860  00043C  0100               	movlb	0	; () banked
   861  00043E  6F6D               	movwf	(??_main+1)& (0+255),b
   862  000440  0E13               	movlw	19
   863  000442  6F6C               	movwf	??_main& (0+255),b
   864  000444  0EAD               	movlw	173
   865  000446                     u3027:
   866  000446  2EE8               	decfsz	wreg,f,c
   867  000448  D7FE               	bra	u3027
   868  00044A  2F6C               	decfsz	??_main& (0+255),f,b
   869  00044C  D7FC               	bra	u3027
   870  00044E  2F6D               	decfsz	(??_main+1)& (0+255),f,b
   871  000450  D7FA               	bra	u3027
   872  000452  D000               	nop2	
   873                           
   874                           ;main.c: 225:     while (G_run == 0) {
   875  000454  D08B               	goto	u2780
   876  000456                     
   877                           ;main.c: 227:         G_rfid_retrieved = 0;
   878  000456  0E00               	movlw	0
   879  000458  0100               	movlb	0	; () banked
   880  00045A  6F89               	movwf	_G_rfid_retrieved& (0+255),b	;volatile
   881                           
   882                           ;main.c: 228:         cont.finding_direction = 1;
   883  00045C  0E01               	movlw	1
   884  00045E  0101               	movlb	1	; () banked
   885  000460  6F1F               	movwf	(main@cont+31)& (0+255),b
   886                           
   887                           ;main.c: 229:         G_time_ms = 0;
   888  000462  0E00               	movlw	0
   889  000464  0100               	movlb	0	; () banked
   890  000466  6F88               	movwf	(_G_time_ms+1)& (0+255),b	;volatile
   891  000468  0E00               	movlw	0
   892  00046A  6F87               	movwf	_G_time_ms& (0+255),b	;volatile
   893                           
   894                           ;main.c: 232:         for (cont.i = 0; cont.i < 16; cont.i++) {
   895  00046C  0E00               	movlw	0
   896  00046E  0101               	movlb	1	; () banked
   897  000470  6F1E               	movwf	(main@cont+30)& (0+255),b
   898  000472  D00C               	goto	l102
   899  000474                     
   900                           ; BSR set to: 1
   901                           ;main.c: 233:             G_rfid_buf[cont.i] = 0;
   902                           
   903                           ; BSR set to: 1
   904  000474  511E               	movf	(main@cont+30)& (0+255),w,b
   905  000476  0D01               	mullw	1
   906  000478  0E3A               	movlw	low _G_rfid_buf
   907  00047A  24F3               	addwf	prodl,w,c
   908  00047C  6ED9               	movwf	fsr2l,c
   909  00047E  0E00               	movlw	high _G_rfid_buf
   910  000480  20F4               	addwfc	prodh,w,c
   911  000482  6EDA               	movwf	fsr2h,c
   912  000484  0E00               	movlw	0
   913  000486  6EDF               	movwf	indf2,c
   914                           
   915                           ; BSR set to: 1
   916                           ;main.c: 234:             cont.i++;
   917  000488  2B1E               	incf	(main@cont+30)& (0+255),f,b
   918                           
   919                           ; BSR set to: 1
   920                           ;main.c: 235:         }
   921  00048A  2B1E               	incf	(main@cont+30)& (0+255),f,b
   922  00048C                     l102:
   923                           
   924                           ; BSR set to: 1
   925                           
   926                           ; BSR set to: 1
   927  00048C  0E0F               	movlw	15
   928  00048E  651E               	cpfsgt	(main@cont+30)& (0+255),b
   929  000490  D7F1               	goto	l103
   930                           
   931                           ; BSR set to: 1
   932                           ;main.c: 237:         stop_all(&motorL, &motorR);
   933                           
   934                           ; BSR set to: 1
   935  000492  0E7E               	movlw	low main@motorL
   936  000494  6E2D               	movwf	stop_all@mL,c
   937  000496  0E00               	movlw	high main@motorL
   938  000498  6E2E               	movwf	stop_all@mL+1,c
   939  00049A  0E75               	movlw	low main@motorR
   940  00049C  6E2F               	movwf	stop_all@mR,c
   941  00049E  0E00               	movlw	high main@motorR
   942  0004A0  6E30               	movwf	stop_all@mR+1,c
   943  0004A2  EC3D  F00D         	call	_stop_all	;wreg free
   944                           
   945                           ;main.c: 240:         clear_lcd();
   946  0004A6  EC34  F00F         	call	_clear_lcd	;wreg free
   947                           
   948                           ;main.c: 241:         set_line(1);
   949  0004AA  0E01               	movlw	1
   950  0004AC  EC9E  F00E         	call	_set_line
   951                           
   952                           ;main.c: 242:         lcd_string("S");
   953  0004B0  0E51               	movlw	low (STR_1+1)
   954  0004B2  6E1A               	movwf	lcd_string@string,c
   955  0004B4  0E03               	movlw	high (STR_1+1)
   956  0004B6  6E1B               	movwf	lcd_string@string+1,c
   957  0004B8  ECA3  F00D         	call	_lcd_string	;wreg free
   958                           
   959                           ;main.c: 243:         _delay((unsigned long)((500)*(8000000/4000.0)));
   960  0004BC  0E06               	movlw	6
   961  0004BE  0100               	movlb	0	; () banked
   962  0004C0  6F6D               	movwf	(??_main+1)& (0+255),b
   963  0004C2  0E13               	movlw	19
   964  0004C4  6F6C               	movwf	??_main& (0+255),b
   965  0004C6  0EAD               	movlw	173
   966  0004C8                     u3037:
   967  0004C8  2EE8               	decfsz	wreg,f,c
   968  0004CA  D7FE               	bra	u3037
   969  0004CC  2F6C               	decfsz	??_main& (0+255),f,b
   970  0004CE  D7FC               	bra	u3037
   971  0004D0  2F6D               	decfsz	(??_main+1)& (0+255),f,b
   972  0004D2  D7FA               	bra	u3037
   973  0004D4  D000               	nop2	
   974                           
   975                           ;main.c: 246:         for (cont.i = 0; cont.i < 220; cont.i++) {
   976  0004D6  0E00               	movlw	0
   977  0004D8  0101               	movlb	1	; () banked
   978  0004DA  6F1E               	movwf	(main@cont+30)& (0+255),b
   979  0004DC  D010               	goto	l105
   980  0004DE                     
   981                           ; BSR set to: 1
   982                           ;main.c: 247:             cont.steer_action[cont.i] = 0;
   983                           
   984                           ; BSR set to: 1
   985  0004DE  511E               	movf	(main@cont+30)& (0+255),w,b
   986  0004E0  0D01               	mullw	1
   987  0004E2  0E20               	movlw	32
   988  0004E4  26F3               	addwf	prodl,f,c
   989  0004E6  0E00               	movlw	0
   990  0004E8  22F4               	addwfc	prodh,f,c
   991  0004EA  0E00               	movlw	low main@cont
   992  0004EC  24F3               	addwf	prodl,w,c
   993  0004EE  6ED9               	movwf	fsr2l,c
   994  0004F0  0E01               	movlw	high main@cont
   995  0004F2  20F4               	addwfc	prodh,w,c
   996  0004F4  6EDA               	movwf	fsr2h,c
   997  0004F6  0E00               	movlw	0
   998  0004F8  6EDF               	movwf	indf2,c
   999                           
  1000                           ; BSR set to: 1
  1001                           ;main.c: 248:             cont.i++;
  1002  0004FA  2B1E               	incf	(main@cont+30)& (0+255),f,b
  1003                           
  1004                           ; BSR set to: 1
  1005                           ;main.c: 249:         }
  1006  0004FC  2B1E               	incf	(main@cont+30)& (0+255),f,b
  1007  0004FE                     l105:
  1008                           
  1009                           ; BSR set to: 1
  1010                           
  1011                           ; BSR set to: 1
  1012  0004FE  0EDB               	movlw	219
  1013  000500  651E               	cpfsgt	(main@cont+30)& (0+255),b
  1014  000502  D7ED               	goto	l106
  1015  000504  D02D               	goto	l108
  1016  000506                     
  1017                           ;main.c: 254:             cont.ir_left = 0;
  1018                           
  1019                           ; BSR set to: 1
  1020  000506  0E00               	movlw	0
  1021  000508  0101               	movlb	1	; () banked
  1022  00050A  6F01               	movwf	(main@cont+1)& (0+255),b
  1023  00050C  0E00               	movlw	0
  1024  00050E  6F00               	movwf	main@cont& (0+255),b
  1025                           
  1026                           ;main.c: 255:             cont.ir_right = 0;
  1027  000510  0E00               	movlw	0
  1028  000512  6F03               	movwf	(main@cont+3)& (0+255),b
  1029  000514  0E00               	movlw	0
  1030  000516  6F02               	movwf	(main@cont+2)& (0+255),b
  1031                           
  1032                           ; BSR set to: 1
  1033                           ;main.c: 258:             cont.ir_left = get_ir(1);
  1034  000518  0E01               	movlw	1
  1035  00051A  EC63  F00E         	call	_get_ir
  1036  00051E  C016  F100         	movff	?_get_ir,main@cont
  1037  000522  C017  F101         	movff	?_get_ir+1,main@cont+1
  1038                           
  1039                           ;main.c: 259:             cont.ir_right = get_ir(0);
  1040  000526  0E00               	movlw	0
  1041  000528  EC63  F00E         	call	_get_ir
  1042  00052C  C016  F102         	movff	?_get_ir,main@cont+2
  1043  000530  C017  F103         	movff	?_get_ir+1,main@cont+3
  1044                           
  1045                           ;main.c: 265:             set_line(2);
  1046  000534  0E02               	movlw	2
  1047  000536  EC9E  F00E         	call	_set_line
  1048                           
  1049                           ;main.c: 266:             ir_display(&cont);
  1050  00053A  0E00               	movlw	low main@cont
  1051  00053C  0100               	movlb	0	; () banked
  1052  00053E  6F60               	movwf	ir_display@cont& (0+255),b
  1053  000540  0E01               	movlw	high main@cont
  1054  000542  6F61               	movwf	(ir_display@cont+1)& (0+255),b
  1055  000544  ECAE  F00B         	call	_ir_display	;wreg free
  1056                           
  1057                           ;main.c: 267:             _delay((unsigned long)((200)*(8000000/4000.0)));
  1058  000548  0E03               	movlw	3
  1059  00054A  0100               	movlb	0	; () banked
  1060  00054C  6F6D               	movwf	(??_main+1)& (0+255),b
  1061  00054E  0E08               	movlw	8
  1062  000550  6F6C               	movwf	??_main& (0+255),b
  1063  000552  0E77               	movlw	119
  1064  000554                     u3047:
  1065  000554  2EE8               	decfsz	wreg,f,c
  1066  000556  D7FE               	bra	u3047
  1067  000558  2F6C               	decfsz	??_main& (0+255),f,b
  1068  00055A  D7FC               	bra	u3047
  1069  00055C  2F6D               	decfsz	(??_main+1)& (0+255),f,b
  1070  00055E  D7FA               	bra	u3047
  1071  000560                     l108:
  1072                           
  1073                           ;main.c: 253:         while (G_run == 0) {
  1074  000560  5039               	movf	_G_run,w,c	;volatile
  1075  000562  B4D8               	btfsc	status,2,c
  1076  000564  D7D0               	goto	l109
  1077  000566                     u2770:
  1078                           
  1079                           ;main.c: 271:         while (G_run == 0);
  1080  000566  5039               	movf	_G_run,w,c	;volatile
  1081  000568  B4D8               	btfsc	status,2,c
  1082  00056A  D7FD               	goto	u2770
  1083  00056C                     u2780:
  1084                           
  1085                           ;main.c: 225:     while (G_run == 0) {
  1086                           
  1087                           ;main.c: 272:     }
  1088  00056C  5039               	movf	_G_run,w,c	;volatile
  1089  00056E  A4D8               	btfss	status,2,c
  1090  000570  D275               	goto	l154
  1091  000572  D771               	goto	l101
  1092  000574                     
  1093                           ;main.c: 300:         clear_lcd();
  1094  000574  EC34  F00F         	call	_clear_lcd	;wreg free
  1095                           
  1096                           ;main.c: 301:         set_line(1);
  1097  000578  0E01               	movlw	1
  1098  00057A  EC9E  F00E         	call	_set_line
  1099                           
  1100                           ;main.c: 302:         lcd_string("R");
  1101  00057E  0E4E               	movlw	low (STR_2+1)
  1102  000580  6E1A               	movwf	lcd_string@string,c
  1103  000582  0E03               	movlw	high (STR_2+1)
  1104  000584  6E1B               	movwf	lcd_string@string+1,c
  1105  000586  ECA3  F00D         	call	_lcd_string	;wreg free
  1106                           
  1107                           ;main.c: 303:         _delay((unsigned long)((500)*(8000000/4000.0)));
  1108  00058A  0E06               	movlw	6
  1109  00058C  0100               	movlb	0	; () banked
  1110  00058E  6F6D               	movwf	(??_main+1)& (0+255),b
  1111  000590  0E13               	movlw	19
  1112  000592  6F6C               	movwf	??_main& (0+255),b
  1113  000594  0EAD               	movlw	173
  1114  000596                     u3057:
  1115  000596  2EE8               	decfsz	wreg,f,c
  1116  000598  D7FE               	bra	u3057
  1117  00059A  2F6C               	decfsz	??_main& (0+255),f,b
  1118  00059C  D7FC               	bra	u3057
  1119  00059E  2F6D               	decfsz	(??_main+1)& (0+255),f,b
  1120  0005A0  D7FA               	bra	u3057
  1121  0005A2  D000               	nop2	
  1122                           
  1123                           ;main.c: 306:         G_rfid_retrieved = 0;
  1124  0005A4  0E00               	movlw	0
  1125  0005A6  0100               	movlb	0	; () banked
  1126  0005A8  6F89               	movwf	_G_rfid_retrieved& (0+255),b	;volatile
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;main.c: 307:         cont.finding_direction = 1;
  1130  0005AA  0E01               	movlw	1
  1131  0005AC  0101               	movlb	1	; () banked
  1132  0005AE  6F1F               	movwf	(main@cont+31)& (0+255),b
  1133                           
  1134                           ; BSR set to: 1
  1135                           ;main.c: 308:         G_time_ms = 0;
  1136  0005B0  0E00               	movlw	0
  1137  0005B2  0100               	movlb	0	; () banked
  1138  0005B4  6F88               	movwf	(_G_time_ms+1)& (0+255),b	;volatile
  1139  0005B6  0E00               	movlw	0
  1140  0005B8  6F87               	movwf	_G_time_ms& (0+255),b	;volatile
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 313:         cont.i = 0;
  1144  0005BA  0E00               	movlw	0
  1145  0005BC  0101               	movlb	1	; () banked
  1146  0005BE  6F1E               	movwf	(main@cont+30)& (0+255),b
  1147                           
  1148                           ;main.c: 319:         while ((G_rfid_retrieved == 0) & (G_run == 1)) {
  1149  0005C0  D0CB               	goto	u2840
  1150  0005C2                     
  1151                           ;main.c: 321:             clear_lcd();
  1152                           
  1153                           ; BSR set to: 1
  1154  0005C2  EC34  F00F         	call	_clear_lcd	;wreg free
  1155                           
  1156                           ;main.c: 322:             set_line(1);
  1157  0005C6  0E01               	movlw	1
  1158  0005C8  EC9E  F00E         	call	_set_line
  1159                           
  1160                           ;main.c: 323:             lcd_string("1");
  1161  0005CC  0E59               	movlw	low STR_6
  1162  0005CE  6E1A               	movwf	lcd_string@string,c
  1163  0005D0  0E03               	movlw	high STR_6
  1164  0005D2  6E1B               	movwf	lcd_string@string+1,c
  1165  0005D4  ECA3  F00D         	call	_lcd_string	;wreg free
  1166                           
  1167                           ;main.c: 324:             delay_s(1);
  1168  0005D8  0E01               	movlw	1
  1169  0005DA  EC43  F00E         	call	_delay_s
  1170                           
  1171                           ;main.c: 336:             while ((cont.finding_direction == 1) & (G_run == 1)) {
  1172  0005DE  D04D               	goto	l119
  1173  0005E0                     
  1174                           ;main.c: 338:                 cont.ir_left = ir_filter(1);
  1175  0005E0  0E01               	movlw	1
  1176  0005E2  ECD3  F007         	call	_ir_filter
  1177  0005E6  C01B  F100         	movff	?_ir_filter,main@cont
  1178  0005EA  C01C  F101         	movff	?_ir_filter+1,main@cont+1
  1179                           
  1180                           ;main.c: 339:                 cont.ir_right = ir_filter(0);
  1181  0005EE  0E00               	movlw	0
  1182  0005F0  ECD3  F007         	call	_ir_filter
  1183  0005F4  C01B  F102         	movff	?_ir_filter,main@cont+2
  1184  0005F8  C01C  F103         	movff	?_ir_filter+1,main@cont+3
  1185                           
  1186                           ;main.c: 341:                 clear_lcd();
  1187  0005FC  EC34  F00F         	call	_clear_lcd	;wreg free
  1188                           
  1189                           ;main.c: 342:                 set_line(1);
  1190  000600  0E01               	movlw	1
  1191  000602  EC9E  F00E         	call	_set_line
  1192                           
  1193                           ;main.c: 343:                 ir_display(&cont);
  1194  000606  0E00               	movlw	low main@cont
  1195  000608  0100               	movlb	0	; () banked
  1196  00060A  6F60               	movwf	ir_display@cont& (0+255),b
  1197  00060C  0E01               	movlw	high main@cont
  1198  00060E  6F61               	movwf	(ir_display@cont+1)& (0+255),b
  1199  000610  ECAE  F00B         	call	_ir_display	;wreg free
  1200                           
  1201                           ;main.c: 346:                 set_line(2);
  1202  000614  0E02               	movlw	2
  1203  000616  EC9E  F00E         	call	_set_line
  1204                           
  1205                           ;main.c: 347:                 lcd_string("1a|");
  1206  00061A  0E45               	movlw	low STR_7
  1207  00061C  6E1A               	movwf	lcd_string@string,c
  1208  00061E  0E03               	movlw	high STR_7
  1209  000620  6E1B               	movwf	lcd_string@string+1,c
  1210  000622  ECA3  F00D         	call	_lcd_string	;wreg free
  1211                           
  1212                           ;main.c: 350:                 ir_difference(&cont, &motorL, &motorR);
  1213  000626  0E00               	movlw	low main@cont
  1214  000628  6E16               	movwf	ir_difference@cont,c
  1215  00062A  0E01               	movlw	high main@cont
  1216  00062C  6E17               	movwf	ir_difference@cont+1,c
  1217  00062E  0E7E               	movlw	low main@motorL
  1218  000630  6E18               	movwf	ir_difference@motorL,c
  1219  000632  0E00               	movlw	high main@motorL
  1220  000634  6E19               	movwf	ir_difference@motorL+1,c
  1221  000636  0E75               	movlw	low main@motorR
  1222  000638  6E1A               	movwf	ir_difference@motorR,c
  1223  00063A  0E00               	movlw	high main@motorR
  1224  00063C  6E1B               	movwf	ir_difference@motorR+1,c
  1225  00063E  EC68  F008         	call	_ir_difference	;wreg free
  1226                           
  1227                           ;main.c: 353:                 orientate(&cont, &motorL, &motorR);
  1228  000642  0E00               	movlw	low main@cont
  1229  000644  0100               	movlb	0	; () banked
  1230  000646  6F62               	movwf	orientate@cont& (0+255),b
  1231  000648  0E01               	movlw	high main@cont
  1232  00064A  6F63               	movwf	(orientate@cont+1)& (0+255),b
  1233  00064C  0E7E               	movlw	low main@motorL
  1234  00064E  6F64               	movwf	orientate@motorL& (0+255),b
  1235  000650  0E00               	movlw	high main@motorL
  1236  000652  6F65               	movwf	(orientate@motorL+1)& (0+255),b
  1237  000654  0E75               	movlw	low main@motorR
  1238  000656  6F66               	movwf	orientate@motorR& (0+255),b
  1239  000658  0E00               	movlw	high main@motorR
  1240  00065A  6F67               	movwf	(orientate@motorR+1)& (0+255),b
  1241  00065C  EC33  F005         	call	_orientate	;wreg free
  1242                           
  1243                           ;main.c: 354:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  1244  000660  0E02               	movlw	2
  1245  000662  0100               	movlb	0	; () banked
  1246  000664  6F6D               	movwf	(??_main+1)& (0+255),b
  1247  000666  0E04               	movlw	4
  1248  000668  6F6C               	movwf	??_main& (0+255),b
  1249  00066A  0EBA               	movlw	186
  1250  00066C                     u3067:
  1251  00066C  2EE8               	decfsz	wreg,f,c
  1252  00066E  D7FE               	bra	u3067
  1253  000670  2F6C               	decfsz	??_main& (0+255),f,b
  1254  000672  D7FC               	bra	u3067
  1255  000674  2F6D               	decfsz	(??_main+1)& (0+255),f,b
  1256  000676  D7FA               	bra	u3067
  1257  000678  F000               	nop	
  1258  00067A                     l119:
  1259                           
  1260                           ;main.c: 336:             while ((cont.finding_direction == 1) & (G_run == 1)) {
  1261  00067A  0101               	movlb	1	; () banked
  1262  00067C  051F               	decf	(main@cont+31)& (0+255),w,b
  1263  00067E  A4D8               	btfss	status,2,c
  1264  000680  D061               	goto	l124
  1265                           
  1266                           ; BSR set to: 1
  1267  000682  0439               	decf	_G_run,w,c	;volatile
  1268  000684  A4D8               	btfss	status,2,c
  1269  000686  D05E               	goto	l124
  1270  000688  D7AB               	goto	l120
  1271  00068A                     
  1272                           ;main.c: 370:                 cont.ir_left = get_ir(0);
  1273                           
  1274                           ; BSR set to: 1
  1275  00068A  0E00               	movlw	0
  1276  00068C  EC63  F00E         	call	_get_ir
  1277  000690  C016  F100         	movff	?_get_ir,main@cont
  1278  000694  C017  F101         	movff	?_get_ir+1,main@cont+1
  1279                           
  1280                           ;main.c: 371:                 cont.ir_right = get_ir(1);
  1281  000698  0E01               	movlw	1
  1282  00069A  EC63  F00E         	call	_get_ir
  1283  00069E  C016  F102         	movff	?_get_ir,main@cont+2
  1284  0006A2  C017  F103         	movff	?_get_ir+1,main@cont+3
  1285                           
  1286                           ;main.c: 373:                 clear_lcd();
  1287  0006A6  EC34  F00F         	call	_clear_lcd	;wreg free
  1288                           
  1289                           ;main.c: 374:                 set_line(1);
  1290  0006AA  0E01               	movlw	1
  1291  0006AC  EC9E  F00E         	call	_set_line
  1292                           
  1293                           ;main.c: 375:                 ir_display(&cont);
  1294  0006B0  0E00               	movlw	low main@cont
  1295  0006B2  0100               	movlb	0	; () banked
  1296  0006B4  6F60               	movwf	ir_display@cont& (0+255),b
  1297  0006B6  0E01               	movlw	high main@cont
  1298  0006B8  6F61               	movwf	(ir_display@cont+1)& (0+255),b
  1299  0006BA  ECAE  F00B         	call	_ir_display	;wreg free
  1300                           
  1301                           ;main.c: 378:                 set_line(2);
  1302  0006BE  0E02               	movlw	2
  1303  0006C0  EC9E  F00E         	call	_set_line
  1304                           
  1305                           ;main.c: 379:                 lcd_string("1b|");
  1306  0006C4  0E49               	movlw	low STR_8
  1307  0006C6  6E1A               	movwf	lcd_string@string,c
  1308  0006C8  0E03               	movlw	high STR_8
  1309  0006CA  6E1B               	movwf	lcd_string@string+1,c
  1310  0006CC  ECA3  F00D         	call	_lcd_string	;wreg free
  1311                           
  1312                           ;main.c: 382:                 ir_difference(&cont, &motorL, &motorR);
  1313  0006D0  0E00               	movlw	low main@cont
  1314  0006D2  6E16               	movwf	ir_difference@cont,c
  1315  0006D4  0E01               	movlw	high main@cont
  1316  0006D6  6E17               	movwf	ir_difference@cont+1,c
  1317  0006D8  0E7E               	movlw	low main@motorL
  1318  0006DA  6E18               	movwf	ir_difference@motorL,c
  1319  0006DC  0E00               	movlw	high main@motorL
  1320  0006DE  6E19               	movwf	ir_difference@motorL+1,c
  1321  0006E0  0E75               	movlw	low main@motorR
  1322  0006E2  6E1A               	movwf	ir_difference@motorR,c
  1323  0006E4  0E00               	movlw	high main@motorR
  1324  0006E6  6E1B               	movwf	ir_difference@motorR+1,c
  1325  0006E8  EC68  F008         	call	_ir_difference	;wreg free
  1326                           
  1327                           ;main.c: 385:                 itoa_5(cont.i, cont.ir_buf);
  1328  0006EC  C11E  F02D         	movff	main@cont+30,itoa_5@number
  1329  0006F0  6A2E               	clrf	itoa_5@number+1,c
  1330  0006F2  0E0E               	movlw	low (main@cont+14)
  1331  0006F4  6E2F               	movwf	itoa_5@buffer,c
  1332  0006F6  0E01               	movlw	high (main@cont+14)
  1333  0006F8  6E30               	movwf	itoa_5@buffer+1,c
  1334  0006FA  ECC4  F009         	call	_itoa_5	;wreg free
  1335                           
  1336                           ;main.c: 386:                 lcd_string(cont.ir_buf);
  1337  0006FE  0E0E               	movlw	low (main@cont+14)
  1338  000700  6E1A               	movwf	lcd_string@string,c
  1339  000702  0E01               	movlw	high (main@cont+14)
  1340  000704  6E1B               	movwf	lcd_string@string+1,c
  1341  000706  ECA3  F00D         	call	_lcd_string	;wreg free
  1342                           
  1343                           ;main.c: 389:                 steer(&cont, &motorL, &motorR);
  1344  00070A  0E00               	movlw	low main@cont
  1345  00070C  0100               	movlb	0	; () banked
  1346  00070E  6F60               	movwf	steer@cont& (0+255),b
  1347  000710  0E01               	movlw	high main@cont
  1348  000712  6F61               	movwf	(steer@cont+1)& (0+255),b
  1349  000714  0E7E               	movlw	low main@motorL
  1350  000716  6F62               	movwf	steer@motorL& (0+255),b
  1351  000718  0E00               	movlw	high main@motorL
  1352  00071A  6F63               	movwf	(steer@motorL+1)& (0+255),b
  1353  00071C  0E75               	movlw	low main@motorR
  1354  00071E  6F64               	movwf	steer@motorR& (0+255),b
  1355  000720  0E00               	movlw	high main@motorR
  1356  000722  6F65               	movwf	(steer@motorR+1)& (0+255),b
  1357  000724  EC85  F006         	call	_steer	;wreg free
  1358                           
  1359                           ;main.c: 390:                 _delay((unsigned long)((400)*(8000000/4000.0)));
  1360  000728  0E05               	movlw	5
  1361  00072A  0100               	movlb	0	; () banked
  1362  00072C  6F6D               	movwf	(??_main+1)& (0+255),b
  1363  00072E  0E0F               	movlw	15
  1364  000730  6F6C               	movwf	??_main& (0+255),b
  1365  000732  0EF1               	movlw	241
  1366  000734                     u3077:
  1367  000734  2EE8               	decfsz	wreg,f,c
  1368  000736  D7FE               	bra	u3077
  1369  000738  2F6C               	decfsz	??_main& (0+255),f,b
  1370  00073A  D7FC               	bra	u3077
  1371  00073C  2F6D               	decfsz	(??_main+1)& (0+255),f,b
  1372  00073E  D7FA               	bra	u3077
  1373                           
  1374                           ;main.c: 392:                 cont.i++;
  1375  000740  0101               	movlb	1	; () banked
  1376  000742  2B1E               	incf	(main@cont+30)& (0+255),f,b
  1377  000744                     l124:
  1378                           
  1379                           ; BSR set to: 1
  1380                           ;main.c: 367:             while ((cont.finding_direction == 0) & (G_rfid_retrieved == 0)
      +                           & (G_run == 1)) {
  1381                           
  1382                           ; BSR set to: 1
  1383  000744  511F               	movf	(main@cont+31)& (0+255),w,b
  1384  000746  A4D8               	btfss	status,2,c
  1385  000748  D007               	goto	u2840
  1386                           
  1387                           ; BSR set to: 1
  1388  00074A  0100               	movlb	0	; () banked
  1389  00074C  5189               	movf	_G_rfid_retrieved& (0+255),w,b	;volatile
  1390  00074E  A4D8               	btfss	status,2,c
  1391  000750  D003               	goto	u2840
  1392                           
  1393                           ; BSR set to: 0
  1394  000752  0439               	decf	_G_run,w,c	;volatile
  1395  000754  B4D8               	btfsc	status,2,c
  1396  000756  D799               	goto	l125
  1397  000758                     u2840:
  1398                           
  1399                           ;main.c: 319:         while ((G_rfid_retrieved == 0) & (G_run == 1)) {
  1400                           
  1401                           ; BSR set to: 0
  1402                           
  1403                           ;main.c: 394:         }
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ; BSR set to: 0
  1408  000758  0100               	movlb	0	; () banked
  1409  00075A  5189               	movf	_G_rfid_retrieved& (0+255),w,b	;volatile
  1410  00075C  A4D8               	btfss	status,2,c
  1411  00075E  D003               	goto	u2860
  1412                           
  1413                           ; BSR set to: 0
  1414  000760  0439               	decf	_G_run,w,c	;volatile
  1415  000762  B4D8               	btfsc	status,2,c
  1416  000764  D72E               	goto	l118
  1417  000766                     u2860:
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 406:         if ((G_rfid_retrieved == 1) & (G_run == 1)) {
  1421                           
  1422                           ; BSR set to: 0
  1423                           
  1424                           ; BSR set to: 0
  1425  000766  0589               	decf	_G_rfid_retrieved& (0+255),w,b	;volatile
  1426  000768  A4D8               	btfss	status,2,c
  1427  00076A  D178               	goto	l154
  1428                           
  1429                           ; BSR set to: 0
  1430  00076C  0439               	decf	_G_run,w,c	;volatile
  1431  00076E  A4D8               	btfss	status,2,c
  1432  000770  D175               	goto	l154
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;main.c: 408:             stop_all(&motorL, &motorR);
  1436  000772  0E7E               	movlw	low main@motorL
  1437  000774  6E2D               	movwf	stop_all@mL,c
  1438  000776  0E00               	movlw	high main@motorL
  1439  000778  6E2E               	movwf	stop_all@mL+1,c
  1440  00077A  0E75               	movlw	low main@motorR
  1441  00077C  6E2F               	movwf	stop_all@mR,c
  1442  00077E  0E00               	movlw	high main@motorR
  1443  000780  6E30               	movwf	stop_all@mR+1,c
  1444  000782  EC3D  F00D         	call	_stop_all	;wreg free
  1445                           
  1446                           ;main.c: 409:             _delay((unsigned long)((500)*(8000000/4000.0)));
  1447  000786  0E06               	movlw	6
  1448  000788  0100               	movlb	0	; () banked
  1449  00078A  6F6D               	movwf	(??_main+1)& (0+255),b
  1450  00078C  0E13               	movlw	19
  1451  00078E  6F6C               	movwf	??_main& (0+255),b
  1452  000790  0EAD               	movlw	173
  1453  000792                     u3087:
  1454  000792  2EE8               	decfsz	wreg,f,c
  1455  000794  D7FE               	bra	u3087
  1456  000796  2F6C               	decfsz	??_main& (0+255),f,b
  1457  000798  D7FC               	bra	u3087
  1458  00079A  2F6D               	decfsz	(??_main+1)& (0+255),f,b
  1459  00079C  D7FA               	bra	u3087
  1460  00079E  D000               	nop2	
  1461                           
  1462                           ;main.c: 412:             clear_lcd();
  1463  0007A0  EC34  F00F         	call	_clear_lcd	;wreg free
  1464                           
  1465                           ;main.c: 413:             set_line(1);
  1466  0007A4  0E01               	movlw	1
  1467  0007A6  EC9E  F00E         	call	_set_line
  1468                           
  1469                           ;main.c: 414:             lcd_string("2");
  1470  0007AA  0E5B               	movlw	low STR_9
  1471  0007AC  6E1A               	movwf	lcd_string@string,c
  1472  0007AE  0E03               	movlw	high STR_9
  1473  0007B0  6E1B               	movwf	lcd_string@string+1,c
  1474  0007B2  ECA3  F00D         	call	_lcd_string	;wreg free
  1475                           
  1476                           ;main.c: 417:             while ((cont.i >= 0) & (G_run == 1) & (cont.i < 255)) {
  1477  0007B6  D095               	goto	l133
  1478  0007B8                     
  1479                           ;main.c: 419:                 clear_lcd();
  1480  0007B8  EC34  F00F         	call	_clear_lcd	;wreg free
  1481                           
  1482                           ;main.c: 420:                 set_line(1);
  1483  0007BC  0E01               	movlw	1
  1484  0007BE  EC9E  F00E         	call	_set_line
  1485                           
  1486                           ;main.c: 421:                 lcd_string("2a");
  1487  0007C2  0E53               	movlw	low STR_10
  1488  0007C4  6E1A               	movwf	lcd_string@string,c
  1489  0007C6  0E03               	movlw	high STR_10
  1490  0007C8  6E1B               	movwf	lcd_string@string+1,c
  1491  0007CA  ECA3  F00D         	call	_lcd_string	;wreg free
  1492                           
  1493                           ;main.c: 424:                 set_line(2);
  1494  0007CE  0E02               	movlw	2
  1495  0007D0  EC9E  F00E         	call	_set_line
  1496                           
  1497                           ;main.c: 425:                 itoa_5(cont.i, cont.ir_buf);
  1498  0007D4  C11E  F02D         	movff	main@cont+30,itoa_5@number
  1499  0007D8  6A2E               	clrf	itoa_5@number+1,c
  1500  0007DA  0E0E               	movlw	low (main@cont+14)
  1501  0007DC  6E2F               	movwf	itoa_5@buffer,c
  1502  0007DE  0E01               	movlw	high (main@cont+14)
  1503  0007E0  6E30               	movwf	itoa_5@buffer+1,c
  1504  0007E2  ECC4  F009         	call	_itoa_5	;wreg free
  1505                           
  1506                           ;main.c: 426:                 lcd_string(cont.ir_buf);
  1507  0007E6  0E0E               	movlw	low (main@cont+14)
  1508  0007E8  6E1A               	movwf	lcd_string@string,c
  1509  0007EA  0E01               	movlw	high (main@cont+14)
  1510  0007EC  6E1B               	movwf	lcd_string@string+1,c
  1511  0007EE  ECA3  F00D         	call	_lcd_string	;wreg free
  1512                           
  1513                           ;main.c: 429:                 if (cont.steer_action[cont.i] == 1) {
  1514  0007F2  0101               	movlb	1	; () banked
  1515  0007F4  511E               	movf	(main@cont+30)& (0+255),w,b
  1516  0007F6  0D01               	mullw	1
  1517  0007F8  0E20               	movlw	32
  1518  0007FA  26F3               	addwf	prodl,f,c
  1519  0007FC  0E00               	movlw	0
  1520  0007FE  22F4               	addwfc	prodh,f,c
  1521  000800  0E00               	movlw	low main@cont
  1522  000802  24F3               	addwf	prodl,w,c
  1523  000804  6ED9               	movwf	fsr2l,c
  1524  000806  0E01               	movlw	high main@cont
  1525  000808  20F4               	addwfc	prodh,w,c
  1526  00080A  6EDA               	movwf	fsr2h,c
  1527  00080C  04DE               	decf	postinc2,w,c
  1528  00080E  A4D8               	btfss	status,2,c
  1529  000810  D013               	goto	l135
  1530                           
  1531                           ; BSR set to: 1
  1532                           ;main.c: 431:                     lcd_string(":VL");
  1533  000812  0E3D               	movlw	low STR_11
  1534  000814  6E1A               	movwf	lcd_string@string,c
  1535  000816  0E03               	movlw	high STR_11
  1536  000818  6E1B               	movwf	lcd_string@string+1,c
  1537  00081A  ECA3  F00D         	call	_lcd_string	;wreg free
  1538                           
  1539                           ;main.c: 432:                     veer_left(&motorL, &motorR, 1);
  1540  00081E  0E7E               	movlw	low main@motorL
  1541  000820  6E2D               	movwf	veer_left@mL,c
  1542  000822  0E00               	movlw	high main@motorL
  1543  000824  6E2E               	movwf	veer_left@mL+1,c
  1544  000826  0E75               	movlw	low main@motorR
  1545  000828  6E2F               	movwf	veer_left@mR,c
  1546  00082A  0E00               	movlw	high main@motorR
  1547  00082C  6E30               	movwf	veer_left@mR+1,c
  1548  00082E  0E01               	movlw	1
  1549  000830  6E31               	movwf	veer_left@direction,c
  1550  000832  ECF8  F00A         	call	_veer_left	;wreg free
  1551                           
  1552                           ;main.c: 433:                 } else if (cont.steer_action[cont.i] == 2) {
  1553  000836  D047               	goto	l139
  1554  000838                     l135:
  1555  000838  0101               	movlb	1	; () banked
  1556  00083A  511E               	movf	(main@cont+30)& (0+255),w,b
  1557  00083C  0D01               	mullw	1
  1558  00083E  0E20               	movlw	32
  1559  000840  26F3               	addwf	prodl,f,c
  1560  000842  0E00               	movlw	0
  1561  000844  22F4               	addwfc	prodh,f,c
  1562  000846  0E00               	movlw	low main@cont
  1563  000848  24F3               	addwf	prodl,w,c
  1564  00084A  6ED9               	movwf	fsr2l,c
  1565  00084C  0E01               	movlw	high main@cont
  1566  00084E  20F4               	addwfc	prodh,w,c
  1567  000850  6EDA               	movwf	fsr2h,c
  1568  000852  0E02               	movlw	2
  1569  000854  18DE               	xorwf	postinc2,w,c
  1570  000856  A4D8               	btfss	status,2,c
  1571  000858  D013               	goto	l137
  1572                           
  1573                           ; BSR set to: 1
  1574                           ;main.c: 435:                     lcd_string(":VR");
  1575  00085A  0E41               	movlw	low STR_12
  1576  00085C  6E1A               	movwf	lcd_string@string,c
  1577  00085E  0E03               	movlw	high STR_12
  1578  000860  6E1B               	movwf	lcd_string@string+1,c
  1579  000862  ECA3  F00D         	call	_lcd_string	;wreg free
  1580                           
  1581                           ;main.c: 436:                     veer_right(&motorL, &motorR, 1);
  1582  000866  0E7E               	movlw	low main@motorL
  1583  000868  6E2D               	movwf	veer_right@mL,c
  1584  00086A  0E00               	movlw	high main@motorL
  1585  00086C  6E2E               	movwf	veer_right@mL+1,c
  1586  00086E  0E75               	movlw	low main@motorR
  1587  000870  6E2F               	movwf	veer_right@mR,c
  1588  000872  0E00               	movlw	high main@motorR
  1589  000874  6E30               	movwf	veer_right@mR+1,c
  1590  000876  0E01               	movlw	1
  1591  000878  6E31               	movwf	veer_right@direction,c
  1592  00087A  EC97  F00A         	call	_veer_right	;wreg free
  1593                           
  1594                           ;main.c: 437:                 } else if (cont.steer_action[cont.i] == 3) {
  1595  00087E  D023               	goto	l139
  1596  000880                     l137:
  1597  000880  0101               	movlb	1	; () banked
  1598  000882  511E               	movf	(main@cont+30)& (0+255),w,b
  1599  000884  0D01               	mullw	1
  1600  000886  0E20               	movlw	32
  1601  000888  26F3               	addwf	prodl,f,c
  1602  00088A  0E00               	movlw	0
  1603  00088C  22F4               	addwfc	prodh,f,c
  1604  00088E  0E00               	movlw	low main@cont
  1605  000890  24F3               	addwf	prodl,w,c
  1606  000892  6ED9               	movwf	fsr2l,c
  1607  000894  0E01               	movlw	high main@cont
  1608  000896  20F4               	addwfc	prodh,w,c
  1609  000898  6EDA               	movwf	fsr2h,c
  1610  00089A  0E03               	movlw	3
  1611  00089C  18DE               	xorwf	postinc2,w,c
  1612  00089E  A4D8               	btfss	status,2,c
  1613  0008A0  D012               	goto	l139
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;main.c: 439:                     lcd_string(":MC");
  1617  0008A2  0E39               	movlw	low STR_13
  1618  0008A4  6E1A               	movwf	lcd_string@string,c
  1619  0008A6  0E03               	movlw	high STR_13
  1620  0008A8  6E1B               	movwf	lcd_string@string+1,c
  1621  0008AA  ECA3  F00D         	call	_lcd_string	;wreg free
  1622                           
  1623                           ;main.c: 440:                     full_speed(&motorL, &motorR, 1);
  1624  0008AE  0E7E               	movlw	low main@motorL
  1625  0008B0  6E2D               	movwf	full_speed@mL,c
  1626  0008B2  0E00               	movlw	high main@motorL
  1627  0008B4  6E2E               	movwf	full_speed@mL+1,c
  1628  0008B6  0E75               	movlw	low main@motorR
  1629  0008B8  6E2F               	movwf	full_speed@mR,c
  1630  0008BA  0E00               	movlw	high main@motorR
  1631  0008BC  6E30               	movwf	full_speed@mR+1,c
  1632  0008BE  0E01               	movlw	1
  1633  0008C0  6E31               	movwf	full_speed@direction,c
  1634  0008C2  EC30  F00A         	call	_full_speed	;wreg free
  1635  0008C6                     l139:
  1636                           
  1637                           ;main.c: 442:                 _delay((unsigned long)((400)*(8000000/4000.0)));
  1638  0008C6  0E05               	movlw	5
  1639  0008C8  0100               	movlb	0	; () banked
  1640  0008CA  6F6D               	movwf	(??_main+1)& (0+255),b
  1641  0008CC  0E0F               	movlw	15
  1642  0008CE  6F6C               	movwf	??_main& (0+255),b
  1643  0008D0  0EF1               	movlw	241
  1644  0008D2                     u3097:
  1645  0008D2  2EE8               	decfsz	wreg,f,c
  1646  0008D4  D7FE               	bra	u3097
  1647  0008D6  2F6C               	decfsz	??_main& (0+255),f,b
  1648  0008D8  D7FC               	bra	u3097
  1649  0008DA  2F6D               	decfsz	(??_main+1)& (0+255),f,b
  1650  0008DC  D7FA               	bra	u3097
  1651                           
  1652                           ;main.c: 443:                 cont.i--;
  1653  0008DE  0101               	movlb	1	; () banked
  1654  0008E0  071E               	decf	(main@cont+30)& (0+255),f,b
  1655  0008E2                     l133:
  1656                           
  1657                           ;main.c: 417:             while ((cont.i >= 0) & (G_run == 1) & (cont.i < 255)) {
  1658                           
  1659                           ; BSR set to: 1
  1660  0008E2  0439               	decf	_G_run,w,c	;volatile
  1661  0008E4  A4D8               	btfss	status,2,c
  1662  0008E6  D004               	goto	u2930
  1663  0008E8  0101               	movlb	1	; () banked
  1664  0008EA  291E               	incf	(main@cont+30)& (0+255),w,b
  1665  0008EC  A4D8               	btfss	status,2,c
  1666  0008EE  D764               	goto	l134
  1667  0008F0                     u2930:
  1668                           
  1669                           ;main.c: 447:             stop_all(&motorL, &motorR);
  1670                           
  1671                           ; BSR set to: 1
  1672                           
  1673                           ; BSR set to: 1
  1674  0008F0  0E7E               	movlw	low main@motorL
  1675  0008F2  6E2D               	movwf	stop_all@mL,c
  1676  0008F4  0E00               	movlw	high main@motorL
  1677  0008F6  6E2E               	movwf	stop_all@mL+1,c
  1678  0008F8  0E75               	movlw	low main@motorR
  1679  0008FA  6E2F               	movwf	stop_all@mR,c
  1680  0008FC  0E00               	movlw	high main@motorR
  1681  0008FE  6E30               	movwf	stop_all@mR+1,c
  1682  000900  EC3D  F00D         	call	_stop_all	;wreg free
  1683                           
  1684                           ;main.c: 448:             clear_lcd();
  1685  000904  EC34  F00F         	call	_clear_lcd	;wreg free
  1686                           
  1687                           ;main.c: 449:             full_speed(&motorL, &motorR, 1);
  1688  000908  0E7E               	movlw	low main@motorL
  1689  00090A  6E2D               	movwf	full_speed@mL,c
  1690  00090C  0E00               	movlw	high main@motorL
  1691  00090E  6E2E               	movwf	full_speed@mL+1,c
  1692  000910  0E75               	movlw	low main@motorR
  1693  000912  6E2F               	movwf	full_speed@mR,c
  1694  000914  0E00               	movlw	high main@motorR
  1695  000916  6E30               	movwf	full_speed@mR+1,c
  1696  000918  0E01               	movlw	1
  1697  00091A  6E31               	movwf	full_speed@direction,c
  1698  00091C  EC30  F00A         	call	_full_speed	;wreg free
  1699                           
  1700                           ;main.c: 450:             delay_s(5);
  1701  000920  0E05               	movlw	5
  1702  000922  EC43  F00E         	call	_delay_s
  1703                           
  1704                           ;main.c: 451:             stop_all(&motorL, &motorR);
  1705  000926  0E7E               	movlw	low main@motorL
  1706  000928  6E2D               	movwf	stop_all@mL,c
  1707  00092A  0E00               	movlw	high main@motorL
  1708  00092C  6E2E               	movwf	stop_all@mL+1,c
  1709  00092E  0E75               	movlw	low main@motorR
  1710  000930  6E2F               	movwf	stop_all@mR,c
  1711  000932  0E00               	movlw	high main@motorR
  1712  000934  6E30               	movwf	stop_all@mR+1,c
  1713  000936  EC3D  F00D         	call	_stop_all	;wreg free
  1714                           
  1715                           ;main.c: 454:             clear_lcd();
  1716  00093A  EC34  F00F         	call	_clear_lcd	;wreg free
  1717                           
  1718                           ;main.c: 455:             set_line(1);
  1719  00093E  0E01               	movlw	1
  1720  000940  EC9E  F00E         	call	_set_line
  1721                           
  1722                           ;main.c: 456:             lcd_string("2b");
  1723  000944  0E56               	movlw	low STR_14
  1724  000946  6E1A               	movwf	lcd_string@string,c
  1725  000948  0E03               	movlw	high STR_14
  1726  00094A  6E1B               	movwf	lcd_string@string+1,c
  1727  00094C  ECA3  F00D         	call	_lcd_string	;wreg free
  1728                           
  1729                           ;main.c: 457:             delay_s(1);
  1730  000950  0E01               	movlw	1
  1731  000952  EC43  F00E         	call	_delay_s
  1732                           
  1733                           ;main.c: 460:             for (cont.i = 0; cont.i < 14; cont.i++) {
  1734  000956  0E00               	movlw	0
  1735  000958  0101               	movlb	1	; () banked
  1736  00095A  6F1E               	movwf	(main@cont+30)& (0+255),b
  1737  00095C  D032               	goto	l143
  1738  00095E                     
  1739                           ; BSR set to: 1
  1740                           ;main.c: 461:                 if (G_rfid_buf[cont.i] == 10 | G_rfid_buf[cont.i] == 13) {
  1741                           
  1742                           ; BSR set to: 1
  1743  00095E  511E               	movf	(main@cont+30)& (0+255),w,b
  1744  000960  0D01               	mullw	1
  1745  000962  0E3A               	movlw	low _G_rfid_buf
  1746  000964  24F3               	addwf	prodl,w,c
  1747  000966  6ED9               	movwf	fsr2l,c
  1748  000968  0E00               	movlw	high _G_rfid_buf
  1749  00096A  20F4               	addwfc	prodh,w,c
  1750  00096C  6EDA               	movwf	fsr2h,c
  1751  00096E  0E0D               	movlw	13
  1752  000970  18DE               	xorwf	postinc2,w,c
  1753  000972  A4D8               	btfss	status,2,c
  1754  000974  D002               	goto	u2940
  1755  000976  0E01               	movlw	1
  1756  000978  D001               	goto	u2942
  1757  00097A                     u2940:
  1758  00097A  0E00               	movlw	0
  1759  00097C                     u2942:
  1760  00097C  0100               	movlb	0	; () banked
  1761  00097E  6F6D               	movwf	(??_main+1)& (0+255),b
  1762  000980  0101               	movlb	1	; () banked
  1763  000982  511E               	movf	(main@cont+30)& (0+255),w,b
  1764  000984  0D01               	mullw	1
  1765  000986  0E3A               	movlw	low _G_rfid_buf
  1766  000988  24F3               	addwf	prodl,w,c
  1767  00098A  6ED9               	movwf	fsr2l,c
  1768  00098C  0E00               	movlw	high _G_rfid_buf
  1769  00098E  20F4               	addwfc	prodh,w,c
  1770  000990  6EDA               	movwf	fsr2h,c
  1771  000992  0E0A               	movlw	10
  1772  000994  18DE               	xorwf	postinc2,w,c
  1773  000996  A4D8               	btfss	status,2,c
  1774  000998  D002               	goto	u2950
  1775  00099A  0E01               	movlw	1
  1776  00099C  D001               	goto	u2952
  1777  00099E                     u2950:
  1778  00099E  0E00               	movlw	0
  1779  0009A0                     u2952:
  1780  0009A0  0100               	movlb	0	; () banked
  1781  0009A2  116D               	iorwf	(??_main+1)& (0+255),w,b
  1782  0009A4  A0E8               	btfss	wreg,0,c
  1783  0009A6  D00B               	goto	l145
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 463:                     G_rfid_buf[cont.i] = 0;
  1787  0009A8  0101               	movlb	1	; () banked
  1788  0009AA  511E               	movf	(main@cont+30)& (0+255),w,b
  1789  0009AC  0D01               	mullw	1
  1790  0009AE  0E3A               	movlw	low _G_rfid_buf
  1791  0009B0  24F3               	addwf	prodl,w,c
  1792  0009B2  6ED9               	movwf	fsr2l,c
  1793  0009B4  0E00               	movlw	high _G_rfid_buf
  1794  0009B6  20F4               	addwfc	prodh,w,c
  1795  0009B8  6EDA               	movwf	fsr2h,c
  1796  0009BA  0E00               	movlw	0
  1797  0009BC  6EDF               	movwf	indf2,c
  1798  0009BE                     l145:
  1799                           
  1800                           ;main.c: 465:             }
  1801                           
  1802                           ; BSR set to: 1
  1803  0009BE  0101               	movlb	1	; () banked
  1804  0009C0  2B1E               	incf	(main@cont+30)& (0+255),f,b
  1805  0009C2                     l143:
  1806                           
  1807                           ; BSR set to: 1
  1808                           
  1809                           ; BSR set to: 1
  1810  0009C2  0E0D               	movlw	13
  1811  0009C4  651E               	cpfsgt	(main@cont+30)& (0+255),b
  1812  0009C6  D7CB               	goto	l144
  1813                           
  1814                           ; BSR set to: 1
  1815                           ;main.c: 468:             chksm[0] = G_rfid_buf[0] | G_rfid_buf[1];
  1816                           
  1817                           ; BSR set to: 1
  1818  0009C8  503B               	movf	_G_rfid_buf+1,w,c	;volatile
  1819  0009CA  103A               	iorwf	_G_rfid_buf,w,c	;volatile
  1820  0009CC  0100               	movlb	0	; () banked
  1821  0009CE  6F6F               	movwf	main@chksm& (0+255),b
  1822                           
  1823                           ;main.c: 469:             chksm[1] = G_rfid_buf[2] | G_rfid_buf[3];
  1824  0009D0  503C               	movf	_G_rfid_buf+2,w,c	;volatile
  1825  0009D2  103D               	iorwf	_G_rfid_buf+3,w,c	;volatile
  1826  0009D4  6F70               	movwf	(main@chksm+1)& (0+255),b
  1827                           
  1828                           ;main.c: 470:             chksm[2] = G_rfid_buf[4] | G_rfid_buf[5];
  1829  0009D6  503E               	movf	_G_rfid_buf+4,w,c	;volatile
  1830  0009D8  103F               	iorwf	_G_rfid_buf+5,w,c	;volatile
  1831  0009DA  6F71               	movwf	(main@chksm+2)& (0+255),b
  1832                           
  1833                           ;main.c: 471:             chksm[3] = G_rfid_buf[6] | G_rfid_buf[7];
  1834  0009DC  5040               	movf	_G_rfid_buf+6,w,c	;volatile
  1835  0009DE  1041               	iorwf	_G_rfid_buf+7,w,c	;volatile
  1836  0009E0  6F72               	movwf	(main@chksm+3)& (0+255),b
  1837                           
  1838                           ;main.c: 472:             chksm[4] = G_rfid_buf[8] | G_rfid_buf[9];
  1839  0009E2  5042               	movf	_G_rfid_buf+8,w,c	;volatile
  1840  0009E4  1043               	iorwf	_G_rfid_buf+9,w,c	;volatile
  1841  0009E6  6F73               	movwf	(main@chksm+4)& (0+255),b
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 475:             j = 1;
  1845  0009E8  0E01               	movlw	1
  1846  0009EA  6F74               	movwf	main@j& (0+255),b
  1847                           
  1848                           ;main.c: 476:             while (j < 5) {
  1849  0009EC  D00C               	goto	l147
  1850  0009EE                     
  1851                           ; BSR set to: 0
  1852                           ;main.c: 477:                 chksm[0] = chksm[0] ^ chksm[j];
  1853                           
  1854                           ; BSR set to: 0
  1855  0009EE  5174               	movf	main@j& (0+255),w,b
  1856  0009F0  0D01               	mullw	1
  1857  0009F2  0E6F               	movlw	low main@chksm
  1858  0009F4  24F3               	addwf	prodl,w,c
  1859  0009F6  6ED9               	movwf	fsr2l,c
  1860  0009F8  0E00               	movlw	high main@chksm
  1861  0009FA  20F4               	addwfc	prodh,w,c
  1862  0009FC  6EDA               	movwf	fsr2h,c
  1863  0009FE  50DF               	movf	indf2,w,c
  1864  000A00  196F               	xorwf	main@chksm& (0+255),w,b
  1865  000A02  6F6F               	movwf	main@chksm& (0+255),b
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 478:                 j++;
  1869  000A04  2B74               	incf	main@j& (0+255),f,b
  1870  000A06                     l147:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 476:             while (j < 5) {
  1874                           
  1875                           ; BSR set to: 0
  1876  000A06  0E04               	movlw	4
  1877  000A08  6574               	cpfsgt	main@j& (0+255),b
  1878  000A0A  D7F1               	goto	l148
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;main.c: 484:             if (chksm[0] == (G_rfid_buf[10] | G_rfid_buf[11])) {
  1882                           
  1883                           ; BSR set to: 0
  1884  000A0C  5044               	movf	_G_rfid_buf+10,w,c	;volatile
  1885  000A0E  1045               	iorwf	_G_rfid_buf+11,w,c	;volatile
  1886  000A10  196F               	xorwf	main@chksm& (0+255),w,b
  1887  000A12  A4D8               	btfss	status,2,c
  1888  000A14  D01A               	goto	l150
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 486:                 set_line(1);
  1892  000A16  0E01               	movlw	1
  1893  000A18  EC9E  F00E         	call	_set_line
  1894                           
  1895                           ;main.c: 487:                 lcd_string("CHECKSUM VALID");
  1896  000A1C  0E12               	movlw	low STR_15
  1897  000A1E  6E1A               	movwf	lcd_string@string,c
  1898  000A20  0E03               	movlw	high STR_15
  1899  000A22  6E1B               	movwf	lcd_string@string+1,c
  1900  000A24  ECA3  F00D         	call	_lcd_string	;wreg free
  1901                           
  1902                           ;main.c: 490:                 G_rfid_buf[10] = 0;
  1903  000A28  0E00               	movlw	0
  1904  000A2A  6E44               	movwf	_G_rfid_buf+10,c	;volatile
  1905                           
  1906                           ;main.c: 491:                 G_rfid_buf[11] = 0;
  1907  000A2C  0E00               	movlw	0
  1908  000A2E  6E45               	movwf	_G_rfid_buf+11,c	;volatile
  1909                           
  1910                           ;main.c: 494:                 set_line(2);
  1911  000A30  0E02               	movlw	2
  1912  000A32  EC9E  F00E         	call	_set_line
  1913                           
  1914                           ;main.c: 495:                 lcd_string(G_rfid_buf);
  1915  000A36  0E3A               	movlw	low _G_rfid_buf
  1916  000A38  6E1A               	movwf	lcd_string@string,c
  1917  000A3A  0E00               	movlw	high _G_rfid_buf
  1918  000A3C  6E1B               	movwf	lcd_string@string+1,c
  1919  000A3E  ECA3  F00D         	call	_lcd_string	;wreg free
  1920  000A42  0439               	decf	_G_run,w,c	;volatile
  1921  000A44  A4D8               	btfss	status,2,c
  1922  000A46  D00A               	goto	l154
  1923  000A48  D7FC               	goto	l152
  1924  000A4A                     l150:
  1925                           
  1926                           ;main.c: 500:                 set_line(1);
  1927  000A4A  0E01               	movlw	1
  1928  000A4C  EC9E  F00E         	call	_set_line
  1929                           
  1930                           ;main.c: 501:                 lcd_string("CHECKSUM INVALID");
  1931  000A50  0E01               	movlw	low STR_16
  1932  000A52  6E1A               	movwf	lcd_string@string,c
  1933  000A54  0E03               	movlw	high STR_16
  1934  000A56  6E1B               	movwf	lcd_string@string+1,c
  1935  000A58  ECA3  F00D         	call	_lcd_string	;wreg free
  1936  000A5C                     l154:
  1937                           
  1938                           ;main.c: 298:     while (G_run == 1) {
  1939                           
  1940                           ;main.c: 507:     }
  1941                           
  1942                           ;main.c: 506:         }
  1943  000A5C  0439               	decf	_G_run,w,c	;volatile
  1944  000A5E  A4D8               	btfss	status,2,c
  1945  000A60  EF23  F000         	goto	start
  1946  000A64  D587               	goto	l116
  1947  000A66                     __end_of_main:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           indf2	equ	0xFDF
  1955                           postinc2	equ	0xFDE
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _steer *****************
  1961 ;; Defined at:
  1962 ;;		line 583 in file "functions.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  cont            2    0[BANK0 ] PTR struct Control
  1965 ;;		 -> main@cont(252), 
  1966 ;;  motorL          2    2[BANK0 ] PTR struct DC_motor
  1967 ;;		 -> main@motorL(9), 
  1968 ;;  motorR          2    4[BANK0 ] PTR struct DC_motor
  1969 ;;		 -> main@motorR(9), 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1981 ;;      Params:         0       6       0       0
  1982 ;;      Locals:         0       0       0       0
  1983 ;;      Temps:          0       4       0       0
  1984 ;;      Totals:         0      10       0       0
  1985 ;;Total ram usage:       10 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:   10
  1988 ;; This function calls:
  1989 ;;		_full_speed
  1990 ;;		_lcd_string
  1991 ;;		_veer_left
  1992 ;;		_veer_right
  1993 ;; This function is called by:
  1994 ;;		_main
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text1
  1999  000D0A                     __ptext1:
  2000                           	opt stack 0
  2001  000D0A                     _steer:
  2002                           	opt stack 20
  2003                           
  2004                           ;functions.c: 584:     if ((cont->turn_direction == 1) & (cont->ir_diff > (cont->ir_thre
      +                          shold))) {
  2005                           
  2006                           ;incstack = 0
  2007  000D0A  0100               	movlb	0	; () banked
  2008  000D0C  EE20 F006          	lfsr	2,6
  2009  000D10  5160               	movf	steer@cont& (0+255),w,b
  2010  000D12  26D9               	addwf	fsr2l,f,c
  2011  000D14  5161               	movf	(steer@cont+1)& (0+255),w,b
  2012  000D16  22DA               	addwfc	fsr2h,f,c
  2013  000D18  04DE               	decf	postinc2,w,c
  2014  000D1A  A4D8               	btfss	status,2,c
  2015  000D1C  D03B               	goto	l399
  2016                           
  2017                           ; BSR set to: 0
  2018  000D1E  EE20 F004          	lfsr	2,4
  2019  000D22  5160               	movf	steer@cont& (0+255),w,b
  2020  000D24  26D9               	addwf	fsr2l,f,c
  2021  000D26  5161               	movf	(steer@cont+1)& (0+255),w,b
  2022  000D28  22DA               	addwfc	fsr2h,f,c
  2023  000D2A  EE10 F007          	lfsr	1,7
  2024  000D2E  5160               	movf	steer@cont& (0+255),w,b
  2025  000D30  26E1               	addwf	fsr1l,f,c
  2026  000D32  5161               	movf	(steer@cont+1)& (0+255),w,b
  2027  000D34  22E2               	addwfc	fsr1h,f,c
  2028  000D36  50DE               	movf	postinc2,w,c
  2029  000D38  5CE6               	subwf	postinc1,w,c
  2030  000D3A  50DE               	movf	postinc2,w,c
  2031  000D3C  58E6               	subwfb	postinc1,w,c
  2032  000D3E  B0D8               	btfsc	status,0,c
  2033  000D40  D029               	goto	l399
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;functions.c: 587:         cont->steer_action[cont->i] = 1;
  2037  000D42  EE20 F01E          	lfsr	2,30
  2038  000D46  5160               	movf	steer@cont& (0+255),w,b
  2039  000D48  26D9               	addwf	fsr2l,f,c
  2040  000D4A  5161               	movf	(steer@cont+1)& (0+255),w,b
  2041  000D4C  22DA               	addwfc	fsr2h,f,c
  2042  000D4E  50DF               	movf	indf2,w,c
  2043  000D50  6F66               	movwf	??_steer& (0+255),b
  2044  000D52  5166               	movf	??_steer& (0+255),w,b
  2045  000D54  0D01               	mullw	1
  2046  000D56  0E20               	movlw	32
  2047  000D58  26F3               	addwf	prodl,f,c
  2048  000D5A  0E00               	movlw	0
  2049  000D5C  22F4               	addwfc	prodh,f,c
  2050  000D5E  50F3               	movf	prodl,w,c
  2051  000D60  2560               	addwf	steer@cont& (0+255),w,b
  2052  000D62  6ED9               	movwf	fsr2l,c
  2053  000D64  50F4               	movf	prodh,w,c
  2054  000D66  2161               	addwfc	(steer@cont+1)& (0+255),w,b
  2055  000D68  6EDA               	movwf	fsr2h,c
  2056  000D6A  0E01               	movlw	1
  2057  000D6C  6EDF               	movwf	indf2,c
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;functions.c: 588:         lcd_string(":VL");
  2061  000D6E  0E3D               	movlw	low STR_11
  2062  000D70  6E1A               	movwf	lcd_string@string,c
  2063  000D72  0E03               	movlw	high STR_11
  2064  000D74  6E1B               	movwf	lcd_string@string+1,c
  2065  000D76  ECA3  F00D         	call	_lcd_string	;wreg free
  2066                           
  2067                           ;functions.c: 589:         veer_left(motorL, motorR, 0);
  2068  000D7A  C062  F02D         	movff	steer@motorL,veer_left@mL
  2069  000D7E  C063  F02E         	movff	steer@motorL+1,veer_left@mL+1
  2070  000D82  C064  F02F         	movff	steer@motorR,veer_left@mR
  2071  000D86  C065  F030         	movff	steer@motorR+1,veer_left@mR+1
  2072  000D8A  0E00               	movlw	0
  2073  000D8C  6E31               	movwf	veer_left@direction,c
  2074  000D8E  ECF8  F00A         	call	_veer_left	;wreg free
  2075                           
  2076                           ;functions.c: 591:     } else if ((cont->turn_direction == 0) & (cont->ir_diff > (cont->
      +                          ir_threshold))) {
  2077  000D92  0012               	return	
  2078  000D94                     l399:
  2079  000D94  0100               	movlb	0	; () banked
  2080  000D96  EE20 F006          	lfsr	2,6
  2081  000D9A  5160               	movf	steer@cont& (0+255),w,b
  2082  000D9C  26D9               	addwf	fsr2l,f,c
  2083  000D9E  5161               	movf	(steer@cont+1)& (0+255),w,b
  2084  000DA0  22DA               	addwfc	fsr2h,f,c
  2085  000DA2  50DF               	movf	indf2,w,c
  2086  000DA4  A4D8               	btfss	status,2,c
  2087  000DA6  D03B               	goto	l401
  2088                           
  2089                           ; BSR set to: 0
  2090  000DA8  EE20 F004          	lfsr	2,4
  2091  000DAC  5160               	movf	steer@cont& (0+255),w,b
  2092  000DAE  26D9               	addwf	fsr2l,f,c
  2093  000DB0  5161               	movf	(steer@cont+1)& (0+255),w,b
  2094  000DB2  22DA               	addwfc	fsr2h,f,c
  2095  000DB4  EE10 F007          	lfsr	1,7
  2096  000DB8  5160               	movf	steer@cont& (0+255),w,b
  2097  000DBA  26E1               	addwf	fsr1l,f,c
  2098  000DBC  5161               	movf	(steer@cont+1)& (0+255),w,b
  2099  000DBE  22E2               	addwfc	fsr1h,f,c
  2100  000DC0  50DE               	movf	postinc2,w,c
  2101  000DC2  5CE6               	subwf	postinc1,w,c
  2102  000DC4  50DE               	movf	postinc2,w,c
  2103  000DC6  58E6               	subwfb	postinc1,w,c
  2104  000DC8  B0D8               	btfsc	status,0,c
  2105  000DCA  D029               	goto	l401
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;functions.c: 594:         cont->steer_action[cont->i] = 2;
  2109  000DCC  EE20 F01E          	lfsr	2,30
  2110  000DD0  5160               	movf	steer@cont& (0+255),w,b
  2111  000DD2  26D9               	addwf	fsr2l,f,c
  2112  000DD4  5161               	movf	(steer@cont+1)& (0+255),w,b
  2113  000DD6  22DA               	addwfc	fsr2h,f,c
  2114  000DD8  50DF               	movf	indf2,w,c
  2115  000DDA  6F66               	movwf	??_steer& (0+255),b
  2116  000DDC  5166               	movf	??_steer& (0+255),w,b
  2117  000DDE  0D01               	mullw	1
  2118  000DE0  0E20               	movlw	32
  2119  000DE2  26F3               	addwf	prodl,f,c
  2120  000DE4  0E00               	movlw	0
  2121  000DE6  22F4               	addwfc	prodh,f,c
  2122  000DE8  50F3               	movf	prodl,w,c
  2123  000DEA  2560               	addwf	steer@cont& (0+255),w,b
  2124  000DEC  6ED9               	movwf	fsr2l,c
  2125  000DEE  50F4               	movf	prodh,w,c
  2126  000DF0  2161               	addwfc	(steer@cont+1)& (0+255),w,b
  2127  000DF2  6EDA               	movwf	fsr2h,c
  2128  000DF4  0E02               	movlw	2
  2129  000DF6  6EDF               	movwf	indf2,c
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;functions.c: 595:         lcd_string(":VR");
  2133  000DF8  0E41               	movlw	low STR_12
  2134  000DFA  6E1A               	movwf	lcd_string@string,c
  2135  000DFC  0E03               	movlw	high STR_12
  2136  000DFE  6E1B               	movwf	lcd_string@string+1,c
  2137  000E00  ECA3  F00D         	call	_lcd_string	;wreg free
  2138                           
  2139                           ;functions.c: 596:         veer_right(motorL, motorR, 0);
  2140  000E04  C062  F02D         	movff	steer@motorL,veer_right@mL
  2141  000E08  C063  F02E         	movff	steer@motorL+1,veer_right@mL+1
  2142  000E0C  C064  F02F         	movff	steer@motorR,veer_right@mR
  2143  000E10  C065  F030         	movff	steer@motorR+1,veer_right@mR+1
  2144  000E14  0E00               	movlw	0
  2145  000E16  6E31               	movwf	veer_right@direction,c
  2146  000E18  EC97  F00A         	call	_veer_right	;wreg free
  2147                           
  2148                           ;functions.c: 598:     } else {
  2149  000E1C  0012               	return	
  2150  000E1E                     l401:
  2151                           
  2152                           ;functions.c: 601:         cont->steer_action[cont->i] = 3;
  2153  000E1E  0100               	movlb	0	; () banked
  2154  000E20  EE20 F01E          	lfsr	2,30
  2155  000E24  5160               	movf	steer@cont& (0+255),w,b
  2156  000E26  26D9               	addwf	fsr2l,f,c
  2157  000E28  5161               	movf	(steer@cont+1)& (0+255),w,b
  2158  000E2A  22DA               	addwfc	fsr2h,f,c
  2159  000E2C  50DF               	movf	indf2,w,c
  2160  000E2E  6F66               	movwf	??_steer& (0+255),b
  2161  000E30  5166               	movf	??_steer& (0+255),w,b
  2162  000E32  0D01               	mullw	1
  2163  000E34  0E20               	movlw	32
  2164  000E36  26F3               	addwf	prodl,f,c
  2165  000E38  0E00               	movlw	0
  2166  000E3A  22F4               	addwfc	prodh,f,c
  2167  000E3C  50F3               	movf	prodl,w,c
  2168  000E3E  2560               	addwf	steer@cont& (0+255),w,b
  2169  000E40  6ED9               	movwf	fsr2l,c
  2170  000E42  50F4               	movf	prodh,w,c
  2171  000E44  2161               	addwfc	(steer@cont+1)& (0+255),w,b
  2172  000E46  6EDA               	movwf	fsr2h,c
  2173  000E48  0E03               	movlw	3
  2174  000E4A  6EDF               	movwf	indf2,c
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;functions.c: 602:         lcd_string(":MC");
  2178  000E4C  0E39               	movlw	low STR_13
  2179  000E4E  6E1A               	movwf	lcd_string@string,c
  2180  000E50  0E03               	movlw	high STR_13
  2181  000E52  6E1B               	movwf	lcd_string@string+1,c
  2182  000E54  ECA3  F00D         	call	_lcd_string	;wreg free
  2183                           
  2184                           ;functions.c: 603:         full_speed(motorL, motorR, 0);
  2185  000E58  C062  F02D         	movff	steer@motorL,full_speed@mL
  2186  000E5C  C063  F02E         	movff	steer@motorL+1,full_speed@mL+1
  2187  000E60  C064  F02F         	movff	steer@motorR,full_speed@mR
  2188  000E64  C065  F030         	movff	steer@motorR+1,full_speed@mR+1
  2189  000E68  0E00               	movlw	0
  2190  000E6A  6E31               	movwf	full_speed@direction,c
  2191  000E6C  EC30  F00A         	call	_full_speed	;wreg free
  2192                           
  2193                           ;functions.c: 605:     }
  2194  000E70  0012               	return	
  2195  000E72                     __end_of_steer:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           prodh	equ	0xFF4
  2199                           prodl	equ	0xFF3
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postinc1	equ	0xFE6
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           postinc2	equ	0xFDE
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _veer_right *****************
  2212 ;; Defined at:
  2213 ;;		line 217 in file "dc_motor_funct.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  mL              2   44[COMRAM] PTR struct DC_motor
  2216 ;;		 -> main@motorL(9), 
  2217 ;;  mR              2   46[COMRAM] PTR struct DC_motor
  2218 ;;		 -> main@motorR(9), 
  2219 ;;  direction       1   48[COMRAM] unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2231 ;;      Params:         5       0       0       0
  2232 ;;      Locals:         0       0       0       0
  2233 ;;      Temps:          7       0       0       0
  2234 ;;      Totals:        12       0       0       0
  2235 ;;Total ram usage:       12 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    8
  2238 ;; This function calls:
  2239 ;;		_set_motor_pwm
  2240 ;; This function is called by:
  2241 ;;		_main
  2242 ;;		_steer
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text2
  2247  00152E                     __ptext2:
  2248                           	opt stack 0
  2249  00152E                     _veer_right:
  2250                           	opt stack 22
  2251                           
  2252                           ;dc_motor_funct.c: 219:     mL->direction = direction;
  2253                           
  2254                           ;incstack = 0
  2255  00152E  EE20 F001          	lfsr	2,1
  2256  001532  502D               	movf	veer_right@mL,w,c
  2257  001534  26D9               	addwf	fsr2l,f,c
  2258  001536  502E               	movf	veer_right@mL+1,w,c
  2259  001538  22DA               	addwfc	fsr2h,f,c
  2260  00153A  C031  FFDF         	movff	veer_right@direction,indf2
  2261                           
  2262                           ;dc_motor_funct.c: 220:     mR->direction = direction;
  2263  00153E  EE20 F001          	lfsr	2,1
  2264  001542  502F               	movf	veer_right@mR,w,c
  2265  001544  26D9               	addwf	fsr2l,f,c
  2266  001546  5030               	movf	veer_right@mR+1,w,c
  2267  001548  22DA               	addwfc	fsr2h,f,c
  2268  00154A  C031  FFDF         	movff	veer_right@direction,indf2
  2269                           
  2270                           ;dc_motor_funct.c: 222:     mL->power = mR->power;
  2271  00154E  C02F  FFD9         	movff	veer_right@mR,fsr2l
  2272  001552  C030  FFDA         	movff	veer_right@mR+1,fsr2h
  2273  001556  C02D  FFE1         	movff	veer_right@mL,fsr1l
  2274  00155A  C02E  FFE2         	movff	veer_right@mL+1,fsr1h
  2275  00155E  CFDF FFE7          	movff	indf2,indf1
  2276                           
  2277                           ;dc_motor_funct.c: 224:     mL->power = 90;
  2278  001562  C02D  FFD9         	movff	veer_right@mL,fsr2l
  2279  001566  C02E  FFDA         	movff	veer_right@mL+1,fsr2h
  2280  00156A  0E5A               	movlw	90
  2281  00156C  6EDF               	movwf	indf2,c
  2282                           
  2283                           ;dc_motor_funct.c: 225:     mR->power = 90;
  2284  00156E  C02F  FFD9         	movff	veer_right@mR,fsr2l
  2285  001572  C030  FFDA         	movff	veer_right@mR+1,fsr2h
  2286  001576  0E5A               	movlw	90
  2287  001578  6EDF               	movwf	indf2,c
  2288  00157A  D019               	goto	l202
  2289  00157C                     
  2290                           ;dc_motor_funct.c: 229:         set_motor_pwm(mL);
  2291  00157C  C02D  F024         	movff	veer_right@mL,set_motor_pwm@m
  2292  001580  C02E  F025         	movff	veer_right@mL+1,set_motor_pwm@m+1
  2293  001584  EC39  F007         	call	_set_motor_pwm	;wreg free
  2294                           
  2295                           ;dc_motor_funct.c: 230:         set_motor_pwm(mR);
  2296  001588  C02F  F024         	movff	veer_right@mR,set_motor_pwm@m
  2297  00158C  C030  F025         	movff	veer_right@mR+1,set_motor_pwm@m+1
  2298  001590  EC39  F007         	call	_set_motor_pwm	;wreg free
  2299                           
  2300                           ;dc_motor_funct.c: 231:         _delay((unsigned long)((2)*(8000000/4000.0)));
  2301  001594  0E06               	movlw	6
  2302  001596  6E32               	movwf	??_veer_right& (0+255),c
  2303  001598  0E30               	movlw	48
  2304  00159A                     u3107:
  2305  00159A  2EE8               	decfsz	wreg,f,c
  2306  00159C  D7FE               	bra	u3107
  2307  00159E  2E32               	decfsz	??_veer_right& (0+255),f,c
  2308  0015A0  D7FC               	bra	u3107
  2309  0015A2  D000               	nop2	
  2310                           
  2311                           ;dc_motor_funct.c: 232:     }
  2312  0015A4  C02D  FFD9         	movff	veer_right@mL,fsr2l
  2313  0015A8  C02E  FFDA         	movff	veer_right@mL+1,fsr2h
  2314  0015AC  06DF               	decf	indf2,f,c
  2315  0015AE                     l202:
  2316  0015AE  C02D  FFD9         	movff	veer_right@mL,fsr2l
  2317  0015B2  C02E  FFDA         	movff	veer_right@mL+1,fsr2h
  2318  0015B6  50DF               	movf	indf2,w,c
  2319  0015B8  6E32               	movwf	??_veer_right& (0+255),c
  2320  0015BA  6A33               	clrf	(??_veer_right+1)& (0+255),c
  2321  0015BC  0ED3               	movlw	211
  2322  0015BE  6E34               	movwf	(??_veer_right+2)& (0+255),c
  2323  0015C0  0EFF               	movlw	255
  2324  0015C2  6E35               	movwf	(??_veer_right+3)& (0+255),c
  2325  0015C4  C02F  FFD9         	movff	veer_right@mR,fsr2l
  2326  0015C8  C030  FFDA         	movff	veer_right@mR+1,fsr2h
  2327  0015CC  50DF               	movf	indf2,w,c
  2328  0015CE  6E36               	movwf	(??_veer_right+4)& (0+255),c
  2329  0015D0  6A37               	clrf	(??_veer_right+5)& (0+255),c
  2330  0015D2  5034               	movf	??_veer_right+2,w,c
  2331  0015D4  2636               	addwf	??_veer_right+4,f,c
  2332  0015D6  5035               	movf	??_veer_right+3,w,c
  2333  0015D8  2237               	addwfc	??_veer_right+5,f,c
  2334  0015DA  5032               	movf	??_veer_right,w,c
  2335  0015DC  5C36               	subwf	??_veer_right+4,w,c
  2336  0015DE  5037               	movf	??_veer_right+5,w,c
  2337  0015E0  0A80               	xorlw	128
  2338  0015E2  6E38               	movwf	(??_veer_right+6)& (0+255),c
  2339  0015E4  5033               	movf	??_veer_right+1,w,c
  2340  0015E6  0A80               	xorlw	128
  2341  0015E8  5838               	subwfb	(??_veer_right+6)& (0+255),w,c
  2342  0015EA  B0D8               	btfsc	status,0,c
  2343  0015EC  0012               	return	
  2344  0015EE  D7C6               	goto	l203
  2345  0015F0                     __end_of_veer_right:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           prodh	equ	0xFF4
  2349                           prodl	equ	0xFF3
  2350                           postinc0	equ	0xFEE
  2351                           wreg	equ	0xFE8
  2352                           indf1	equ	0xFE7
  2353                           postinc1	equ	0xFE6
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           indf2	equ	0xFDF
  2357                           postinc2	equ	0xFDE
  2358                           fsr2h	equ	0xFDA
  2359                           fsr2l	equ	0xFD9
  2360                           status	equ	0xFD8
  2361                           
  2362 ;; *************** function _veer_left *****************
  2363 ;; Defined at:
  2364 ;;		line 174 in file "dc_motor_funct.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  mL              2   44[COMRAM] PTR struct DC_motor
  2367 ;;		 -> main@motorL(9), 
  2368 ;;  mR              2   46[COMRAM] PTR struct DC_motor
  2369 ;;		 -> main@motorR(9), 
  2370 ;;  direction       1   48[COMRAM] unsigned char 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2382 ;;      Params:         5       0       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          7       0       0       0
  2385 ;;      Totals:        12       0       0       0
  2386 ;;Total ram usage:       12 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    8
  2389 ;; This function calls:
  2390 ;;		_set_motor_pwm
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;;		_steer
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text3
  2398  0015F0                     __ptext3:
  2399                           	opt stack 0
  2400  0015F0                     _veer_left:
  2401                           	opt stack 22
  2402                           
  2403                           ;dc_motor_funct.c: 176:     mL->direction = direction;
  2404                           
  2405                           ;incstack = 0
  2406  0015F0  EE20 F001          	lfsr	2,1
  2407  0015F4  502D               	movf	veer_left@mL,w,c
  2408  0015F6  26D9               	addwf	fsr2l,f,c
  2409  0015F8  502E               	movf	veer_left@mL+1,w,c
  2410  0015FA  22DA               	addwfc	fsr2h,f,c
  2411  0015FC  C031  FFDF         	movff	veer_left@direction,indf2
  2412                           
  2413                           ;dc_motor_funct.c: 177:     mR->direction = direction;
  2414  001600  EE20 F001          	lfsr	2,1
  2415  001604  502F               	movf	veer_left@mR,w,c
  2416  001606  26D9               	addwf	fsr2l,f,c
  2417  001608  5030               	movf	veer_left@mR+1,w,c
  2418  00160A  22DA               	addwfc	fsr2h,f,c
  2419  00160C  C031  FFDF         	movff	veer_left@direction,indf2
  2420                           
  2421                           ;dc_motor_funct.c: 179:     mL->power = mR->power;
  2422  001610  C02F  FFD9         	movff	veer_left@mR,fsr2l
  2423  001614  C030  FFDA         	movff	veer_left@mR+1,fsr2h
  2424  001618  C02D  FFE1         	movff	veer_left@mL,fsr1l
  2425  00161C  C02E  FFE2         	movff	veer_left@mL+1,fsr1h
  2426  001620  CFDF FFE7          	movff	indf2,indf1
  2427                           
  2428                           ;dc_motor_funct.c: 181:     mL->power = 90;
  2429  001624  C02D  FFD9         	movff	veer_left@mL,fsr2l
  2430  001628  C02E  FFDA         	movff	veer_left@mL+1,fsr2h
  2431  00162C  0E5A               	movlw	90
  2432  00162E  6EDF               	movwf	indf2,c
  2433                           
  2434                           ;dc_motor_funct.c: 182:     mR->power = 90;
  2435  001630  C02F  FFD9         	movff	veer_left@mR,fsr2l
  2436  001634  C030  FFDA         	movff	veer_left@mR+1,fsr2h
  2437  001638  0E5A               	movlw	90
  2438  00163A  6EDF               	movwf	indf2,c
  2439  00163C  D019               	goto	l196
  2440  00163E                     
  2441                           ;dc_motor_funct.c: 186:         set_motor_pwm(mL);
  2442  00163E  C02D  F024         	movff	veer_left@mL,set_motor_pwm@m
  2443  001642  C02E  F025         	movff	veer_left@mL+1,set_motor_pwm@m+1
  2444  001646  EC39  F007         	call	_set_motor_pwm	;wreg free
  2445                           
  2446                           ;dc_motor_funct.c: 187:         set_motor_pwm(mR);
  2447  00164A  C02F  F024         	movff	veer_left@mR,set_motor_pwm@m
  2448  00164E  C030  F025         	movff	veer_left@mR+1,set_motor_pwm@m+1
  2449  001652  EC39  F007         	call	_set_motor_pwm	;wreg free
  2450                           
  2451                           ;dc_motor_funct.c: 188:         _delay((unsigned long)((2)*(8000000/4000.0)));
  2452  001656  0E06               	movlw	6
  2453  001658  6E32               	movwf	??_veer_left& (0+255),c
  2454  00165A  0E30               	movlw	48
  2455  00165C                     u3117:
  2456  00165C  2EE8               	decfsz	wreg,f,c
  2457  00165E  D7FE               	bra	u3117
  2458  001660  2E32               	decfsz	??_veer_left& (0+255),f,c
  2459  001662  D7FC               	bra	u3117
  2460  001664  D000               	nop2	
  2461                           
  2462                           ;dc_motor_funct.c: 189:     }
  2463  001666  C02F  FFD9         	movff	veer_left@mR,fsr2l
  2464  00166A  C030  FFDA         	movff	veer_left@mR+1,fsr2h
  2465  00166E  06DF               	decf	indf2,f,c
  2466  001670                     l196:
  2467  001670  C02F  FFD9         	movff	veer_left@mR,fsr2l
  2468  001674  C030  FFDA         	movff	veer_left@mR+1,fsr2h
  2469  001678  50DF               	movf	indf2,w,c
  2470  00167A  6E32               	movwf	??_veer_left& (0+255),c
  2471  00167C  6A33               	clrf	(??_veer_left+1)& (0+255),c
  2472  00167E  0ED3               	movlw	211
  2473  001680  6E34               	movwf	(??_veer_left+2)& (0+255),c
  2474  001682  0EFF               	movlw	255
  2475  001684  6E35               	movwf	(??_veer_left+3)& (0+255),c
  2476  001686  C02D  FFD9         	movff	veer_left@mL,fsr2l
  2477  00168A  C02E  FFDA         	movff	veer_left@mL+1,fsr2h
  2478  00168E  50DF               	movf	indf2,w,c
  2479  001690  6E36               	movwf	(??_veer_left+4)& (0+255),c
  2480  001692  6A37               	clrf	(??_veer_left+5)& (0+255),c
  2481  001694  5034               	movf	??_veer_left+2,w,c
  2482  001696  2636               	addwf	??_veer_left+4,f,c
  2483  001698  5035               	movf	??_veer_left+3,w,c
  2484  00169A  2237               	addwfc	??_veer_left+5,f,c
  2485  00169C  5032               	movf	??_veer_left,w,c
  2486  00169E  5C36               	subwf	??_veer_left+4,w,c
  2487  0016A0  5037               	movf	??_veer_left+5,w,c
  2488  0016A2  0A80               	xorlw	128
  2489  0016A4  6E38               	movwf	(??_veer_left+6)& (0+255),c
  2490  0016A6  5033               	movf	??_veer_left+1,w,c
  2491  0016A8  0A80               	xorlw	128
  2492  0016AA  5838               	subwfb	(??_veer_left+6)& (0+255),w,c
  2493  0016AC  B0D8               	btfsc	status,0,c
  2494  0016AE  0012               	return	
  2495  0016B0  D7C6               	goto	l197
  2496  0016B2                     __end_of_veer_left:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           postinc0	equ	0xFEE
  2502                           wreg	equ	0xFE8
  2503                           indf1	equ	0xFE7
  2504                           postinc1	equ	0xFE6
  2505                           fsr1h	equ	0xFE2
  2506                           fsr1l	equ	0xFE1
  2507                           indf2	equ	0xFDF
  2508                           postinc2	equ	0xFDE
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _orientate *****************
  2514 ;; Defined at:
  2515 ;;		line 507 in file "functions.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  cont            2    2[BANK0 ] PTR struct Control
  2518 ;;		 -> main@cont(252), 
  2519 ;;  motorL          2    4[BANK0 ] PTR struct DC_motor
  2520 ;;		 -> main@motorL(9), 
  2521 ;;  motorR          2    6[BANK0 ] PTR struct DC_motor
  2522 ;;		 -> main@motorR(9), 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2534 ;;      Params:         0       6       0       0
  2535 ;;      Locals:         0       0       0       0
  2536 ;;      Temps:          0       4       0       0
  2537 ;;      Totals:         0      10       0       0
  2538 ;;Total ram usage:       10 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:   11
  2541 ;; This function calls:
  2542 ;;		_delay_s
  2543 ;;		_full_speed
  2544 ;;		_ir_display
  2545 ;;		_lcd_string
  2546 ;;		_set_line
  2547 ;;		_stop_all
  2548 ;;		_turn_left
  2549 ;;		_turn_right
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text4
  2556  000A66                     __ptext4:
  2557                           	opt stack 0
  2558  000A66                     _orientate:
  2559                           	opt stack 19
  2560                           
  2561                           ;functions.c: 510:     if ((cont ->ir_right == 0) & (cont ->ir_left == 0)) {
  2562                           
  2563                           ;incstack = 0
  2564  000A66  0100               	movlb	0	; () banked
  2565  000A68  EE20 F002          	lfsr	2,2
  2566  000A6C  5162               	movf	orientate@cont& (0+255),w,b
  2567  000A6E  26D9               	addwf	fsr2l,f,c
  2568  000A70  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2569  000A72  22DA               	addwfc	fsr2h,f,c
  2570  000A74  50DE               	movf	postinc2,w,c
  2571  000A76  10DE               	iorwf	postinc2,w,c
  2572  000A78  A4D8               	btfss	status,2,c
  2573  000A7A  D026               	goto	l384
  2574                           
  2575                           ; BSR set to: 0
  2576  000A7C  C062  FFD9         	movff	orientate@cont,fsr2l
  2577  000A80  C063  FFDA         	movff	orientate@cont+1,fsr2h
  2578  000A84  50DE               	movf	postinc2,w,c
  2579  000A86  10DE               	iorwf	postinc2,w,c
  2580  000A88  A4D8               	btfss	status,2,c
  2581  000A8A  D01E               	goto	l384
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;functions.c: 512:         lcd_string("2 IRs=0");
  2585  000A8C  0E21               	movlw	low STR_20
  2586  000A8E  6E1A               	movwf	lcd_string@string,c
  2587  000A90  0E03               	movlw	high STR_20
  2588  000A92  6E1B               	movwf	lcd_string@string+1,c
  2589  000A94  ECA3  F00D         	call	_lcd_string	;wreg free
  2590                           
  2591                           ;functions.c: 513:         turn_left(motorL, motorR);
  2592  000A98  C064  F032         	movff	orientate@motorL,turn_left@mL
  2593  000A9C  C065  F033         	movff	orientate@motorL+1,turn_left@mL+1
  2594  000AA0  C066  F034         	movff	orientate@motorR,turn_left@mR
  2595  000AA4  C067  F035         	movff	orientate@motorR+1,turn_left@mR+1
  2596  000AA8  EC3D  F00C         	call	_turn_left	;wreg free
  2597                           
  2598                           ;functions.c: 514:         delay_s(1);
  2599  000AAC  0E01               	movlw	1
  2600  000AAE  EC43  F00E         	call	_delay_s
  2601                           
  2602                           ;functions.c: 515:         stop_all(motorL, motorR);
  2603  000AB2  C064  F02D         	movff	orientate@motorL,stop_all@mL
  2604  000AB6  C065  F02E         	movff	orientate@motorL+1,stop_all@mL+1
  2605  000ABA  C066  F02F         	movff	orientate@motorR,stop_all@mR
  2606  000ABE  C067  F030         	movff	orientate@motorR+1,stop_all@mR+1
  2607  000AC2  EC3D  F00D         	call	_stop_all	;wreg free
  2608                           
  2609                           ;functions.c: 516:     } else if ((cont->ir_left == 0) | (cont->ir_right == 0)) {
  2610  000AC6  0012               	return	
  2611  000AC8                     l384:
  2612  000AC8  C062  FFD9         	movff	orientate@cont,fsr2l
  2613  000ACC  C063  FFDA         	movff	orientate@cont+1,fsr2h
  2614  000AD0  50DE               	movf	postinc2,w,c
  2615  000AD2  10DE               	iorwf	postinc2,w,c
  2616  000AD4  B4D8               	btfsc	status,2,c
  2617  000AD6  D00B               	goto	u2630
  2618  000AD8  0100               	movlb	0	; () banked
  2619  000ADA  EE20 F002          	lfsr	2,2
  2620  000ADE  5162               	movf	orientate@cont& (0+255),w,b
  2621  000AE0  26D9               	addwf	fsr2l,f,c
  2622  000AE2  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2623  000AE4  22DA               	addwfc	fsr2h,f,c
  2624  000AE6  50DE               	movf	postinc2,w,c
  2625  000AE8  10DE               	iorwf	postinc2,w,c
  2626  000AEA  A4D8               	btfss	status,2,c
  2627  000AEC  D04A               	goto	l386
  2628  000AEE                     u2630:
  2629                           
  2630                           ;functions.c: 517:         lcd_string("1 IR=0");
  2631                           
  2632                           ; BSR set to: 0
  2633  000AEE  0E29               	movlw	low STR_21
  2634  000AF0  6E1A               	movwf	lcd_string@string,c
  2635  000AF2  0E03               	movlw	high STR_21
  2636  000AF4  6E1B               	movwf	lcd_string@string+1,c
  2637  000AF6  ECA3  F00D         	call	_lcd_string	;wreg free
  2638                           
  2639                           ;functions.c: 519:         if ((cont->turn_direction) == 0) {
  2640  000AFA  0100               	movlb	0	; () banked
  2641  000AFC  EE20 F006          	lfsr	2,6
  2642  000B00  5162               	movf	orientate@cont& (0+255),w,b
  2643  000B02  26D9               	addwf	fsr2l,f,c
  2644  000B04  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2645  000B06  22DA               	addwfc	fsr2h,f,c
  2646  000B08  50DF               	movf	indf2,w,c
  2647  000B0A  A4D8               	btfss	status,2,c
  2648  000B0C  D01D               	goto	l389
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;functions.c: 520:             turn_left(motorL, motorR);
  2652  000B0E  C064  F032         	movff	orientate@motorL,turn_left@mL
  2653  000B12  C065  F033         	movff	orientate@motorL+1,turn_left@mL+1
  2654  000B16  C066  F034         	movff	orientate@motorR,turn_left@mR
  2655  000B1A  C067  F035         	movff	orientate@motorR+1,turn_left@mR+1
  2656  000B1E  EC3D  F00C         	call	_turn_left	;wreg free
  2657                           
  2658                           ;functions.c: 521:             _delay((unsigned long)((60)*(8000000/4000.0)));
  2659  000B22  0E9C               	movlw	156
  2660  000B24  0100               	movlb	0	; () banked
  2661  000B26  6F68               	movwf	??_orientate& (0+255),b
  2662  000B28  0ED7               	movlw	215
  2663  000B2A                     u3127:
  2664  000B2A  2EE8               	decfsz	wreg,f,c
  2665  000B2C  D7FE               	bra	u3127
  2666  000B2E  2F68               	decfsz	??_orientate& (0+255),f,b
  2667  000B30  D7FC               	bra	u3127
  2668                           
  2669                           ;functions.c: 522:             stop_all(motorL, motorR);
  2670  000B32  C064  F02D         	movff	orientate@motorL,stop_all@mL
  2671  000B36  C065  F02E         	movff	orientate@motorL+1,stop_all@mL+1
  2672  000B3A  C066  F02F         	movff	orientate@motorR,stop_all@mR
  2673  000B3E  C067  F030         	movff	orientate@motorR+1,stop_all@mR+1
  2674  000B42  EC3D  F00D         	call	_stop_all	;wreg free
  2675                           
  2676                           ;functions.c: 523:         } else {
  2677  000B46  0012               	return	
  2678  000B48                     l389:
  2679                           
  2680                           ;functions.c: 524:             turn_right(motorL, motorR);
  2681  000B48  C064  F032         	movff	orientate@motorL,turn_right@mL
  2682  000B4C  C065  F033         	movff	orientate@motorL+1,turn_right@mL+1
  2683  000B50  C066  F034         	movff	orientate@motorR,turn_right@mR
  2684  000B54  C067  F035         	movff	orientate@motorR+1,turn_right@mR+1
  2685  000B58  ECF7  F00B         	call	_turn_right	;wreg free
  2686                           
  2687                           ;functions.c: 525:             _delay((unsigned long)((60)*(8000000/4000.0)));
  2688  000B5C  0E9C               	movlw	156
  2689  000B5E  0100               	movlb	0	; () banked
  2690  000B60  6F68               	movwf	??_orientate& (0+255),b
  2691  000B62  0ED7               	movlw	215
  2692  000B64                     u3137:
  2693  000B64  2EE8               	decfsz	wreg,f,c
  2694  000B66  D7FE               	bra	u3137
  2695  000B68  2F68               	decfsz	??_orientate& (0+255),f,b
  2696  000B6A  D7FC               	bra	u3137
  2697                           
  2698                           ;functions.c: 526:             stop_all(motorL, motorR);
  2699  000B6C  C064  F02D         	movff	orientate@motorL,stop_all@mL
  2700  000B70  C065  F02E         	movff	orientate@motorL+1,stop_all@mL+1
  2701  000B74  C066  F02F         	movff	orientate@motorR,stop_all@mR
  2702  000B78  C067  F030         	movff	orientate@motorR+1,stop_all@mR+1
  2703  000B7C  EC3D  F00D         	call	_stop_all	;wreg free
  2704                           
  2705                           ;functions.c: 528:     } else if (((cont->ir_diff) < (cont->ir_threshold)) & ((cont->ir_
      +                          left) > (cont->ir_min)) & ((cont->ir_right) > (cont->ir_min))) {
  2706                           
  2707                           ;functions.c: 527:         }
  2708  000B80  0012               	return	
  2709  000B82                     l386:
  2710  000B82  0100               	movlb	0	; () banked
  2711  000B84  EE20 F007          	lfsr	2,7
  2712  000B88  5162               	movf	orientate@cont& (0+255),w,b
  2713  000B8A  26D9               	addwf	fsr2l,f,c
  2714  000B8C  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2715  000B8E  22DA               	addwfc	fsr2h,f,c
  2716  000B90  EE10 F004          	lfsr	1,4
  2717  000B94  5162               	movf	orientate@cont& (0+255),w,b
  2718  000B96  26E1               	addwf	fsr1l,f,c
  2719  000B98  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2720  000B9A  22E2               	addwfc	fsr1h,f,c
  2721  000B9C  50DE               	movf	postinc2,w,c
  2722  000B9E  5CE6               	subwf	postinc1,w,c
  2723  000BA0  50DE               	movf	postinc2,w,c
  2724  000BA2  58E6               	subwfb	postinc1,w,c
  2725  000BA4  B0D8               	btfsc	status,0,c
  2726  000BA6  D057               	goto	l392
  2727                           
  2728                           ; BSR set to: 0
  2729  000BA8  C062  FFD9         	movff	orientate@cont,fsr2l
  2730  000BAC  C063  FFDA         	movff	orientate@cont+1,fsr2h
  2731  000BB0  EE10 F00C          	lfsr	1,12
  2732  000BB4  5162               	movf	orientate@cont& (0+255),w,b
  2733  000BB6  26E1               	addwf	fsr1l,f,c
  2734  000BB8  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2735  000BBA  22E2               	addwfc	fsr1h,f,c
  2736  000BBC  50DE               	movf	postinc2,w,c
  2737  000BBE  5CE6               	subwf	postinc1,w,c
  2738  000BC0  50DE               	movf	postinc2,w,c
  2739  000BC2  58E6               	subwfb	postinc1,w,c
  2740  000BC4  B0D8               	btfsc	status,0,c
  2741  000BC6  D047               	goto	l392
  2742                           
  2743                           ; BSR set to: 0
  2744  000BC8  EE20 F002          	lfsr	2,2
  2745  000BCC  5162               	movf	orientate@cont& (0+255),w,b
  2746  000BCE  26D9               	addwf	fsr2l,f,c
  2747  000BD0  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2748  000BD2  22DA               	addwfc	fsr2h,f,c
  2749  000BD4  EE10 F00C          	lfsr	1,12
  2750  000BD8  5162               	movf	orientate@cont& (0+255),w,b
  2751  000BDA  26E1               	addwf	fsr1l,f,c
  2752  000BDC  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2753  000BDE  22E2               	addwfc	fsr1h,f,c
  2754  000BE0  50DE               	movf	postinc2,w,c
  2755  000BE2  5CE6               	subwf	postinc1,w,c
  2756  000BE4  50DE               	movf	postinc2,w,c
  2757  000BE6  58E6               	subwfb	postinc1,w,c
  2758  000BE8  B0D8               	btfsc	status,0,c
  2759  000BEA  D035               	goto	l392
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;functions.c: 531:         set_line(1);
  2763  000BEC  0E01               	movlw	1
  2764  000BEE  EC9E  F00E         	call	_set_line
  2765                           
  2766                           ;functions.c: 532:         ir_display(cont);
  2767  000BF2  C062  F060         	movff	orientate@cont,ir_display@cont
  2768  000BF6  C063  F061         	movff	orientate@cont+1,ir_display@cont+1
  2769  000BFA  ECAE  F00B         	call	_ir_display	;wreg free
  2770                           
  2771                           ;functions.c: 533:         full_speed(motorL, motorR, 0);
  2772  000BFE  C064  F02D         	movff	orientate@motorL,full_speed@mL
  2773  000C02  C065  F02E         	movff	orientate@motorL+1,full_speed@mL+1
  2774  000C06  C066  F02F         	movff	orientate@motorR,full_speed@mR
  2775  000C0A  C067  F030         	movff	orientate@motorR+1,full_speed@mR+1
  2776  000C0E  0E00               	movlw	0
  2777  000C10  6E31               	movwf	full_speed@direction,c
  2778  000C12  EC30  F00A         	call	_full_speed	;wreg free
  2779                           
  2780                           ;functions.c: 534:         set_line(2);
  2781  000C16  0E02               	movlw	2
  2782  000C18  EC9E  F00E         	call	_set_line
  2783                           
  2784                           ;functions.c: 535:         lcd_string("CTR");
  2785  000C1C  0E35               	movlw	low STR_22
  2786  000C1E  6E1A               	movwf	lcd_string@string,c
  2787  000C20  0E03               	movlw	high STR_22
  2788  000C22  6E1B               	movwf	lcd_string@string+1,c
  2789  000C24  ECA3  F00D         	call	_lcd_string	;wreg free
  2790                           
  2791                           ;functions.c: 536:         delay_s(5);
  2792  000C28  0E05               	movlw	5
  2793  000C2A  EC43  F00E         	call	_delay_s
  2794                           
  2795                           ;functions.c: 537:         stop_all(motorL, motorR);
  2796  000C2E  C064  F02D         	movff	orientate@motorL,stop_all@mL
  2797  000C32  C065  F02E         	movff	orientate@motorL+1,stop_all@mL+1
  2798  000C36  C066  F02F         	movff	orientate@motorR,stop_all@mR
  2799  000C3A  C067  F030         	movff	orientate@motorR+1,stop_all@mR+1
  2800  000C3E  EC3D  F00D         	call	_stop_all	;wreg free
  2801                           
  2802                           ;functions.c: 538:         cont->finding_direction = 0;
  2803  000C42  0100               	movlb	0	; () banked
  2804  000C44  EE20 F01F          	lfsr	2,31
  2805  000C48  5162               	movf	orientate@cont& (0+255),w,b
  2806  000C4A  26D9               	addwf	fsr2l,f,c
  2807  000C4C  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2808  000C4E  22DA               	addwfc	fsr2h,f,c
  2809  000C50  0E00               	movlw	0
  2810  000C52  6EDF               	movwf	indf2,c
  2811                           
  2812                           ;functions.c: 539:     } else {
  2813  000C54  0012               	return	
  2814  000C56                     l392:
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;functions.c: 542:         if (cont->turn_direction == 0) {
  2818                           
  2819                           ; BSR set to: 0
  2820  000C56  EE20 F006          	lfsr	2,6
  2821  000C5A  5162               	movf	orientate@cont& (0+255),w,b
  2822  000C5C  26D9               	addwf	fsr2l,f,c
  2823  000C5E  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2824  000C60  22DA               	addwfc	fsr2h,f,c
  2825  000C62  50DF               	movf	indf2,w,c
  2826  000C64  A4D8               	btfss	status,2,c
  2827  000C66  D023               	goto	l394
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;functions.c: 543:             lcd_string("L");
  2831  000C68  0E3F               	movlw	low (STR_11+2)
  2832  000C6A  6E1A               	movwf	lcd_string@string,c
  2833  000C6C  0E03               	movlw	high (STR_11+2)
  2834  000C6E  6E1B               	movwf	lcd_string@string+1,c
  2835  000C70  ECA3  F00D         	call	_lcd_string	;wreg free
  2836                           
  2837                           ;functions.c: 545:             turn_left(motorL, motorR);
  2838  000C74  C064  F032         	movff	orientate@motorL,turn_left@mL
  2839  000C78  C065  F033         	movff	orientate@motorL+1,turn_left@mL+1
  2840  000C7C  C066  F034         	movff	orientate@motorR,turn_left@mR
  2841  000C80  C067  F035         	movff	orientate@motorR+1,turn_left@mR+1
  2842  000C84  EC3D  F00C         	call	_turn_left	;wreg free
  2843                           
  2844                           ;functions.c: 546:             _delay((unsigned long)((25)*(8000000/4000.0)));
  2845  000C88  0E41               	movlw	65
  2846  000C8A  0100               	movlb	0	; () banked
  2847  000C8C  6F68               	movwf	??_orientate& (0+255),b
  2848  000C8E  0EEE               	movlw	238
  2849  000C90                     u3147:
  2850  000C90  2EE8               	decfsz	wreg,f,c
  2851  000C92  D7FE               	bra	u3147
  2852  000C94  2F68               	decfsz	??_orientate& (0+255),f,b
  2853  000C96  D7FC               	bra	u3147
  2854  000C98  F000               	nop	
  2855                           
  2856                           ;functions.c: 547:             stop_all(motorL, motorR);
  2857  000C9A  C064  F02D         	movff	orientate@motorL,stop_all@mL
  2858  000C9E  C065  F02E         	movff	orientate@motorL+1,stop_all@mL+1
  2859  000CA2  C066  F02F         	movff	orientate@motorR,stop_all@mR
  2860  000CA6  C067  F030         	movff	orientate@motorR+1,stop_all@mR+1
  2861  000CAA  EC3D  F00D         	call	_stop_all	;wreg free
  2862  000CAE                     l394:
  2863                           
  2864                           ;functions.c: 549:         if (cont->turn_direction == 1) {
  2865  000CAE  0100               	movlb	0	; () banked
  2866  000CB0  EE20 F006          	lfsr	2,6
  2867  000CB4  5162               	movf	orientate@cont& (0+255),w,b
  2868  000CB6  26D9               	addwf	fsr2l,f,c
  2869  000CB8  5163               	movf	(orientate@cont+1)& (0+255),w,b
  2870  000CBA  22DA               	addwfc	fsr2h,f,c
  2871  000CBC  04DE               	decf	postinc2,w,c
  2872  000CBE  A4D8               	btfss	status,2,c
  2873  000CC0  0012               	return	
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;functions.c: 550:             lcd_string("R");
  2877  000CC2  0E4E               	movlw	low (STR_2+1)
  2878  000CC4  6E1A               	movwf	lcd_string@string,c
  2879  000CC6  0E03               	movlw	high (STR_2+1)
  2880  000CC8  6E1B               	movwf	lcd_string@string+1,c
  2881  000CCA  ECA3  F00D         	call	_lcd_string	;wreg free
  2882                           
  2883                           ;functions.c: 552:             turn_right(motorL, motorR);
  2884  000CCE  C064  F032         	movff	orientate@motorL,turn_right@mL
  2885  000CD2  C065  F033         	movff	orientate@motorL+1,turn_right@mL+1
  2886  000CD6  C066  F034         	movff	orientate@motorR,turn_right@mR
  2887  000CDA  C067  F035         	movff	orientate@motorR+1,turn_right@mR+1
  2888  000CDE  ECF7  F00B         	call	_turn_right	;wreg free
  2889                           
  2890                           ;functions.c: 553:             _delay((unsigned long)((25)*(8000000/4000.0)));
  2891  000CE2  0E41               	movlw	65
  2892  000CE4  0100               	movlb	0	; () banked
  2893  000CE6  6F68               	movwf	??_orientate& (0+255),b
  2894  000CE8  0EEE               	movlw	238
  2895  000CEA                     u3157:
  2896  000CEA  2EE8               	decfsz	wreg,f,c
  2897  000CEC  D7FE               	bra	u3157
  2898  000CEE  2F68               	decfsz	??_orientate& (0+255),f,b
  2899  000CF0  D7FC               	bra	u3157
  2900  000CF2  F000               	nop	
  2901                           
  2902                           ;functions.c: 554:             stop_all(motorL, motorR);
  2903  000CF4  C064  F02D         	movff	orientate@motorL,stop_all@mL
  2904  000CF8  C065  F02E         	movff	orientate@motorL+1,stop_all@mL+1
  2905  000CFC  C066  F02F         	movff	orientate@motorR,stop_all@mR
  2906  000D00  C067  F030         	movff	orientate@motorR+1,stop_all@mR+1
  2907  000D04  EC3D  F00D         	call	_stop_all	;wreg free
  2908                           
  2909                           ;functions.c: 556:     }
  2910                           
  2911                           ;functions.c: 555:         }
  2912  000D08  0012               	return	
  2913  000D0A                     __end_of_orientate:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           indf1	equ	0xFE7
  2921                           postinc1	equ	0xFE6
  2922                           fsr1h	equ	0xFE2
  2923                           fsr1l	equ	0xFE1
  2924                           indf2	equ	0xFDF
  2925                           postinc2	equ	0xFDE
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _turn_right *****************
  2931 ;; Defined at:
  2932 ;;		line 322 in file "dc_motor_funct.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  mL              2   49[COMRAM] PTR struct DC_motor
  2935 ;;		 -> main@motorL(9), 
  2936 ;;  mR              2   51[COMRAM] PTR struct DC_motor
  2937 ;;		 -> main@motorR(9), 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2949 ;;      Params:         4       0       0       0
  2950 ;;      Locals:         0       0       0       0
  2951 ;;      Temps:          1       0       0       0
  2952 ;;      Totals:         5       0       0       0
  2953 ;;Total ram usage:        5 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    9
  2956 ;; This function calls:
  2957 ;;		_set_motor_pwm
  2958 ;;		_stop_all
  2959 ;; This function is called by:
  2960 ;;		_orientate
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text5
  2965  0017EE                     __ptext5:
  2966                           	opt stack 0
  2967  0017EE                     _turn_right:
  2968                           	opt stack 20
  2969                           
  2970                           ;dc_motor_funct.c: 323:     stop_all(mL, mR);
  2971                           
  2972                           ;incstack = 0
  2973  0017EE  C032  F02D         	movff	turn_right@mL,stop_all@mL
  2974  0017F2  C033  F02E         	movff	turn_right@mL+1,stop_all@mL+1
  2975  0017F6  C034  F02F         	movff	turn_right@mR,stop_all@mR
  2976  0017FA  C035  F030         	movff	turn_right@mR+1,stop_all@mR+1
  2977  0017FE  EC3D  F00D         	call	_stop_all	;wreg free
  2978                           
  2979                           ;dc_motor_funct.c: 324:     mL->direction = 1;
  2980  001802  EE20 F001          	lfsr	2,1
  2981  001806  5032               	movf	turn_right@mL,w,c
  2982  001808  26D9               	addwf	fsr2l,f,c
  2983  00180A  5033               	movf	turn_right@mL+1,w,c
  2984  00180C  22DA               	addwfc	fsr2h,f,c
  2985  00180E  0E01               	movlw	1
  2986  001810  6EDF               	movwf	indf2,c
  2987                           
  2988                           ;dc_motor_funct.c: 325:     mR->direction = 0;
  2989  001812  EE20 F001          	lfsr	2,1
  2990  001816  5034               	movf	turn_right@mR,w,c
  2991  001818  26D9               	addwf	fsr2l,f,c
  2992  00181A  5035               	movf	turn_right@mR+1,w,c
  2993  00181C  22DA               	addwfc	fsr2h,f,c
  2994  00181E  0E00               	movlw	0
  2995  001820  6EDF               	movwf	indf2,c
  2996  001822  D023               	goto	l220
  2997  001824                     
  2998                           ;dc_motor_funct.c: 328:         mR->power = mL->power;
  2999  001824  C032  FFD9         	movff	turn_right@mL,fsr2l
  3000  001828  C033  FFDA         	movff	turn_right@mL+1,fsr2h
  3001  00182C  C034  FFE1         	movff	turn_right@mR,fsr1l
  3002  001830  C035  FFE2         	movff	turn_right@mR+1,fsr1h
  3003  001834  CFDF FFE7          	movff	indf2,indf1
  3004                           
  3005                           ;dc_motor_funct.c: 329:         set_motor_pwm(mL);
  3006  001838  C032  F024         	movff	turn_right@mL,set_motor_pwm@m
  3007  00183C  C033  F025         	movff	turn_right@mL+1,set_motor_pwm@m+1
  3008  001840  EC39  F007         	call	_set_motor_pwm	;wreg free
  3009                           
  3010                           ;dc_motor_funct.c: 330:         set_motor_pwm(mR);
  3011  001844  C034  F024         	movff	turn_right@mR,set_motor_pwm@m
  3012  001848  C035  F025         	movff	turn_right@mR+1,set_motor_pwm@m+1
  3013  00184C  EC39  F007         	call	_set_motor_pwm	;wreg free
  3014                           
  3015                           ;dc_motor_funct.c: 331:         _delay((unsigned long)((2)*(8000000/4000.0)));
  3016  001850  0E06               	movlw	6
  3017  001852  6E36               	movwf	??_turn_right& (0+255),c
  3018  001854  0E30               	movlw	48
  3019  001856                     u3167:
  3020  001856  2EE8               	decfsz	wreg,f,c
  3021  001858  D7FE               	bra	u3167
  3022  00185A  2E36               	decfsz	??_turn_right& (0+255),f,c
  3023  00185C  D7FC               	bra	u3167
  3024  00185E  D000               	nop2	
  3025                           
  3026                           ;dc_motor_funct.c: 332:     }
  3027  001860  C032  FFD9         	movff	turn_right@mL,fsr2l
  3028  001864  C033  FFDA         	movff	turn_right@mL+1,fsr2h
  3029  001868  2ADF               	incf	indf2,f,c
  3030  00186A                     l220:
  3031  00186A  C032  FFD9         	movff	turn_right@mL,fsr2l
  3032  00186E  C033  FFDA         	movff	turn_right@mL+1,fsr2h
  3033  001872  0E45               	movlw	69
  3034  001874  64DF               	cpfsgt	indf2,c
  3035  001876  D7D6               	goto	l221
  3036  001878  0012               	return	
  3037  00187A                     __end_of_turn_right:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           prodh	equ	0xFF4
  3041                           prodl	equ	0xFF3
  3042                           postinc0	equ	0xFEE
  3043                           wreg	equ	0xFE8
  3044                           indf1	equ	0xFE7
  3045                           postinc1	equ	0xFE6
  3046                           fsr1h	equ	0xFE2
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           postinc2	equ	0xFDE
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _turn_left *****************
  3055 ;; Defined at:
  3056 ;;		line 287 in file "dc_motor_funct.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  mL              2   49[COMRAM] PTR struct DC_motor
  3059 ;;		 -> main@motorL(9), 
  3060 ;;  mR              2   51[COMRAM] PTR struct DC_motor
  3061 ;;		 -> main@motorR(9), 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3073 ;;      Params:         4       0       0       0
  3074 ;;      Locals:         0       0       0       0
  3075 ;;      Temps:          1       0       0       0
  3076 ;;      Totals:         5       0       0       0
  3077 ;;Total ram usage:        5 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    9
  3080 ;; This function calls:
  3081 ;;		_set_motor_pwm
  3082 ;;		_stop_all
  3083 ;; This function is called by:
  3084 ;;		_orientate
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text6
  3089  00187A                     __ptext6:
  3090                           	opt stack 0
  3091  00187A                     _turn_left:
  3092                           	opt stack 20
  3093                           
  3094                           ;dc_motor_funct.c: 288:     stop_all(mL, mR);
  3095                           
  3096                           ;incstack = 0
  3097  00187A  C032  F02D         	movff	turn_left@mL,stop_all@mL
  3098  00187E  C033  F02E         	movff	turn_left@mL+1,stop_all@mL+1
  3099  001882  C034  F02F         	movff	turn_left@mR,stop_all@mR
  3100  001886  C035  F030         	movff	turn_left@mR+1,stop_all@mR+1
  3101  00188A  EC3D  F00D         	call	_stop_all	;wreg free
  3102                           
  3103                           ;dc_motor_funct.c: 289:     mL->direction = 0;
  3104  00188E  EE20 F001          	lfsr	2,1
  3105  001892  5032               	movf	turn_left@mL,w,c
  3106  001894  26D9               	addwf	fsr2l,f,c
  3107  001896  5033               	movf	turn_left@mL+1,w,c
  3108  001898  22DA               	addwfc	fsr2h,f,c
  3109  00189A  0E00               	movlw	0
  3110  00189C  6EDF               	movwf	indf2,c
  3111                           
  3112                           ;dc_motor_funct.c: 290:     mR->direction = 1;
  3113  00189E  EE20 F001          	lfsr	2,1
  3114  0018A2  5034               	movf	turn_left@mR,w,c
  3115  0018A4  26D9               	addwf	fsr2l,f,c
  3116  0018A6  5035               	movf	turn_left@mR+1,w,c
  3117  0018A8  22DA               	addwfc	fsr2h,f,c
  3118  0018AA  0E01               	movlw	1
  3119  0018AC  6EDF               	movwf	indf2,c
  3120  0018AE  D023               	goto	l214
  3121  0018B0                     
  3122                           ;dc_motor_funct.c: 293:         mR->power = mL->power;
  3123  0018B0  C032  FFD9         	movff	turn_left@mL,fsr2l
  3124  0018B4  C033  FFDA         	movff	turn_left@mL+1,fsr2h
  3125  0018B8  C034  FFE1         	movff	turn_left@mR,fsr1l
  3126  0018BC  C035  FFE2         	movff	turn_left@mR+1,fsr1h
  3127  0018C0  CFDF FFE7          	movff	indf2,indf1
  3128                           
  3129                           ;dc_motor_funct.c: 294:         set_motor_pwm(mL);
  3130  0018C4  C032  F024         	movff	turn_left@mL,set_motor_pwm@m
  3131  0018C8  C033  F025         	movff	turn_left@mL+1,set_motor_pwm@m+1
  3132  0018CC  EC39  F007         	call	_set_motor_pwm	;wreg free
  3133                           
  3134                           ;dc_motor_funct.c: 295:         set_motor_pwm(mR);
  3135  0018D0  C034  F024         	movff	turn_left@mR,set_motor_pwm@m
  3136  0018D4  C035  F025         	movff	turn_left@mR+1,set_motor_pwm@m+1
  3137  0018D8  EC39  F007         	call	_set_motor_pwm	;wreg free
  3138                           
  3139                           ;dc_motor_funct.c: 296:         _delay((unsigned long)((2)*(8000000/4000.0)));
  3140  0018DC  0E06               	movlw	6
  3141  0018DE  6E36               	movwf	??_turn_left& (0+255),c
  3142  0018E0  0E30               	movlw	48
  3143  0018E2                     u3177:
  3144  0018E2  2EE8               	decfsz	wreg,f,c
  3145  0018E4  D7FE               	bra	u3177
  3146  0018E6  2E36               	decfsz	??_turn_left& (0+255),f,c
  3147  0018E8  D7FC               	bra	u3177
  3148  0018EA  D000               	nop2	
  3149                           
  3150                           ;dc_motor_funct.c: 297:     }
  3151  0018EC  C032  FFD9         	movff	turn_left@mL,fsr2l
  3152  0018F0  C033  FFDA         	movff	turn_left@mL+1,fsr2h
  3153  0018F4  2ADF               	incf	indf2,f,c
  3154  0018F6                     l214:
  3155  0018F6  C032  FFD9         	movff	turn_left@mL,fsr2l
  3156  0018FA  C033  FFDA         	movff	turn_left@mL+1,fsr2h
  3157  0018FE  0E45               	movlw	69
  3158  001900  64DF               	cpfsgt	indf2,c
  3159  001902  D7D6               	goto	l215
  3160  001904  0012               	return	
  3161  001906                     __end_of_turn_left:
  3162                           	opt stack 0
  3163                           tblptru	equ	0xFF8
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           indf1	equ	0xFE7
  3169                           postinc1	equ	0xFE6
  3170                           fsr1h	equ	0xFE2
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _stop_all *****************
  3179 ;; Defined at:
  3180 ;;		line 252 in file "dc_motor_funct.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  mL              2   44[COMRAM] PTR struct DC_motor
  3183 ;;		 -> main@motorL(9), 
  3184 ;;  mR              2   46[COMRAM] PTR struct DC_motor
  3185 ;;		 -> main@motorR(9), 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3197 ;;      Params:         4       0       0       0
  3198 ;;      Locals:         0       0       0       0
  3199 ;;      Temps:          1       0       0       0
  3200 ;;      Totals:         5       0       0       0
  3201 ;;Total ram usage:        5 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    8
  3204 ;; This function calls:
  3205 ;;		_set_motor_pwm
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;;		_turn_left
  3209 ;;		_turn_right
  3210 ;;		_orientate
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text7
  3215  001A7A                     __ptext7:
  3216                           	opt stack 0
  3217  001A7A                     _stop_all:
  3218                           	opt stack 22
  3219                           
  3220                           ;dc_motor_funct.c: 254:     mL->power = mR->power;
  3221                           
  3222                           ;incstack = 0
  3223  001A7A  C02F  FFD9         	movff	stop_all@mR,fsr2l
  3224  001A7E  C030  FFDA         	movff	stop_all@mR+1,fsr2h
  3225  001A82  C02D  FFE1         	movff	stop_all@mL,fsr1l
  3226  001A86  C02E  FFE2         	movff	stop_all@mL+1,fsr1h
  3227  001A8A  CFDF FFE7          	movff	indf2,indf1
  3228  001A8E  D023               	goto	l208
  3229  001A90                     
  3230                           ;dc_motor_funct.c: 258:         mL->power = mR->power;
  3231  001A90  C02F  FFD9         	movff	stop_all@mR,fsr2l
  3232  001A94  C030  FFDA         	movff	stop_all@mR+1,fsr2h
  3233  001A98  C02D  FFE1         	movff	stop_all@mL,fsr1l
  3234  001A9C  C02E  FFE2         	movff	stop_all@mL+1,fsr1h
  3235  001AA0  CFDF FFE7          	movff	indf2,indf1
  3236                           
  3237                           ;dc_motor_funct.c: 259:         set_motor_pwm(mL);
  3238  001AA4  C02D  F024         	movff	stop_all@mL,set_motor_pwm@m
  3239  001AA8  C02E  F025         	movff	stop_all@mL+1,set_motor_pwm@m+1
  3240  001AAC  EC39  F007         	call	_set_motor_pwm	;wreg free
  3241                           
  3242                           ;dc_motor_funct.c: 260:         set_motor_pwm(mR);
  3243  001AB0  C02F  F024         	movff	stop_all@mR,set_motor_pwm@m
  3244  001AB4  C030  F025         	movff	stop_all@mR+1,set_motor_pwm@m+1
  3245  001AB8  EC39  F007         	call	_set_motor_pwm	;wreg free
  3246                           
  3247                           ;dc_motor_funct.c: 261:         _delay((unsigned long)((2)*(8000000/4000.0)));
  3248  001ABC  0E06               	movlw	6
  3249  001ABE  6E31               	movwf	??_stop_all& (0+255),c
  3250  001AC0  0E30               	movlw	48
  3251  001AC2                     u3187:
  3252  001AC2  2EE8               	decfsz	wreg,f,c
  3253  001AC4  D7FE               	bra	u3187
  3254  001AC6  2E31               	decfsz	??_stop_all& (0+255),f,c
  3255  001AC8  D7FC               	bra	u3187
  3256  001ACA  D000               	nop2	
  3257                           
  3258                           ;dc_motor_funct.c: 262:     }
  3259  001ACC  C02F  FFD9         	movff	stop_all@mR,fsr2l
  3260  001AD0  C030  FFDA         	movff	stop_all@mR+1,fsr2h
  3261  001AD4  06DF               	decf	indf2,f,c
  3262  001AD6                     l208:
  3263  001AD6  C02F  FFD9         	movff	stop_all@mR,fsr2l
  3264  001ADA  C030  FFDA         	movff	stop_all@mR+1,fsr2h
  3265  001ADE  50DF               	movf	indf2,w,c
  3266  001AE0  B4D8               	btfsc	status,2,c
  3267  001AE2  0012               	return	
  3268  001AE4  D7D5               	goto	l209
  3269  001AE6                     __end_of_stop_all:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           prodh	equ	0xFF4
  3273                           prodl	equ	0xFF3
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           indf1	equ	0xFE7
  3277                           postinc1	equ	0xFE6
  3278                           fsr1h	equ	0xFE2
  3279                           fsr1l	equ	0xFE1
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _set_line *****************
  3287 ;; Defined at:
  3288 ;;		line 200 in file "lcd_funct.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  line            1    wreg     unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  line            1   25[COMRAM] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3302 ;;      Params:         0       0       0       0
  3303 ;;      Locals:         1       0       0       0
  3304 ;;      Temps:          0       0       0       0
  3305 ;;      Totals:         1       0       0       0
  3306 ;;Total ram usage:        1 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    9
  3309 ;; This function calls:
  3310 ;;		_send_lcd
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;;		_orientate
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text8
  3318  001D3C                     __ptext8:
  3319                           	opt stack 0
  3320  001D3C                     _set_line:
  3321                           	opt stack 21
  3322                           
  3323                           ;incstack = 0
  3324                           ;set_line@line stored from wreg
  3325  001D3C  6E1A               	movwf	set_line@line,c
  3326                           
  3327                           ;lcd_funct.c: 203:     if (line == 1) {
  3328  001D3E  041A               	decf	set_line@line,w,c
  3329  001D40  A4D8               	btfss	status,2,c
  3330  001D42  D006               	goto	l441
  3331                           
  3332                           ;lcd_funct.c: 204:         send_lcd(128, 0);
  3333  001D44  0E00               	movlw	0
  3334  001D46  6E18               	movwf	send_lcd@type,c
  3335  001D48  0E80               	movlw	128
  3336  001D4A  ECE1  F00E         	call	_send_lcd
  3337                           
  3338                           ;lcd_funct.c: 205:     } else if (line == 2) {
  3339  001D4E  D009               	goto	l443
  3340  001D50                     l441:
  3341  001D50  0E02               	movlw	2
  3342  001D52  181A               	xorwf	set_line@line,w,c
  3343  001D54  A4D8               	btfss	status,2,c
  3344  001D56  D005               	goto	l443
  3345                           
  3346                           ;lcd_funct.c: 206:         send_lcd(192, 0);
  3347  001D58  0E00               	movlw	0
  3348  001D5A  6E18               	movwf	send_lcd@type,c
  3349  001D5C  0EC0               	movlw	192
  3350  001D5E  ECE1  F00E         	call	_send_lcd
  3351  001D62                     l443:
  3352                           
  3353                           ;lcd_funct.c: 208:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3354  001D62  0E21               	movlw	33
  3355  001D64                     u3197:
  3356  001D64  2EE8               	decfsz	wreg,f,c
  3357  001D66  D7FE               	bra	u3197
  3358  001D68  F000               	nop	
  3359  001D6A  0012               	return		;funcret
  3360  001D6C                     __end_of_set_line:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           indf1	equ	0xFE7
  3368                           postinc1	equ	0xFE6
  3369                           fsr1h	equ	0xFE2
  3370                           fsr1l	equ	0xFE1
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _ir_display *****************
  3378 ;; Defined at:
  3379 ;;		line 451 in file "functions.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  cont            2    0[BANK0 ] PTR struct Control
  3382 ;;		 -> main@cont(252), 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3394 ;;      Params:         0       2       0       0
  3395 ;;      Locals:         0       0       0       0
  3396 ;;      Temps:          0       0       0       0
  3397 ;;      Totals:         0       2       0       0
  3398 ;;Total ram usage:        2 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:   10
  3401 ;; This function calls:
  3402 ;;		_itoa_5
  3403 ;;		_lcd_string
  3404 ;; This function is called by:
  3405 ;;		_main
  3406 ;;		_orientate
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text9
  3411  00175C                     __ptext9:
  3412                           	opt stack 0
  3413  00175C                     _ir_display:
  3414                           	opt stack 19
  3415                           
  3416                           ;functions.c: 454:     lcd_string("L");
  3417                           
  3418                           ;incstack = 0
  3419  00175C  0E3F               	movlw	low (STR_11+2)
  3420  00175E  6E1A               	movwf	lcd_string@string,c
  3421  001760  0E03               	movlw	high (STR_11+2)
  3422  001762  6E1B               	movwf	lcd_string@string+1,c
  3423  001764  ECA3  F00D         	call	_lcd_string	;wreg free
  3424                           
  3425                           ;functions.c: 455:     itoa_5(cont->ir_left, cont ->ir_buf);
  3426  001768  C060  FFD9         	movff	ir_display@cont,fsr2l
  3427  00176C  C061  FFDA         	movff	ir_display@cont+1,fsr2h
  3428  001770  CFDE F02D          	movff	postinc2,itoa_5@number
  3429  001774  CFDD F02E          	movff	postdec2,itoa_5@number+1
  3430  001778  0E0E               	movlw	14
  3431  00177A  0100               	movlb	0	; () banked
  3432  00177C  2560               	addwf	ir_display@cont& (0+255),w,b
  3433  00177E  6E2F               	movwf	itoa_5@buffer,c
  3434  001780  0E00               	movlw	0
  3435  001782  2161               	addwfc	(ir_display@cont+1)& (0+255),w,b
  3436  001784  6E30               	movwf	itoa_5@buffer+1,c
  3437  001786  ECC4  F009         	call	_itoa_5	;wreg free
  3438                           
  3439                           ;functions.c: 456:     lcd_string(cont->ir_buf);
  3440  00178A  0E0E               	movlw	14
  3441  00178C  0100               	movlb	0	; () banked
  3442  00178E  2560               	addwf	ir_display@cont& (0+255),w,b
  3443  001790  6E1A               	movwf	lcd_string@string,c
  3444  001792  0E00               	movlw	0
  3445  001794  2161               	addwfc	(ir_display@cont+1)& (0+255),w,b
  3446  001796  6E1B               	movwf	lcd_string@string+1,c
  3447  001798  ECA3  F00D         	call	_lcd_string	;wreg free
  3448                           
  3449                           ;functions.c: 458:     lcd_string("|");
  3450  00179C  0E47               	movlw	low (STR_7+2)
  3451  00179E  6E1A               	movwf	lcd_string@string,c
  3452  0017A0  0E03               	movlw	high (STR_7+2)
  3453  0017A2  6E1B               	movwf	lcd_string@string+1,c
  3454  0017A4  ECA3  F00D         	call	_lcd_string	;wreg free
  3455                           
  3456                           ;functions.c: 461:     lcd_string("R");
  3457  0017A8  0E4E               	movlw	low (STR_2+1)
  3458  0017AA  6E1A               	movwf	lcd_string@string,c
  3459  0017AC  0E03               	movlw	high (STR_2+1)
  3460  0017AE  6E1B               	movwf	lcd_string@string+1,c
  3461  0017B0  ECA3  F00D         	call	_lcd_string	;wreg free
  3462                           
  3463                           ;functions.c: 462:     itoa_5(cont->ir_right, cont->ir_buf);
  3464  0017B4  0100               	movlb	0	; () banked
  3465  0017B6  EE20 F002          	lfsr	2,2
  3466  0017BA  5160               	movf	ir_display@cont& (0+255),w,b
  3467  0017BC  26D9               	addwf	fsr2l,f,c
  3468  0017BE  5161               	movf	(ir_display@cont+1)& (0+255),w,b
  3469  0017C0  22DA               	addwfc	fsr2h,f,c
  3470  0017C2  CFDE F02D          	movff	postinc2,itoa_5@number
  3471  0017C6  CFDD F02E          	movff	postdec2,itoa_5@number+1
  3472  0017CA  0E0E               	movlw	14
  3473  0017CC  2560               	addwf	ir_display@cont& (0+255),w,b
  3474  0017CE  6E2F               	movwf	itoa_5@buffer,c
  3475  0017D0  0E00               	movlw	0
  3476  0017D2  2161               	addwfc	(ir_display@cont+1)& (0+255),w,b
  3477  0017D4  6E30               	movwf	itoa_5@buffer+1,c
  3478  0017D6  ECC4  F009         	call	_itoa_5	;wreg free
  3479                           
  3480                           ;functions.c: 463:     lcd_string(cont->ir_buf);
  3481  0017DA  0E0E               	movlw	14
  3482  0017DC  0100               	movlb	0	; () banked
  3483  0017DE  2560               	addwf	ir_display@cont& (0+255),w,b
  3484  0017E0  6E1A               	movwf	lcd_string@string,c
  3485  0017E2  0E00               	movlw	0
  3486  0017E4  2161               	addwfc	(ir_display@cont+1)& (0+255),w,b
  3487  0017E6  6E1B               	movwf	lcd_string@string+1,c
  3488  0017E8  ECA3  F00D         	call	_lcd_string	;wreg free
  3489  0017EC  0012               	return		;funcret
  3490  0017EE                     __end_of_ir_display:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           indf1	equ	0xFE7
  3498                           postinc1	equ	0xFE6
  3499                           fsr1h	equ	0xFE2
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           postinc2	equ	0xFDE
  3503                           postdec2	equ	0xFDD
  3504                           fsr2h	equ	0xFDA
  3505                           fsr2l	equ	0xFD9
  3506                           status	equ	0xFD8
  3507                           
  3508 ;; *************** function _lcd_string *****************
  3509 ;; Defined at:
  3510 ;;		line 224 in file "lcd_funct.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  string          2   25[COMRAM] PTR unsigned char 
  3513 ;;		 -> STR_27(4), STR_26(4), STR_25(4), STR_24(2), 
  3514 ;;		 -> STR_23(2), STR_22(4), STR_21(7), STR_20(8), 
  3515 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(17), 
  3516 ;;		 -> STR_15(15), STR_14(3), STR_13(4), STR_12(4), 
  3517 ;;		 -> STR_11(4), STR_10(3), STR_9(2), STR_8(4), 
  3518 ;;		 -> STR_7(4), STR_6(2), STR_5(2), STR_4(2), 
  3519 ;;		 -> STR_3(5), main@cont(252), STR_2(3), STR_1(3), 
  3520 ;;		 -> G_rfid_buf(16), 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3532 ;;      Params:         2       0       0       0
  3533 ;;      Locals:         0       0       0       0
  3534 ;;      Temps:          0       0       0       0
  3535 ;;      Totals:         2       0       0       0
  3536 ;;Total ram usage:        2 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    9
  3539 ;; This function calls:
  3540 ;;		_send_lcd
  3541 ;; This function is called by:
  3542 ;;		_main
  3543 ;;		_ir_display
  3544 ;;		_orientate
  3545 ;;		_steer
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text10
  3550  001B46                     __ptext10:
  3551                           	opt stack 0
  3552  001B46                     _lcd_string:
  3553                           	opt stack 20
  3554                           
  3555                           ;lcd_funct.c: 226:     while (*string != 0) {
  3556                           
  3557                           ;incstack = 0
  3558  001B46  D016               	goto	l447
  3559  001B48                     
  3560                           ;lcd_funct.c: 229:         send_lcd(*string++, 1);
  3561  001B48  0E01               	movlw	1
  3562  001B4A  6E18               	movwf	send_lcd@type,c
  3563  001B4C  C01A  FFF6         	movff	lcd_string@string,tblptrl
  3564  001B50  C01B  FFF7         	movff	lcd_string@string+1,tblptrh
  3565  001B54  6AF8               	clrf	tblptru,c
  3566  001B56  0E02               	movlw	(high __ramtop+-1)
  3567  001B58  64F7               	cpfsgt	tblptrh,c
  3568  001B5A  D003               	bra	u2347
  3569  001B5C  0008               	tblrd		*
  3570  001B5E  50F5               	movf	tablat,w,c
  3571  001B60  D005               	bra	u2340
  3572  001B62                     u2347:
  3573  001B62  CFF6 FFE1          	movff	tblptrl,fsr1l
  3574  001B66  CFF7 FFE2          	movff	tblptrh,fsr1h
  3575  001B6A  50E7               	movf	indf1,w,c
  3576  001B6C                     u2340:
  3577  001B6C  ECE1  F00E         	call	_send_lcd
  3578  001B70  4A1A               	infsnz	lcd_string@string,f,c
  3579  001B72  2A1B               	incf	lcd_string@string+1,f,c
  3580  001B74                     l447:
  3581                           
  3582                           ;lcd_funct.c: 226:     while (*string != 0) {
  3583  001B74  C01A  FFF6         	movff	lcd_string@string,tblptrl
  3584  001B78  C01B  FFF7         	movff	lcd_string@string+1,tblptrh
  3585  001B7C  6AF8               	clrf	tblptru,c
  3586  001B7E  0E02               	movlw	(high __ramtop+-1)
  3587  001B80  64F7               	cpfsgt	tblptrh,c
  3588  001B82  D003               	bra	u2357
  3589  001B84  0008               	tblrd		*
  3590  001B86  50F5               	movf	tablat,w,c
  3591  001B88  D005               	bra	u2350
  3592  001B8A                     u2357:
  3593  001B8A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3594  001B8E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3595  001B92  50E7               	movf	indf1,w,c
  3596  001B94                     u2350:
  3597  001B94  0900               	iorlw	0
  3598  001B96  B4D8               	btfsc	status,2,c
  3599  001B98  0012               	return	
  3600  001B9A  D7D6               	goto	l448
  3601  001B9C                     __end_of_lcd_string:
  3602                           	opt stack 0
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           prodh	equ	0xFF4
  3608                           prodl	equ	0xFF3
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           indf1	equ	0xFE7
  3612                           postinc1	equ	0xFE6
  3613                           fsr1h	equ	0xFE2
  3614                           fsr1l	equ	0xFE1
  3615                           indf2	equ	0xFDF
  3616                           postinc2	equ	0xFDE
  3617                           postdec2	equ	0xFDD
  3618                           fsr2h	equ	0xFDA
  3619                           fsr2l	equ	0xFD9
  3620                           status	equ	0xFD8
  3621                           
  3622 ;; *************** function _itoa_5 *****************
  3623 ;; Defined at:
  3624 ;;		line 83 in file "functions.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  number          2   44[COMRAM] unsigned int 
  3627 ;;  buffer          2   46[COMRAM] PTR unsigned char 
  3628 ;;		 -> main@cont(252), 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  quotient        2   50[COMRAM] unsigned int 
  3631 ;;  remainder       2   48[COMRAM] unsigned int 
  3632 ;;  i               1   54[COMRAM] unsigned char 
  3633 ;;  j               1   53[COMRAM] unsigned char 
  3634 ;;  k               1   52[COMRAM] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      void 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3644 ;;      Params:         4       0       0       0
  3645 ;;      Locals:         7       0       0       0
  3646 ;;      Temps:          0       0       0       0
  3647 ;;      Totals:        11       0       0       0
  3648 ;;Total ram usage:       11 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    8
  3651 ;; This function calls:
  3652 ;;		___lwdiv
  3653 ;;		___lwmod
  3654 ;;		_power
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;;		_ir_display
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text11
  3662  001388                     __ptext11:
  3663                           	opt stack 0
  3664  001388                     _itoa_5:
  3665                           	opt stack 20
  3666                           
  3667                           ;functions.c: 84:     unsigned char k = 0;
  3668                           
  3669                           ;incstack = 0
  3670  001388  0E00               	movlw	0
  3671  00138A  6E35               	movwf	itoa_5@k,c
  3672                           
  3673                           ;functions.c: 85:     while (k < 16) {
  3674  00138C  D00B               	goto	l307
  3675  00138E                     
  3676                           ;functions.c: 86:         buffer[k] = 0;
  3677  00138E  5035               	movf	itoa_5@k,w,c
  3678  001390  0D01               	mullw	1
  3679  001392  50F3               	movf	prodl,w,c
  3680  001394  242F               	addwf	itoa_5@buffer,w,c
  3681  001396  6ED9               	movwf	fsr2l,c
  3682  001398  50F4               	movf	prodh,w,c
  3683  00139A  2030               	addwfc	itoa_5@buffer+1,w,c
  3684  00139C  6EDA               	movwf	fsr2h,c
  3685  00139E  0E00               	movlw	0
  3686  0013A0  6EDF               	movwf	indf2,c
  3687                           
  3688                           ;functions.c: 87:         k++;
  3689  0013A2  2A35               	incf	itoa_5@k,f,c
  3690  0013A4                     l307:
  3691                           
  3692                           ;functions.c: 85:     while (k < 16) {
  3693  0013A4  0E0F               	movlw	15
  3694  0013A6  6435               	cpfsgt	itoa_5@k,c
  3695  0013A8  D7F2               	goto	l308
  3696                           
  3697                           ;functions.c: 89:     unsigned int remainder = 0;
  3698  0013AA  0E00               	movlw	0
  3699  0013AC  6E32               	movwf	itoa_5@remainder+1,c
  3700  0013AE  0E00               	movlw	0
  3701  0013B0  6E31               	movwf	itoa_5@remainder,c
  3702                           
  3703                           ;functions.c: 90:     unsigned int quotient = 0;
  3704  0013B2  0E00               	movlw	0
  3705  0013B4  6E34               	movwf	itoa_5@quotient+1,c
  3706  0013B6  0E00               	movlw	0
  3707  0013B8  6E33               	movwf	itoa_5@quotient,c
  3708                           
  3709                           ;functions.c: 91:     unsigned char i = 4;
  3710  0013BA  0E04               	movlw	4
  3711  0013BC  6E37               	movwf	itoa_5@i,c
  3712                           
  3713                           ;functions.c: 92:     unsigned char j = 0;
  3714  0013BE  0E00               	movlw	0
  3715  0013C0  6E36               	movwf	itoa_5@j,c
  3716                           
  3717                           ;functions.c: 93:     while (i > 0) {
  3718  0013C2  D03F               	goto	l310
  3719  0013C4                     
  3720                           ;functions.c: 94:         quotient = number / power(10, i);
  3721  0013C4  C02D  F026         	movff	itoa_5@number,___lwdiv@dividend
  3722  0013C8  C02E  F027         	movff	itoa_5@number+1,___lwdiv@dividend+1
  3723  0013CC  C037  F01E         	movff	itoa_5@i,power@power
  3724  0013D0  6A1F               	clrf	power@power+1,c
  3725  0013D2  0E00               	movlw	0
  3726  0013D4  6E1D               	movwf	power@number+1,c
  3727  0013D6  0E0A               	movlw	10
  3728  0013D8  6E1C               	movwf	power@number,c
  3729  0013DA  EC73  F00D         	call	_power	;wreg free
  3730  0013DE  C01C  F028         	movff	?_power,___lwdiv@divisor
  3731  0013E2  C01D  F029         	movff	?_power+1,___lwdiv@divisor+1
  3732  0013E6  ECF9  F00D         	call	___lwdiv	;wreg free
  3733  0013EA  C026  F033         	movff	?___lwdiv,itoa_5@quotient
  3734  0013EE  C027  F034         	movff	?___lwdiv+1,itoa_5@quotient+1
  3735                           
  3736                           ;functions.c: 95:         remainder = number % power(10, i);
  3737  0013F2  C02D  F026         	movff	itoa_5@number,___lwmod@dividend
  3738  0013F6  C02E  F027         	movff	itoa_5@number+1,___lwmod@dividend+1
  3739  0013FA  C037  F01E         	movff	itoa_5@i,power@power
  3740  0013FE  6A1F               	clrf	power@power+1,c
  3741  001400  0E00               	movlw	0
  3742  001402  6E1D               	movwf	power@number+1,c
  3743  001404  0E0A               	movlw	10
  3744  001406  6E1C               	movwf	power@number,c
  3745  001408  EC73  F00D         	call	_power	;wreg free
  3746  00140C  C01C  F028         	movff	?_power,___lwmod@divisor
  3747  001410  C01D  F029         	movff	?_power+1,___lwmod@divisor+1
  3748  001414  EC22  F00E         	call	___lwmod	;wreg free
  3749  001418  C026  F031         	movff	?___lwmod,itoa_5@remainder
  3750  00141C  C027  F032         	movff	?___lwmod+1,itoa_5@remainder+1
  3751                           
  3752                           ;functions.c: 96:         buffer[j] = (quotient + 48);
  3753  001420  5036               	movf	itoa_5@j,w,c
  3754  001422  0D01               	mullw	1
  3755  001424  50F3               	movf	prodl,w,c
  3756  001426  242F               	addwf	itoa_5@buffer,w,c
  3757  001428  6ED9               	movwf	fsr2l,c
  3758  00142A  50F4               	movf	prodh,w,c
  3759  00142C  2030               	addwfc	itoa_5@buffer+1,w,c
  3760  00142E  6EDA               	movwf	fsr2h,c
  3761  001430  5033               	movf	itoa_5@quotient,w,c
  3762  001432  0F30               	addlw	48
  3763  001434  6EDF               	movwf	indf2,c
  3764                           
  3765                           ;functions.c: 97:         number = remainder;
  3766  001436  C031  F02D         	movff	itoa_5@remainder,itoa_5@number
  3767  00143A  C032  F02E         	movff	itoa_5@remainder+1,itoa_5@number+1
  3768                           
  3769                           ;functions.c: 98:         i--;
  3770  00143E  0637               	decf	itoa_5@i,f,c
  3771                           
  3772                           ;functions.c: 99:         j++;
  3773  001440  2A36               	incf	itoa_5@j,f,c
  3774  001442                     l310:
  3775                           
  3776                           ;functions.c: 93:     while (i > 0) {
  3777  001442  5037               	movf	itoa_5@i,w,c
  3778  001444  A4D8               	btfss	status,2,c
  3779  001446  D7BE               	goto	l311
  3780                           
  3781                           ;functions.c: 101:     buffer[j] = (number + 48);
  3782  001448  5036               	movf	itoa_5@j,w,c
  3783  00144A  0D01               	mullw	1
  3784  00144C  50F3               	movf	prodl,w,c
  3785  00144E  242F               	addwf	itoa_5@buffer,w,c
  3786  001450  6ED9               	movwf	fsr2l,c
  3787  001452  50F4               	movf	prodh,w,c
  3788  001454  2030               	addwfc	itoa_5@buffer+1,w,c
  3789  001456  6EDA               	movwf	fsr2h,c
  3790  001458  502D               	movf	itoa_5@number,w,c
  3791  00145A  0F30               	addlw	48
  3792  00145C  6EDF               	movwf	indf2,c
  3793  00145E  0012               	return		;funcret
  3794  001460                     __end_of_itoa_5:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           indf1	equ	0xFE7
  3805                           postinc1	equ	0xFE6
  3806                           fsr1h	equ	0xFE2
  3807                           fsr1l	equ	0xFE1
  3808                           indf2	equ	0xFDF
  3809                           postinc2	equ	0xFDE
  3810                           postdec2	equ	0xFDD
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function _power *****************
  3816 ;; Defined at:
  3817 ;;		line 52 in file "functions.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  number          2   27[COMRAM] int 
  3820 ;;  power           2   29[COMRAM] int 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  temp            2   34[COMRAM] int 
  3823 ;;  i               1   36[COMRAM] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  2   27[COMRAM] int 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3833 ;;      Params:         4       0       0       0
  3834 ;;      Locals:         3       0       0       0
  3835 ;;      Temps:          3       0       0       0
  3836 ;;      Totals:        10       0       0       0
  3837 ;;Total ram usage:       10 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    7
  3840 ;; This function calls:
  3841 ;;		___wmul
  3842 ;; This function is called by:
  3843 ;;		_itoa_5
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text12
  3848  001AE6                     __ptext12:
  3849                           	opt stack 0
  3850  001AE6                     _power:
  3851                           	opt stack 20
  3852                           
  3853                           ;functions.c: 53:     unsigned char i = 1;
  3854                           
  3855                           ;incstack = 0
  3856  001AE6  0E01               	movlw	1
  3857  001AE8  6E25               	movwf	power@i,c
  3858                           
  3859                           ;functions.c: 54:     int temp = number;
  3860  001AEA  C01C  F023         	movff	power@number,power@temp
  3861  001AEE  C01D  F024         	movff	power@number+1,power@temp+1
  3862                           
  3863                           ;functions.c: 55:     while (i < power) {
  3864  001AF2  D00F               	goto	l300
  3865  001AF4                     
  3866                           ;functions.c: 56:         number = number * temp;
  3867  001AF4  C01C  F016         	movff	power@number,___wmul@multiplier
  3868  001AF8  C01D  F017         	movff	power@number+1,___wmul@multiplier+1
  3869  001AFC  C023  F018         	movff	power@temp,___wmul@multiplicand
  3870  001B00  C024  F019         	movff	power@temp+1,___wmul@multiplicand+1
  3871  001B04  ECCE  F00E         	call	___wmul	;wreg free
  3872  001B08  C016  F01C         	movff	?___wmul,power@number
  3873  001B0C  C017  F01D         	movff	?___wmul+1,power@number+1
  3874                           
  3875                           ;functions.c: 57:         i++;
  3876  001B10  2A25               	incf	power@i,f,c
  3877  001B12                     l300:
  3878                           
  3879                           ;functions.c: 55:     while (i < power) {
  3880  001B12  5025               	movf	power@i,w,c
  3881  001B14  6E20               	movwf	??_power& (0+255),c
  3882  001B16  6A21               	clrf	(??_power+1)& (0+255),c
  3883  001B18  501E               	movf	power@power,w,c
  3884  001B1A  5C20               	subwf	??_power,w,c
  3885  001B1C  5021               	movf	??_power+1,w,c
  3886  001B1E  0A80               	xorlw	128
  3887  001B20  6E22               	movwf	(??_power+2)& (0+255),c
  3888  001B22  501F               	movf	power@power+1,w,c
  3889  001B24  0A80               	xorlw	128
  3890  001B26  5822               	subwfb	(??_power+2)& (0+255),w,c
  3891  001B28  A0D8               	btfss	status,0,c
  3892  001B2A  D7E4               	goto	l301
  3893                           
  3894                           ;functions.c: 59:     if (power == 0) {
  3895  001B2C  501E               	movf	power@power,w,c
  3896  001B2E  101F               	iorwf	power@power+1,w,c
  3897  001B30  A4D8               	btfss	status,2,c
  3898  001B32  D004               	goto	l303
  3899                           
  3900                           ;functions.c: 60:         number = 1;
  3901  001B34  0E00               	movlw	0
  3902  001B36  6E1D               	movwf	power@number+1,c
  3903  001B38  0E01               	movlw	1
  3904  001B3A  6E1C               	movwf	power@number,c
  3905  001B3C                     l303:
  3906                           
  3907                           ;functions.c: 62:     return number;
  3908  001B3C  C01C  F01C         	movff	power@number,?_power
  3909  001B40  C01D  F01D         	movff	power@number+1,?_power+1
  3910  001B44  0012               	return	
  3911  001B46                     __end_of_power:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf1	equ	0xFE7
  3922                           postinc1	equ	0xFE6
  3923                           fsr1h	equ	0xFE2
  3924                           fsr1l	equ	0xFE1
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function ___lwmod *****************
  3933 ;; Defined at:
  3934 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  dividend        2   37[COMRAM] unsigned int 
  3937 ;;  divisor         2   39[COMRAM] unsigned int 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  counter         1   41[COMRAM] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  2   37[COMRAM] unsigned int 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, status,0
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3949 ;;      Params:         4       0       0       0
  3950 ;;      Locals:         1       0       0       0
  3951 ;;      Temps:          0       0       0       0
  3952 ;;      Totals:         5       0       0       0
  3953 ;;Total ram usage:        5 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    6
  3956 ;; This function calls:
  3957 ;;		Nothing
  3958 ;; This function is called by:
  3959 ;;		_itoa_5
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text13
  3964  001C44                     __ptext13:
  3965                           	opt stack 0
  3966  001C44                     ___lwmod:
  3967                           	opt stack 21
  3968                           
  3969                           ;incstack = 0
  3970  001C44  5028               	movf	___lwmod@divisor,w,c
  3971  001C46  1029               	iorwf	___lwmod@divisor+1,w,c
  3972  001C48  B4D8               	btfsc	status,2,c
  3973  001C4A  D018               	goto	l960
  3974  001C4C  0E01               	movlw	1
  3975  001C4E  6E2A               	movwf	___lwmod@counter,c
  3976  001C50  D004               	goto	l955
  3977  001C52  90D8               	bcf	status,0,c
  3978  001C54  3628               	rlcf	___lwmod@divisor,f,c
  3979  001C56  3629               	rlcf	___lwmod@divisor+1,f,c
  3980  001C58  2A2A               	incf	___lwmod@counter,f,c
  3981  001C5A                     l955:
  3982  001C5A  AE29               	btfss	___lwmod@divisor+1,7,c
  3983  001C5C  D7FA               	goto	l956
  3984  001C5E                     u2320:
  3985  001C5E  5028               	movf	___lwmod@divisor,w,c
  3986  001C60  5C26               	subwf	___lwmod@dividend,w,c
  3987  001C62  5029               	movf	___lwmod@divisor+1,w,c
  3988  001C64  5827               	subwfb	___lwmod@dividend+1,w,c
  3989  001C66  A0D8               	btfss	status,0,c
  3990  001C68  D004               	goto	l959
  3991  001C6A  5028               	movf	___lwmod@divisor,w,c
  3992  001C6C  5E26               	subwf	___lwmod@dividend,f,c
  3993  001C6E  5029               	movf	___lwmod@divisor+1,w,c
  3994  001C70  5A27               	subwfb	___lwmod@dividend+1,f,c
  3995  001C72                     l959:
  3996  001C72  90D8               	bcf	status,0,c
  3997  001C74  3229               	rrcf	___lwmod@divisor+1,f,c
  3998  001C76  3228               	rrcf	___lwmod@divisor,f,c
  3999  001C78  2E2A               	decfsz	___lwmod@counter,f,c
  4000  001C7A  D7F1               	goto	u2320
  4001  001C7C                     l960:
  4002  001C7C  C026  F026         	movff	___lwmod@dividend,?___lwmod
  4003  001C80  C027  F027         	movff	___lwmod@dividend+1,?___lwmod+1
  4004  001C84  0012               	return		;funcret
  4005  001C86                     __end_of___lwmod:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           prodh	equ	0xFF4
  4012                           prodl	equ	0xFF3
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           indf1	equ	0xFE7
  4016                           postinc1	equ	0xFE6
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function ___lwdiv *****************
  4027 ;; Defined at:
  4028 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  dividend        2   37[COMRAM] unsigned int 
  4031 ;;  divisor         2   39[COMRAM] unsigned int 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  quotient        2   42[COMRAM] unsigned int 
  4034 ;;  counter         1   41[COMRAM] unsigned char 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  2   37[COMRAM] unsigned int 
  4037 ;; Registers used:
  4038 ;;		wreg, status,2, status,0
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4044 ;;      Params:         4       0       0       0
  4045 ;;      Locals:         3       0       0       0
  4046 ;;      Temps:          0       0       0       0
  4047 ;;      Totals:         7       0       0       0
  4048 ;;Total ram usage:        7 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    6
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_itoa_5
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text14
  4059  001BF2                     __ptext14:
  4060                           	opt stack 0
  4061  001BF2                     ___lwdiv:
  4062                           	opt stack 21
  4063                           
  4064                           ;incstack = 0
  4065  001BF2  0E00               	movlw	0
  4066  001BF4  6E2C               	movwf	___lwdiv@quotient+1,c
  4067  001BF6  0E00               	movlw	0
  4068  001BF8  6E2B               	movwf	___lwdiv@quotient,c
  4069  001BFA  5028               	movf	___lwdiv@divisor,w,c
  4070  001BFC  1029               	iorwf	___lwdiv@divisor+1,w,c
  4071  001BFE  B4D8               	btfsc	status,2,c
  4072  001C00  D01C               	goto	l950
  4073  001C02  0E01               	movlw	1
  4074  001C04  6E2A               	movwf	___lwdiv@counter,c
  4075  001C06  D004               	goto	l945
  4076  001C08  90D8               	bcf	status,0,c
  4077  001C0A  3628               	rlcf	___lwdiv@divisor,f,c
  4078  001C0C  3629               	rlcf	___lwdiv@divisor+1,f,c
  4079  001C0E  2A2A               	incf	___lwdiv@counter,f,c
  4080  001C10                     l945:
  4081  001C10  AE29               	btfss	___lwdiv@divisor+1,7,c
  4082  001C12  D7FA               	goto	l946
  4083  001C14                     u2290:
  4084  001C14  90D8               	bcf	status,0,c
  4085  001C16  362B               	rlcf	___lwdiv@quotient,f,c
  4086  001C18  362C               	rlcf	___lwdiv@quotient+1,f,c
  4087  001C1A  5028               	movf	___lwdiv@divisor,w,c
  4088  001C1C  5C26               	subwf	___lwdiv@dividend,w,c
  4089  001C1E  5029               	movf	___lwdiv@divisor+1,w,c
  4090  001C20  5827               	subwfb	___lwdiv@dividend+1,w,c
  4091  001C22  A0D8               	btfss	status,0,c
  4092  001C24  D005               	goto	l949
  4093  001C26  5028               	movf	___lwdiv@divisor,w,c
  4094  001C28  5E26               	subwf	___lwdiv@dividend,f,c
  4095  001C2A  5029               	movf	___lwdiv@divisor+1,w,c
  4096  001C2C  5A27               	subwfb	___lwdiv@dividend+1,f,c
  4097  001C2E  802B               	bsf	___lwdiv@quotient,0,c
  4098  001C30                     l949:
  4099  001C30  90D8               	bcf	status,0,c
  4100  001C32  3229               	rrcf	___lwdiv@divisor+1,f,c
  4101  001C34  3228               	rrcf	___lwdiv@divisor,f,c
  4102  001C36  2E2A               	decfsz	___lwdiv@counter,f,c
  4103  001C38  D7ED               	goto	u2290
  4104  001C3A                     l950:
  4105  001C3A  C02B  F026         	movff	___lwdiv@quotient,?___lwdiv
  4106  001C3E  C02C  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4107  001C42  0012               	return		;funcret
  4108  001C44                     __end_of___lwdiv:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           indf1	equ	0xFE7
  4119                           postinc1	equ	0xFE6
  4120                           fsr1h	equ	0xFE2
  4121                           fsr1l	equ	0xFE1
  4122                           indf2	equ	0xFDF
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function _full_speed *****************
  4130 ;; Defined at:
  4131 ;;		line 127 in file "dc_motor_funct.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  mL              2   44[COMRAM] PTR struct DC_motor
  4134 ;;		 -> main@motorL(9), 
  4135 ;;  mR              2   46[COMRAM] PTR struct DC_motor
  4136 ;;		 -> main@motorR(9), 
  4137 ;;  direction       1   48[COMRAM] unsigned char 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4149 ;;      Params:         5       0       0       0
  4150 ;;      Locals:         0       0       0       0
  4151 ;;      Temps:          2       0       0       0
  4152 ;;      Totals:         7       0       0       0
  4153 ;;Total ram usage:        7 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    8
  4156 ;; This function calls:
  4157 ;;		_set_motor_pwm
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;;		_orientate
  4161 ;;		_steer
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text15
  4166  001460                     __ptext15:
  4167                           	opt stack 0
  4168  001460                     _full_speed:
  4169                           	opt stack 21
  4170                           
  4171                           ;dc_motor_funct.c: 129:     mL->direction = direction;
  4172                           
  4173                           ;incstack = 0
  4174  001460  EE20 F001          	lfsr	2,1
  4175  001464  502D               	movf	full_speed@mL,w,c
  4176  001466  26D9               	addwf	fsr2l,f,c
  4177  001468  502E               	movf	full_speed@mL+1,w,c
  4178  00146A  22DA               	addwfc	fsr2h,f,c
  4179  00146C  C031  FFDF         	movff	full_speed@direction,indf2
  4180                           
  4181                           ;dc_motor_funct.c: 130:     mR->direction = direction;
  4182  001470  EE20 F001          	lfsr	2,1
  4183  001474  502F               	movf	full_speed@mR,w,c
  4184  001476  26D9               	addwf	fsr2l,f,c
  4185  001478  5030               	movf	full_speed@mR+1,w,c
  4186  00147A  22DA               	addwfc	fsr2h,f,c
  4187  00147C  C031  FFDF         	movff	full_speed@direction,indf2
  4188                           
  4189                           ;dc_motor_funct.c: 132:     if (mR->power > mL->power) {
  4190  001480  C02F  FFD9         	movff	full_speed@mR,fsr2l
  4191  001484  C030  FFDA         	movff	full_speed@mR+1,fsr2h
  4192  001488  C02D  FFE1         	movff	full_speed@mL,fsr1l
  4193  00148C  C02E  FFE2         	movff	full_speed@mL+1,fsr1h
  4194  001490  50DE               	movf	postinc2,w,c
  4195  001492  5CE6               	subwf	postinc1,w,c
  4196  001494  B0D8               	btfsc	status,0,c
  4197  001496  D009               	goto	l187
  4198                           
  4199                           ;dc_motor_funct.c: 134:         mR->power = mL->power;
  4200  001498  C02D  FFD9         	movff	full_speed@mL,fsr2l
  4201  00149C  C02E  FFDA         	movff	full_speed@mL+1,fsr2h
  4202  0014A0  C02F  FFE1         	movff	full_speed@mR,fsr1l
  4203  0014A4  C030  FFE2         	movff	full_speed@mR+1,fsr1h
  4204  0014A8  D014               	goto	L1
  4205  0014AA                     l187:
  4206  0014AA  C02D  FFD9         	movff	full_speed@mL,fsr2l
  4207  0014AE  C02E  FFDA         	movff	full_speed@mL+1,fsr2h
  4208  0014B2  C02F  FFE1         	movff	full_speed@mR,fsr1l
  4209  0014B6  C030  FFE2         	movff	full_speed@mR+1,fsr1h
  4210  0014BA  50DE               	movf	postinc2,w,c
  4211  0014BC  5CE6               	subwf	postinc1,w,c
  4212  0014BE  B0D8               	btfsc	status,0,c
  4213  0014C0  D02E               	goto	l190
  4214                           
  4215                           ;dc_motor_funct.c: 137:         mL->power = mR->power;
  4216  0014C2  C02F  FFD9         	movff	full_speed@mR,fsr2l
  4217  0014C6  C030  FFDA         	movff	full_speed@mR+1,fsr2h
  4218  0014CA  C02D  FFE1         	movff	full_speed@mL,fsr1l
  4219  0014CE  C02E  FFE2         	movff	full_speed@mL+1,fsr1h
  4220  0014D2                     L1:
  4221  0014D2  CFDF FFE7          	movff	indf2,indf1
  4222                           
  4223                           ;dc_motor_funct.c: 138:     }
  4224  0014D6  D023               	goto	l190
  4225  0014D8                     
  4226                           ;dc_motor_funct.c: 142:         mL->power = mR->power;
  4227  0014D8  C02F  FFD9         	movff	full_speed@mR,fsr2l
  4228  0014DC  C030  FFDA         	movff	full_speed@mR+1,fsr2h
  4229  0014E0  C02D  FFE1         	movff	full_speed@mL,fsr1l
  4230  0014E4  C02E  FFE2         	movff	full_speed@mL+1,fsr1h
  4231  0014E8  CFDF FFE7          	movff	indf2,indf1
  4232                           
  4233                           ;dc_motor_funct.c: 143:         set_motor_pwm(mL);
  4234  0014EC  C02D  F024         	movff	full_speed@mL,set_motor_pwm@m
  4235  0014F0  C02E  F025         	movff	full_speed@mL+1,set_motor_pwm@m+1
  4236  0014F4  EC39  F007         	call	_set_motor_pwm	;wreg free
  4237                           
  4238                           ;dc_motor_funct.c: 144:         set_motor_pwm(mR);
  4239  0014F8  C02F  F024         	movff	full_speed@mR,set_motor_pwm@m
  4240  0014FC  C030  F025         	movff	full_speed@mR+1,set_motor_pwm@m+1
  4241  001500  EC39  F007         	call	_set_motor_pwm	;wreg free
  4242                           
  4243                           ;dc_motor_funct.c: 145:         _delay((unsigned long)((2)*(8000000/4000.0)));
  4244  001504  0E06               	movlw	6
  4245  001506  6E32               	movwf	??_full_speed& (0+255),c
  4246  001508  0E30               	movlw	48
  4247  00150A                     u3207:
  4248  00150A  2EE8               	decfsz	wreg,f,c
  4249  00150C  D7FE               	bra	u3207
  4250  00150E  2E32               	decfsz	??_full_speed& (0+255),f,c
  4251  001510  D7FC               	bra	u3207
  4252  001512  D000               	nop2	
  4253                           
  4254                           ;dc_motor_funct.c: 146:     }
  4255  001514  C02F  FFD9         	movff	full_speed@mR,fsr2l
  4256  001518  C030  FFDA         	movff	full_speed@mR+1,fsr2h
  4257  00151C  2ADF               	incf	indf2,f,c
  4258  00151E                     l190:
  4259  00151E  C02F  FFD9         	movff	full_speed@mR,fsr2l
  4260  001522  C030  FFDA         	movff	full_speed@mR+1,fsr2h
  4261  001526  0E59               	movlw	89
  4262  001528  64DF               	cpfsgt	indf2,c
  4263  00152A  D7D6               	goto	l191
  4264  00152C  0012               	return	
  4265  00152E                     __end_of_full_speed:
  4266                           	opt stack 0
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           prodh	equ	0xFF4
  4272                           prodl	equ	0xFF3
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           indf1	equ	0xFE7
  4276                           postinc1	equ	0xFE6
  4277                           fsr1h	equ	0xFE2
  4278                           fsr1l	equ	0xFE1
  4279                           indf2	equ	0xFDF
  4280                           postinc2	equ	0xFDE
  4281                           postdec2	equ	0xFDD
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _set_motor_pwm *****************
  4287 ;; Defined at:
  4288 ;;		line 84 in file "dc_motor_funct.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  m               2   35[COMRAM] PTR struct DC_motor
  4291 ;;		 -> main@motorR(9), main@motorL(9), 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  PWMduty         2   42[COMRAM] int 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4303 ;;      Params:         2       0       0       0
  4304 ;;      Locals:         2       0       0       0
  4305 ;;      Temps:          5       0       0       0
  4306 ;;      Totals:         9       0       0       0
  4307 ;;Total ram usage:        9 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    7
  4310 ;; This function calls:
  4311 ;;		___awdiv
  4312 ;;		___wmul
  4313 ;; This function is called by:
  4314 ;;		_full_speed
  4315 ;;		_veer_left
  4316 ;;		_veer_right
  4317 ;;		_stop_all
  4318 ;;		_turn_left
  4319 ;;		_turn_right
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text16
  4324  000E72                     __ptext16:
  4325                           	opt stack 0
  4326  000E72                     _set_motor_pwm:
  4327                           	opt stack 22
  4328                           
  4329                           ;dc_motor_funct.c: 85:     int PWMduty;;dc_motor_funct.c: 88:     PWMduty = (m->power * 
      +                          m->PWMperiod) / 100;
  4330                           
  4331                           ;incstack = 0
  4332  000E72  C024  FFD9         	movff	set_motor_pwm@m,fsr2l
  4333  000E76  C025  FFDA         	movff	set_motor_pwm@m+1,fsr2h
  4334  000E7A  50DF               	movf	indf2,w,c
  4335  000E7C  6E26               	movwf	??_set_motor_pwm& (0+255),c
  4336  000E7E  5026               	movf	??_set_motor_pwm,w,c
  4337  000E80  6E16               	movwf	___wmul@multiplier,c
  4338  000E82  6A17               	clrf	___wmul@multiplier+1,c
  4339  000E84  EE20 F007          	lfsr	2,7
  4340  000E88  5024               	movf	set_motor_pwm@m,w,c
  4341  000E8A  26D9               	addwf	fsr2l,f,c
  4342  000E8C  5025               	movf	set_motor_pwm@m+1,w,c
  4343  000E8E  22DA               	addwfc	fsr2h,f,c
  4344  000E90  CFDE F018          	movff	postinc2,___wmul@multiplicand
  4345  000E94  CFDD F019          	movff	postdec2,___wmul@multiplicand+1
  4346  000E98  ECCE  F00E         	call	___wmul	;wreg free
  4347  000E9C  C016  F01C         	movff	?___wmul,___awdiv@dividend
  4348  000EA0  C017  F01D         	movff	?___wmul+1,___awdiv@dividend+1
  4349  000EA4  0E00               	movlw	0
  4350  000EA6  6E1F               	movwf	___awdiv@divisor+1,c
  4351  000EA8  0E64               	movlw	100
  4352  000EAA  6E1E               	movwf	___awdiv@divisor,c
  4353  000EAC  EC83  F00C         	call	___awdiv	;wreg free
  4354  000EB0  C01C  F02B         	movff	?___awdiv,set_motor_pwm@PWMduty
  4355  000EB4  C01D  F02C         	movff	?___awdiv+1,set_motor_pwm@PWMduty+1
  4356                           
  4357                           ;dc_motor_funct.c: 90:     if (m->direction)
  4358  000EB8  EE20 F001          	lfsr	2,1
  4359  000EBC  5024               	movf	set_motor_pwm@m,w,c
  4360  000EBE  26D9               	addwf	fsr2l,f,c
  4361  000EC0  5025               	movf	set_motor_pwm@m+1,w,c
  4362  000EC2  22DA               	addwfc	fsr2h,f,c
  4363  000EC4  50DF               	movf	indf2,w,c
  4364  000EC6  B4D8               	btfsc	status,2,c
  4365  000EC8  D02C               	goto	l182
  4366                           
  4367                           ;dc_motor_funct.c: 91:     {;dc_motor_funct.c: 94:         LATB = LATB | (1 << (m->dir_p
      +                          in));
  4368  000ECA  EE20 F006          	lfsr	2,6
  4369  000ECE  5024               	movf	set_motor_pwm@m,w,c
  4370  000ED0  26D9               	addwf	fsr2l,f,c
  4371  000ED2  5025               	movf	set_motor_pwm@m+1,w,c
  4372  000ED4  22DA               	addwfc	fsr2h,f,c
  4373  000ED6  50DF               	movf	indf2,w,c
  4374  000ED8  6E26               	movwf	??_set_motor_pwm& (0+255),c
  4375  000EDA  0E01               	movlw	1
  4376  000EDC  6E27               	movwf	(??_set_motor_pwm+1)& (0+255),c
  4377  000EDE  2A26               	incf	??_set_motor_pwm,f,c
  4378  000EE0  D002               	goto	u2224
  4379  000EE2                     u2225:
  4380  000EE2  90D8               	bcf	status,0,c
  4381  000EE4  3627               	rlcf	??_set_motor_pwm+1,f,c
  4382  000EE6                     u2224:
  4383  000EE6  2E26               	decfsz	??_set_motor_pwm,f,c
  4384  000EE8  D7FC               	goto	u2225
  4385  000EEA  5027               	movf	??_set_motor_pwm+1,w,c
  4386  000EEC  108A               	iorwf	3978,w,c	;volatile
  4387  000EEE  6E8A               	movwf	3978,c	;volatile
  4388                           
  4389                           ;dc_motor_funct.c: 95:         PWMduty = m->PWMperiod - PWMduty;
  4390  000EF0  EE20 F007          	lfsr	2,7
  4391  000EF4  5024               	movf	set_motor_pwm@m,w,c
  4392  000EF6  26D9               	addwf	fsr2l,f,c
  4393  000EF8  5025               	movf	set_motor_pwm@m+1,w,c
  4394  000EFA  22DA               	addwfc	fsr2h,f,c
  4395  000EFC  CFDE F026          	movff	postinc2,??_set_motor_pwm
  4396  000F00  CFDD F027          	movff	postdec2,??_set_motor_pwm+1
  4397  000F04  C02B  F028         	movff	set_motor_pwm@PWMduty,??_set_motor_pwm+2
  4398  000F08  C02C  F029         	movff	set_motor_pwm@PWMduty+1,??_set_motor_pwm+3
  4399  000F0C  1E28               	comf	??_set_motor_pwm+2,f,c
  4400  000F0E  1E29               	comf	??_set_motor_pwm+3,f,c
  4401  000F10  4A28               	infsnz	??_set_motor_pwm+2,f,c
  4402  000F12  2A29               	incf	??_set_motor_pwm+3,f,c
  4403  000F14  5026               	movf	??_set_motor_pwm,w,c
  4404  000F16  2428               	addwf	??_set_motor_pwm+2,w,c
  4405  000F18  6E2B               	movwf	set_motor_pwm@PWMduty,c
  4406  000F1A  5027               	movf	??_set_motor_pwm+1,w,c
  4407  000F1C  2029               	addwfc	??_set_motor_pwm+3,w,c
  4408  000F1E  6E2C               	movwf	set_motor_pwm@PWMduty+1,c
  4409                           
  4410                           ;dc_motor_funct.c: 96:     } else
  4411  000F20  D014               	goto	l183
  4412  000F22                     l182:
  4413                           
  4414                           ;dc_motor_funct.c: 97:     {;dc_motor_funct.c: 99:         LATB = LATB & (~(1 << (m->dir
      +                          _pin)));
  4415  000F22  EE20 F006          	lfsr	2,6
  4416  000F26  5024               	movf	set_motor_pwm@m,w,c
  4417  000F28  26D9               	addwf	fsr2l,f,c
  4418  000F2A  5025               	movf	set_motor_pwm@m+1,w,c
  4419  000F2C  22DA               	addwfc	fsr2h,f,c
  4420  000F2E  50DF               	movf	indf2,w,c
  4421  000F30  6E26               	movwf	??_set_motor_pwm& (0+255),c
  4422  000F32  0E01               	movlw	1
  4423  000F34  6E27               	movwf	(??_set_motor_pwm+1)& (0+255),c
  4424  000F36  2A26               	incf	??_set_motor_pwm,f,c
  4425  000F38  D002               	goto	u2234
  4426  000F3A                     u2235:
  4427  000F3A  90D8               	bcf	status,0,c
  4428  000F3C  3627               	rlcf	??_set_motor_pwm+1,f,c
  4429  000F3E                     u2234:
  4430  000F3E  2E26               	decfsz	??_set_motor_pwm,f,c
  4431  000F40  D7FC               	goto	u2235
  4432  000F42  5027               	movf	??_set_motor_pwm+1,w,c
  4433  000F44  0AFF               	xorlw	255
  4434  000F46  148A               	andwf	3978,w,c	;volatile
  4435  000F48  6E8A               	movwf	3978,c	;volatile
  4436  000F4A                     l183:
  4437                           
  4438                           ;dc_motor_funct.c: 103:     *(m->dutyLowByte) = PWMduty << 2;
  4439  000F4A  EE20 F002          	lfsr	2,2
  4440  000F4E  5024               	movf	set_motor_pwm@m,w,c
  4441  000F50  26D9               	addwf	fsr2l,f,c
  4442  000F52  5025               	movf	set_motor_pwm@m+1,w,c
  4443  000F54  22DA               	addwfc	fsr2h,f,c
  4444  000F56  CFDE F026          	movff	postinc2,??_set_motor_pwm
  4445  000F5A  CFDD F027          	movff	postdec2,??_set_motor_pwm+1
  4446  000F5E  C026  FFD9         	movff	??_set_motor_pwm,fsr2l
  4447  000F62  C027  FFDA         	movff	??_set_motor_pwm+1,fsr2h
  4448  000F66  442B               	rlncf	set_motor_pwm@PWMduty,w,c
  4449  000F68  46E8               	rlncf	wreg,f,c
  4450  000F6A  0BFC               	andlw	252
  4451  000F6C  6EDF               	movwf	indf2,c
  4452                           
  4453                           ;dc_motor_funct.c: 104:     *(m->dutyHighByte) = PWMduty >> 6;
  4454  000F6E  EE20 F004          	lfsr	2,4
  4455  000F72  5024               	movf	set_motor_pwm@m,w,c
  4456  000F74  26D9               	addwf	fsr2l,f,c
  4457  000F76  5025               	movf	set_motor_pwm@m+1,w,c
  4458  000F78  22DA               	addwfc	fsr2h,f,c
  4459  000F7A  CFDE F026          	movff	postinc2,??_set_motor_pwm
  4460  000F7E  CFDD F027          	movff	postdec2,??_set_motor_pwm+1
  4461  000F82  C026  FFD9         	movff	??_set_motor_pwm,fsr2l
  4462  000F86  C027  FFDA         	movff	??_set_motor_pwm+1,fsr2h
  4463  000F8A  C02B  F028         	movff	set_motor_pwm@PWMduty,??_set_motor_pwm+2
  4464  000F8E  C02C  F029         	movff	set_motor_pwm@PWMduty+1,??_set_motor_pwm+3
  4465  000F92  0E06               	movlw	6
  4466  000F94  6E2A               	movwf	(??_set_motor_pwm+4)& (0+255),c
  4467  000F96                     u2245:
  4468  000F96  3429               	rlcf	??_set_motor_pwm+3,w,c
  4469  000F98  3229               	rrcf	??_set_motor_pwm+3,f,c
  4470  000F9A  3228               	rrcf	??_set_motor_pwm+2,f,c
  4471  000F9C  2E2A               	decfsz	(??_set_motor_pwm+4)& (0+255),f,c
  4472  000F9E  D7FB               	goto	u2245
  4473  000FA0  5028               	movf	??_set_motor_pwm+2,w,c
  4474  000FA2  6EDF               	movwf	indf2,c
  4475  000FA4  0012               	return		;funcret
  4476  000FA6                     __end_of_set_motor_pwm:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           postinc0	equ	0xFEE
  4485                           wreg	equ	0xFE8
  4486                           indf1	equ	0xFE7
  4487                           postinc1	equ	0xFE6
  4488                           fsr1h	equ	0xFE2
  4489                           fsr1l	equ	0xFE1
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function ___wmul *****************
  4498 ;; Defined at:
  4499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  multiplier      2   21[COMRAM] unsigned int 
  4502 ;;  multiplicand    2   23[COMRAM] unsigned int 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  product         2   25[COMRAM] unsigned int 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  2   21[COMRAM] unsigned int 
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0, prodl, prodh
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4514 ;;      Params:         4       0       0       0
  4515 ;;      Locals:         2       0       0       0
  4516 ;;      Temps:          0       0       0       0
  4517 ;;      Totals:         6       0       0       0
  4518 ;;Total ram usage:        6 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    6
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_set_motor_pwm
  4525 ;;		_power
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text17
  4530  001D9C                     __ptext17:
  4531                           	opt stack 0
  4532  001D9C                     ___wmul:
  4533                           	opt stack 22
  4534                           
  4535                           ;incstack = 0
  4536  001D9C  5016               	movf	___wmul@multiplier,w,c
  4537  001D9E  0218               	mulwf	___wmul@multiplicand,c
  4538  001DA0  CFF3 F01A          	movff	prodl,___wmul@product
  4539  001DA4  CFF4 F01B          	movff	prodh,___wmul@product+1
  4540  001DA8  5016               	movf	___wmul@multiplier,w,c
  4541  001DAA  0219               	mulwf	___wmul@multiplicand+1,c
  4542  001DAC  50F3               	movf	prodl,w,c
  4543  001DAE  261B               	addwf	___wmul@product+1,f,c
  4544  001DB0  5017               	movf	___wmul@multiplier+1,w,c
  4545  001DB2  0218               	mulwf	___wmul@multiplicand,c
  4546  001DB4  50F3               	movf	prodl,w,c
  4547  001DB6  261B               	addwf	___wmul@product+1,f,c
  4548  001DB8  C01A  F016         	movff	___wmul@product,?___wmul
  4549  001DBC  C01B  F017         	movff	___wmul@product+1,?___wmul+1
  4550  001DC0  0012               	return	
  4551  001DC2                     __end_of___wmul:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           indf1	equ	0xFE7
  4562                           postinc1	equ	0xFE6
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           postinc2	equ	0xFDE
  4567                           postdec2	equ	0xFDD
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572 ;; *************** function ___awdiv *****************
  4573 ;; Defined at:
  4574 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  dividend        2   27[COMRAM] int 
  4577 ;;  divisor         2   29[COMRAM] int 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  quotient        2   33[COMRAM] int 
  4580 ;;  sign            1   32[COMRAM] unsigned char 
  4581 ;;  counter         1   31[COMRAM] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  2   27[COMRAM] int 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4591 ;;      Params:         4       0       0       0
  4592 ;;      Locals:         4       0       0       0
  4593 ;;      Temps:          0       0       0       0
  4594 ;;      Totals:         8       0       0       0
  4595 ;;Total ram usage:        8 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    6
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_set_motor_pwm
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text18
  4606  001906                     __ptext18:
  4607                           	opt stack 0
  4608  001906                     ___awdiv:
  4609                           	opt stack 22
  4610                           
  4611                           ;incstack = 0
  4612  001906  0E00               	movlw	0
  4613  001908  6E21               	movwf	___awdiv@sign,c
  4614  00190A  AE1F               	btfss	___awdiv@divisor+1,7,c
  4615  00190C  D006               	goto	l674
  4616  00190E  6C1E               	negf	___awdiv@divisor,c
  4617  001910  1E1F               	comf	___awdiv@divisor+1,f,c
  4618  001912  B0D8               	btfsc	status,0,c
  4619  001914  2A1F               	incf	___awdiv@divisor+1,f,c
  4620  001916  0E01               	movlw	1
  4621  001918  6E21               	movwf	___awdiv@sign,c
  4622  00191A                     l674:
  4623  00191A  AE1D               	btfss	___awdiv@dividend+1,7,c
  4624  00191C  D006               	goto	l675
  4625  00191E  6C1C               	negf	___awdiv@dividend,c
  4626  001920  1E1D               	comf	___awdiv@dividend+1,f,c
  4627  001922  B0D8               	btfsc	status,0,c
  4628  001924  2A1D               	incf	___awdiv@dividend+1,f,c
  4629  001926  0E01               	movlw	1
  4630  001928  1A21               	xorwf	___awdiv@sign,f,c
  4631  00192A                     l675:
  4632  00192A  0E00               	movlw	0
  4633  00192C  6E23               	movwf	___awdiv@quotient+1,c
  4634  00192E  0E00               	movlw	0
  4635  001930  6E22               	movwf	___awdiv@quotient,c
  4636  001932  501E               	movf	___awdiv@divisor,w,c
  4637  001934  101F               	iorwf	___awdiv@divisor+1,w,c
  4638  001936  B4D8               	btfsc	status,2,c
  4639  001938  D01C               	goto	l682
  4640  00193A  0E01               	movlw	1
  4641  00193C  6E20               	movwf	___awdiv@counter,c
  4642  00193E  D004               	goto	l677
  4643  001940  90D8               	bcf	status,0,c
  4644  001942  361E               	rlcf	___awdiv@divisor,f,c
  4645  001944  361F               	rlcf	___awdiv@divisor+1,f,c
  4646  001946  2A20               	incf	___awdiv@counter,f,c
  4647  001948                     l677:
  4648  001948  AE1F               	btfss	___awdiv@divisor+1,7,c
  4649  00194A  D7FA               	goto	l678
  4650  00194C                     u2180:
  4651  00194C  90D8               	bcf	status,0,c
  4652  00194E  3622               	rlcf	___awdiv@quotient,f,c
  4653  001950  3623               	rlcf	___awdiv@quotient+1,f,c
  4654  001952  501E               	movf	___awdiv@divisor,w,c
  4655  001954  5C1C               	subwf	___awdiv@dividend,w,c
  4656  001956  501F               	movf	___awdiv@divisor+1,w,c
  4657  001958  581D               	subwfb	___awdiv@dividend+1,w,c
  4658  00195A  A0D8               	btfss	status,0,c
  4659  00195C  D005               	goto	l681
  4660  00195E  501E               	movf	___awdiv@divisor,w,c
  4661  001960  5E1C               	subwf	___awdiv@dividend,f,c
  4662  001962  501F               	movf	___awdiv@divisor+1,w,c
  4663  001964  5A1D               	subwfb	___awdiv@dividend+1,f,c
  4664  001966  8022               	bsf	___awdiv@quotient,0,c
  4665  001968                     l681:
  4666  001968  90D8               	bcf	status,0,c
  4667  00196A  321F               	rrcf	___awdiv@divisor+1,f,c
  4668  00196C  321E               	rrcf	___awdiv@divisor,f,c
  4669  00196E  2E20               	decfsz	___awdiv@counter,f,c
  4670  001970  D7ED               	goto	u2180
  4671  001972                     l682:
  4672  001972  5021               	movf	___awdiv@sign,w,c
  4673  001974  B4D8               	btfsc	status,2,c
  4674  001976  D004               	goto	l683
  4675  001978  6C22               	negf	___awdiv@quotient,c
  4676  00197A  1E23               	comf	___awdiv@quotient+1,f,c
  4677  00197C  B0D8               	btfsc	status,0,c
  4678  00197E  2A23               	incf	___awdiv@quotient+1,f,c
  4679  001980                     l683:
  4680  001980  C022  F01C         	movff	___awdiv@quotient,?___awdiv
  4681  001984  C023  F01D         	movff	___awdiv@quotient+1,?___awdiv+1
  4682  001988  0012               	return	
  4683  00198A                     __end_of___awdiv:
  4684                           	opt stack 0
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           postinc0	equ	0xFEE
  4692                           wreg	equ	0xFE8
  4693                           indf1	equ	0xFE7
  4694                           postinc1	equ	0xFE6
  4695                           fsr1h	equ	0xFE2
  4696                           fsr1l	equ	0xFE1
  4697                           indf2	equ	0xFDF
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _delay_s *****************
  4705 ;; Defined at:
  4706 ;;		line 156 in file "functions.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  seconds         1    wreg     unsigned char 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  seconds         1   22[COMRAM] unsigned char 
  4711 ;;  i               2   25[COMRAM] unsigned int 
  4712 ;;  cycles          2   23[COMRAM] unsigned int 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4722 ;;      Params:         0       0       0       0
  4723 ;;      Locals:         5       0       0       0
  4724 ;;      Temps:          1       0       0       0
  4725 ;;      Totals:         6       0       0       0
  4726 ;;Total ram usage:        6 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    6
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_main
  4733 ;;		_orientate
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text19
  4738  001C86                     __ptext19:
  4739                           	opt stack 0
  4740  001C86                     _delay_s:
  4741                           	opt stack 23
  4742                           
  4743                           ;incstack = 0
  4744                           ;delay_s@seconds stored from wreg
  4745  001C86  6E17               	movwf	delay_s@seconds,c
  4746                           
  4747                           ;functions.c: 158:     unsigned int cycles = 20 * seconds;
  4748  001C88  5017               	movf	delay_s@seconds,w,c
  4749  001C8A  0D14               	mullw	20
  4750  001C8C  CFF3 F018          	movff	prodl,delay_s@cycles
  4751  001C90  CFF4 F019          	movff	prodh,delay_s@cycles+1
  4752                           
  4753                           ;functions.c: 159:     unsigned int i = 0;
  4754  001C94  0E00               	movlw	0
  4755  001C96  6E1B               	movwf	delay_s@i+1,c
  4756  001C98  0E00               	movlw	0
  4757  001C9A  6E1A               	movwf	delay_s@i,c
  4758                           
  4759                           ;functions.c: 160:     for (i = 0; i < cycles; i++) {
  4760  001C9C  0E00               	movlw	0
  4761  001C9E  6E1B               	movwf	delay_s@i+1,c
  4762  001CA0  0E00               	movlw	0
  4763  001CA2  6E1A               	movwf	delay_s@i,c
  4764  001CA4  D009               	goto	l319
  4765  001CA6                     
  4766                           ;functions.c: 161:         _delay((unsigned long)((50)*(8000000/4000.0)));
  4767  001CA6  0E82               	movlw	130
  4768  001CA8  6E16               	movwf	??_delay_s& (0+255),c
  4769  001CAA  0EDE               	movlw	222
  4770  001CAC                     u3217:
  4771  001CAC  2EE8               	decfsz	wreg,f,c
  4772  001CAE  D7FE               	bra	u3217
  4773  001CB0  2E16               	decfsz	??_delay_s& (0+255),f,c
  4774  001CB2  D7FC               	bra	u3217
  4775                           
  4776                           ;functions.c: 162:     }
  4777  001CB4  4A1A               	infsnz	delay_s@i,f,c
  4778  001CB6  2A1B               	incf	delay_s@i+1,f,c
  4779  001CB8                     l319:
  4780  001CB8  5018               	movf	delay_s@cycles,w,c
  4781  001CBA  5C1A               	subwf	delay_s@i,w,c
  4782  001CBC  5019               	movf	delay_s@cycles+1,w,c
  4783  001CBE  581B               	subwfb	delay_s@i+1,w,c
  4784  001CC0  B0D8               	btfsc	status,0,c
  4785  001CC2  0012               	return	
  4786  001CC4  D7F0               	goto	l320
  4787  001CC6                     __end_of_delay_s:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           postinc0	equ	0xFEE
  4796                           wreg	equ	0xFE8
  4797                           indf1	equ	0xFE7
  4798                           postinc1	equ	0xFE6
  4799                           fsr1h	equ	0xFE2
  4800                           fsr1l	equ	0xFE1
  4801                           indf2	equ	0xFDF
  4802                           postinc2	equ	0xFDE
  4803                           postdec2	equ	0xFDD
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _ir_filter *****************
  4809 ;; Defined at:
  4810 ;;		line 325 in file "functions.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  sensor          1    wreg     unsigned char 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;  sensor          1   36[COMRAM] unsigned char 
  4815 ;;  array           8   39[COMRAM] unsigned int [4]
  4816 ;;  filtered_ir     2   37[COMRAM] unsigned int 
  4817 ;;  i               1   48[COMRAM] unsigned char 
  4818 ;;  same_values_    1   47[COMRAM] unsigned char 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  2   26[COMRAM] unsigned int 
  4821 ;; Registers used:
  4822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4828 ;;      Params:         2       0       0       0
  4829 ;;      Locals:        13       0       0       0
  4830 ;;      Temps:          8       0       0       0
  4831 ;;      Totals:        23       0       0       0
  4832 ;;Total ram usage:       23 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    7
  4835 ;; This function calls:
  4836 ;;		_get_ir
  4837 ;; This function is called by:
  4838 ;;		_main
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text20
  4843  000FA6                     __ptext20:
  4844                           	opt stack 0
  4845  000FA6                     _ir_filter:
  4846                           	opt stack 23
  4847                           
  4848                           ;incstack = 0
  4849                           ;ir_filter@sensor stored from wreg
  4850  000FA6  6E25               	movwf	ir_filter@sensor,c
  4851                           
  4852                           ;functions.c: 326:     unsigned char i = 0;
  4853  000FA8  0E00               	movlw	0
  4854  000FAA  6E31               	movwf	ir_filter@i,c
  4855                           
  4856                           ;functions.c: 327:     unsigned int array[4];;functions.c: 328:     unsigned int filtere
      +                          d_ir = 0;
  4857  000FAC  0E00               	movlw	0
  4858  000FAE  6E27               	movwf	ir_filter@filtered_ir+1,c
  4859  000FB0  0E00               	movlw	0
  4860  000FB2  6E26               	movwf	ir_filter@filtered_ir,c
  4861                           
  4862                           ;functions.c: 329:     unsigned char same_values_flag = 1;
  4863  000FB4  0E01               	movlw	1
  4864  000FB6  6E30               	movwf	ir_filter@same_values_flag,c
  4865                           
  4866                           ;functions.c: 330:     while (i < 4) {
  4867  000FB8  D043               	goto	l354
  4868  000FBA                     
  4869                           ;functions.c: 331:         array[i] = get_ir(sensor);
  4870  000FBA  5025               	movf	ir_filter@sensor,w,c
  4871  000FBC  EC63  F00E         	call	_get_ir
  4872  000FC0  5031               	movf	ir_filter@i,w,c
  4873  000FC2  0D02               	mullw	2
  4874  000FC4  0E28               	movlw	low ir_filter@array
  4875  000FC6  24F3               	addwf	prodl,w,c
  4876  000FC8  6ED9               	movwf	fsr2l,c
  4877  000FCA  0E00               	movlw	high ir_filter@array
  4878  000FCC  20F4               	addwfc	prodh,w,c
  4879  000FCE  6EDA               	movwf	fsr2h,c
  4880  000FD0  C016  FFDE         	movff	?_get_ir,postinc2
  4881  000FD4  C017  FFDD         	movff	?_get_ir+1,postdec2
  4882                           
  4883                           ;functions.c: 334:         if (i > 0) {
  4884  000FD8  5031               	movf	ir_filter@i,w,c
  4885  000FDA  B4D8               	btfsc	status,2,c
  4886  000FDC  D025               	goto	l357
  4887                           
  4888                           ;functions.c: 336:             if (array[i] != array [i - 1]) {
  4889  000FDE  0EFE               	movlw	254
  4890  000FE0  6E1D               	movwf	??_ir_filter& (0+255),c
  4891  000FE2  0EFF               	movlw	255
  4892  000FE4  6E1E               	movwf	(??_ir_filter+1)& (0+255),c
  4893  000FE6  5031               	movf	ir_filter@i,w,c
  4894  000FE8  6E1F               	movwf	(??_ir_filter+2)& (0+255),c
  4895  000FEA  6A20               	clrf	(??_ir_filter+3)& (0+255),c
  4896  000FEC  90D8               	bcf	status,0,c
  4897  000FEE  361F               	rlcf	??_ir_filter+2,f,c
  4898  000FF0  3620               	rlcf	??_ir_filter+3,f,c
  4899  000FF2  501D               	movf	??_ir_filter,w,c
  4900  000FF4  261F               	addwf	??_ir_filter+2,f,c
  4901  000FF6  501E               	movf	??_ir_filter+1,w,c
  4902  000FF8  2220               	addwfc	??_ir_filter+3,f,c
  4903  000FFA  0E28               	movlw	low ir_filter@array
  4904  000FFC  241F               	addwf	??_ir_filter+2,w,c
  4905  000FFE  6ED9               	movwf	fsr2l,c
  4906  001000  0E00               	movlw	high ir_filter@array
  4907  001002  2020               	addwfc	??_ir_filter+3,w,c
  4908  001004  6EDA               	movwf	fsr2h,c
  4909  001006  5031               	movf	ir_filter@i,w,c
  4910  001008  0D02               	mullw	2
  4911  00100A  0E28               	movlw	low ir_filter@array
  4912  00100C  24F3               	addwf	prodl,w,c
  4913  00100E  6EE1               	movwf	fsr1l,c
  4914  001010  0E00               	movlw	high ir_filter@array
  4915  001012  20F4               	addwfc	prodh,w,c
  4916  001014  6EE2               	movwf	fsr1h,c
  4917  001016  50DE               	movf	postinc2,w,c
  4918  001018  18E6               	xorwf	postinc1,w,c
  4919  00101A  E104               	bnz	u2530
  4920  00101C  50DE               	movf	postinc2,w,c
  4921  00101E  18E6               	xorwf	postinc1,w,c
  4922  001020  B4D8               	btfsc	status,2,c
  4923  001022  D002               	goto	l357
  4924  001024                     u2530:
  4925                           
  4926                           ;functions.c: 337:                 same_values_flag = 0;
  4927  001024  0E00               	movlw	0
  4928  001026  6E30               	movwf	ir_filter@same_values_flag,c
  4929  001028                     l357:
  4930                           
  4931                           ;functions.c: 340:         _delay((unsigned long)((250)*(8000000/4000.0)));
  4932                           
  4933                           ;functions.c: 339:         }
  4934  001028  0E03               	movlw	3
  4935  00102A  6E1E               	movwf	(??_ir_filter+1)& (0+255),c
  4936  00102C  0E8A               	movlw	138
  4937  00102E  6E1D               	movwf	??_ir_filter& (0+255),c
  4938  001030  0E56               	movlw	86
  4939  001032                     u3227:
  4940  001032  2EE8               	decfsz	wreg,f,c
  4941  001034  D7FE               	bra	u3227
  4942  001036  2E1D               	decfsz	??_ir_filter& (0+255),f,c
  4943  001038  D7FC               	bra	u3227
  4944  00103A  2E1E               	decfsz	(??_ir_filter+1)& (0+255),f,c
  4945  00103C  D7FA               	bra	u3227
  4946                           
  4947                           ;functions.c: 341:         i++;
  4948  00103E  2A31               	incf	ir_filter@i,f,c
  4949  001040                     l354:
  4950                           
  4951                           ;functions.c: 330:     while (i < 4) {
  4952  001040  0E03               	movlw	3
  4953  001042  6431               	cpfsgt	ir_filter@i,c
  4954  001044  D7BA               	goto	l355
  4955                           
  4956                           ;functions.c: 343:     if (same_values_flag == 1) {
  4957  001046  0430               	decf	ir_filter@same_values_flag,w,c
  4958  001048  A4D8               	btfss	status,2,c
  4959  00104A  D020               	goto	l359
  4960                           
  4961                           ;functions.c: 348:         if (array[i] > 45000) {
  4962  00104C  5031               	movf	ir_filter@i,w,c
  4963  00104E  0D02               	mullw	2
  4964  001050  0E28               	movlw	low ir_filter@array
  4965  001052  24F3               	addwf	prodl,w,c
  4966  001054  6ED9               	movwf	fsr2l,c
  4967  001056  0E00               	movlw	high ir_filter@array
  4968  001058  20F4               	addwfc	prodh,w,c
  4969  00105A  6EDA               	movwf	fsr2h,c
  4970  00105C  0EC9               	movlw	201
  4971  00105E  5CDE               	subwf	postinc2,w,c
  4972  001060  0EAF               	movlw	175
  4973  001062  58DE               	subwfb	postinc2,w,c
  4974  001064  A0D8               	btfss	status,0,c
  4975  001066  D00D               	goto	l360
  4976                           
  4977                           ;functions.c: 349:             return array[i];
  4978  001068  5031               	movf	ir_filter@i,w,c
  4979  00106A  0D02               	mullw	2
  4980  00106C  0E28               	movlw	low ir_filter@array
  4981  00106E  24F3               	addwf	prodl,w,c
  4982  001070  6ED9               	movwf	fsr2l,c
  4983  001072  0E00               	movlw	high ir_filter@array
  4984  001074  20F4               	addwfc	prodh,w,c
  4985  001076  6EDA               	movwf	fsr2h,c
  4986  001078  CFDE F01B          	movff	postinc2,?_ir_filter
  4987  00107C  CFDD F01C          	movff	postdec2,?_ir_filter+1
  4988  001080  0012               	return	
  4989  001082                     l360:
  4990                           
  4991                           ;functions.c: 351:             return 0;
  4992  001082  0E00               	movlw	0
  4993  001084  6E1C               	movwf	?_ir_filter+1,c
  4994  001086  0E00               	movlw	0
  4995  001088  6E1B               	movwf	?_ir_filter,c
  4996  00108A  0012               	return	
  4997  00108C                     l359:
  4998                           
  4999                           ;functions.c: 355:         i = 0;
  5000  00108C  0E00               	movlw	0
  5001  00108E  6E31               	movwf	ir_filter@i,c
  5002                           
  5003                           ;functions.c: 356:         while (i < 4) {
  5004  001090  D017               	goto	l364
  5005  001092                     
  5006                           ;functions.c: 357:             filtered_ir += (array[i] / 4);
  5007  001092  5031               	movf	ir_filter@i,w,c
  5008  001094  0D02               	mullw	2
  5009  001096  0E28               	movlw	low ir_filter@array
  5010  001098  24F3               	addwf	prodl,w,c
  5011  00109A  6ED9               	movwf	fsr2l,c
  5012  00109C  0E00               	movlw	high ir_filter@array
  5013  00109E  20F4               	addwfc	prodh,w,c
  5014  0010A0  6EDA               	movwf	fsr2h,c
  5015  0010A2  CFDE F01D          	movff	postinc2,??_ir_filter
  5016  0010A6  CFDD F01E          	movff	postdec2,??_ir_filter+1
  5017  0010AA  90D8               	bcf	status,0,c
  5018  0010AC  321E               	rrcf	??_ir_filter+1,f,c
  5019  0010AE  321D               	rrcf	??_ir_filter,f,c
  5020  0010B0  90D8               	bcf	status,0,c
  5021  0010B2  321E               	rrcf	??_ir_filter+1,f,c
  5022  0010B4  321D               	rrcf	??_ir_filter,f,c
  5023  0010B6  501D               	movf	??_ir_filter,w,c
  5024  0010B8  2626               	addwf	ir_filter@filtered_ir,f,c
  5025  0010BA  501E               	movf	??_ir_filter+1,w,c
  5026  0010BC  2227               	addwfc	ir_filter@filtered_ir+1,f,c
  5027                           
  5028                           ;functions.c: 358:             i++;
  5029  0010BE  2A31               	incf	ir_filter@i,f,c
  5030  0010C0                     l364:
  5031                           
  5032                           ;functions.c: 356:         while (i < 4) {
  5033  0010C0  0E03               	movlw	3
  5034  0010C2  6431               	cpfsgt	ir_filter@i,c
  5035  0010C4  D7E6               	goto	l365
  5036                           
  5037                           ;functions.c: 361:     return filtered_ir;
  5038                           
  5039                           ;functions.c: 360:     }
  5040  0010C6  C026  F01B         	movff	ir_filter@filtered_ir,?_ir_filter
  5041  0010CA  C027  F01C         	movff	ir_filter@filtered_ir+1,?_ir_filter+1
  5042  0010CE  0012               	return		;funcret
  5043  0010D0                     __end_of_ir_filter:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           indf1	equ	0xFE7
  5054                           postinc1	equ	0xFE6
  5055                           fsr1h	equ	0xFE2
  5056                           fsr1l	equ	0xFE1
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           postdec2	equ	0xFDD
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _get_ir *****************
  5065 ;; Defined at:
  5066 ;;		line 290 in file "functions.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  sensor          1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  sensor          1   23[COMRAM] unsigned char 
  5071 ;;  ir_value        2   24[COMRAM] unsigned int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  2   21[COMRAM] unsigned int 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5081 ;;      Params:         2       0       0       0
  5082 ;;      Locals:         3       0       0       0
  5083 ;;      Temps:          0       0       0       0
  5084 ;;      Totals:         5       0       0       0
  5085 ;;Total ram usage:        5 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    6
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;;		_ir_filter
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text21
  5097  001CC6                     __ptext21:
  5098                           	opt stack 0
  5099  001CC6                     _get_ir:
  5100                           	opt stack 23
  5101                           
  5102                           ;incstack = 0
  5103                           ;get_ir@sensor stored from wreg
  5104  001CC6  6E18               	movwf	get_ir@sensor,c
  5105                           
  5106                           ;functions.c: 293:     unsigned int ir_value = 0;
  5107  001CC8  0E00               	movlw	0
  5108  001CCA  6E1A               	movwf	get_ir@ir_value+1,c
  5109  001CCC  0E00               	movlw	0
  5110  001CCE  6E19               	movwf	get_ir@ir_value,c
  5111                           
  5112                           ;functions.c: 294:     if (sensor == 0) {
  5113  001CD0  5018               	movf	get_ir@sensor,w,c
  5114  001CD2  A4D8               	btfss	status,2,c
  5115  001CD4  D00A               	goto	l348
  5116                           
  5117                           ;functions.c: 295:         ir_value = CAP2BUFL;
  5118  001CD6  CF66 F019          	movff	3942,get_ir@ir_value	;volatile
  5119  001CDA  6A1A               	clrf	get_ir@ir_value+1,c
  5120                           
  5121                           ;functions.c: 296:         ir_value += ((unsigned int) CAP2BUFH << 8);
  5122  001CDC  5067               	movf	3943,w,c	;volatile
  5123  001CDE  261A               	addwf	get_ir@ir_value+1,f,c
  5124                           
  5125                           ;functions.c: 297:         return ir_value;
  5126  001CE0  C019  F016         	movff	get_ir@ir_value,?_get_ir
  5127  001CE4  C01A  F017         	movff	get_ir@ir_value+1,?_get_ir+1
  5128                           
  5129                           ;functions.c: 298:     } else if (sensor == 1) {
  5130  001CE8  0012               	return	
  5131  001CEA                     l348:
  5132  001CEA  0418               	decf	get_ir@sensor,w,c
  5133  001CEC  A4D8               	btfss	status,2,c
  5134  001CEE  0012               	return	
  5135                           
  5136                           ;functions.c: 299:         ir_value = CAP3BUFL;
  5137  001CF0  CF64 F019          	movff	3940,get_ir@ir_value	;volatile
  5138  001CF4  6A1A               	clrf	get_ir@ir_value+1,c
  5139                           
  5140                           ;functions.c: 300:         ir_value += ((unsigned int) CAP3BUFH << 8);
  5141  001CF6  5065               	movf	3941,w,c	;volatile
  5142  001CF8  261A               	addwf	get_ir@ir_value+1,f,c
  5143                           
  5144                           ;functions.c: 301:         return ir_value;
  5145  001CFA  C019  F016         	movff	get_ir@ir_value,?_get_ir
  5146  001CFE  C01A  F017         	movff	get_ir@ir_value+1,?_get_ir+1
  5147                           
  5148                           ;functions.c: 302:     }
  5149  001D02  0012               	return	
  5150  001D04                     __end_of_get_ir:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           indf1	equ	0xFE7
  5161                           postinc1	equ	0xFE6
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _ir_difference *****************
  5172 ;; Defined at:
  5173 ;;		line 425 in file "functions.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  cont            2   21[COMRAM] PTR struct Control
  5176 ;;		 -> main@cont(252), 
  5177 ;;  motorL          2   23[COMRAM] PTR struct DC_motor
  5178 ;;		 -> main@motorL(9), 
  5179 ;;  motorR          2   25[COMRAM] PTR struct DC_motor
  5180 ;;		 -> main@motorR(9), 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5192 ;;      Params:         6       0       0       0
  5193 ;;      Locals:         0       0       0       0
  5194 ;;      Temps:          4       0       0       0
  5195 ;;      Totals:        10       0       0       0
  5196 ;;Total ram usage:       10 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    6
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text22
  5207  0010D0                     __ptext22:
  5208                           	opt stack 0
  5209  0010D0                     _ir_difference:
  5210                           	opt stack 24
  5211                           
  5212                           ;functions.c: 427:     if (cont->ir_left > cont->ir_right) {
  5213                           
  5214                           ;incstack = 0
  5215  0010D0  C016  FFD9         	movff	ir_difference@cont,fsr2l
  5216  0010D4  C017  FFDA         	movff	ir_difference@cont+1,fsr2h
  5217  0010D8  EE10 F002          	lfsr	1,2
  5218  0010DC  5016               	movf	ir_difference@cont,w,c
  5219  0010DE  26E1               	addwf	fsr1l,f,c
  5220  0010E0  5017               	movf	ir_difference@cont+1,w,c
  5221  0010E2  22E2               	addwfc	fsr1h,f,c
  5222  0010E4  50DE               	movf	postinc2,w,c
  5223  0010E6  5CE6               	subwf	postinc1,w,c
  5224  0010E8  50DE               	movf	postinc2,w,c
  5225  0010EA  58E6               	subwfb	postinc1,w,c
  5226  0010EC  B0D8               	btfsc	status,0,c
  5227  0010EE  D02D               	goto	l375
  5228                           
  5229                           ;functions.c: 429:         cont->ir_diff = cont->ir_left - cont->ir_right;
  5230  0010F0  C016  FFD9         	movff	ir_difference@cont,fsr2l
  5231  0010F4  C017  FFDA         	movff	ir_difference@cont+1,fsr2h
  5232  0010F8  CFDE F01C          	movff	postinc2,??_ir_difference
  5233  0010FC  CFDD F01D          	movff	postdec2,??_ir_difference+1
  5234  001100  EE20 F002          	lfsr	2,2
  5235  001104  5016               	movf	ir_difference@cont,w,c
  5236  001106  26D9               	addwf	fsr2l,f,c
  5237  001108  5017               	movf	ir_difference@cont+1,w,c
  5238  00110A  22DA               	addwfc	fsr2h,f,c
  5239  00110C  CFDE F01E          	movff	postinc2,??_ir_difference+2
  5240  001110  CFDD F01F          	movff	postdec2,??_ir_difference+3
  5241  001114  1E1E               	comf	??_ir_difference+2,f,c
  5242  001116  1E1F               	comf	??_ir_difference+3,f,c
  5243  001118  4A1E               	infsnz	??_ir_difference+2,f,c
  5244  00111A  2A1F               	incf	??_ir_difference+3,f,c
  5245  00111C  501C               	movf	??_ir_difference,w,c
  5246  00111E  261E               	addwf	??_ir_difference+2,f,c
  5247  001120  501D               	movf	??_ir_difference+1,w,c
  5248  001122  221F               	addwfc	??_ir_difference+3,f,c
  5249  001124  EE20 F004          	lfsr	2,4
  5250  001128  5016               	movf	ir_difference@cont,w,c
  5251  00112A  26D9               	addwf	fsr2l,f,c
  5252  00112C  5017               	movf	ir_difference@cont+1,w,c
  5253  00112E  22DA               	addwfc	fsr2h,f,c
  5254  001130  C01E  FFDE         	movff	??_ir_difference+2,postinc2
  5255  001134  C01F  FFDD         	movff	??_ir_difference+3,postdec2
  5256                           
  5257                           ;functions.c: 430:         cont->turn_direction = 0;
  5258  001138  EE20 F006          	lfsr	2,6
  5259  00113C  5016               	movf	ir_difference@cont,w,c
  5260  00113E  26D9               	addwf	fsr2l,f,c
  5261  001140  5017               	movf	ir_difference@cont+1,w,c
  5262  001142  22DA               	addwfc	fsr2h,f,c
  5263  001144  0E00               	movlw	0
  5264  001146  6EDF               	movwf	indf2,c
  5265                           
  5266                           ;functions.c: 431:     } else if (cont->ir_right > cont->ir_left) {
  5267  001148  0012               	return	
  5268  00114A                     l375:
  5269  00114A  EE20 F002          	lfsr	2,2
  5270  00114E  5016               	movf	ir_difference@cont,w,c
  5271  001150  26D9               	addwf	fsr2l,f,c
  5272  001152  5017               	movf	ir_difference@cont+1,w,c
  5273  001154  22DA               	addwfc	fsr2h,f,c
  5274  001156  C016  FFE1         	movff	ir_difference@cont,fsr1l
  5275  00115A  C017  FFE2         	movff	ir_difference@cont+1,fsr1h
  5276  00115E  50DE               	movf	postinc2,w,c
  5277  001160  5CE6               	subwf	postinc1,w,c
  5278  001162  50DE               	movf	postinc2,w,c
  5279  001164  58E6               	subwfb	postinc1,w,c
  5280  001166  B0D8               	btfsc	status,0,c
  5281  001168  0012               	return	
  5282                           
  5283                           ;functions.c: 433:         cont->ir_diff = cont->ir_right - cont->ir_left;
  5284  00116A  EE20 F002          	lfsr	2,2
  5285  00116E  5016               	movf	ir_difference@cont,w,c
  5286  001170  26D9               	addwf	fsr2l,f,c
  5287  001172  5017               	movf	ir_difference@cont+1,w,c
  5288  001174  22DA               	addwfc	fsr2h,f,c
  5289  001176  CFDE F01C          	movff	postinc2,??_ir_difference
  5290  00117A  CFDD F01D          	movff	postdec2,??_ir_difference+1
  5291  00117E  C016  FFD9         	movff	ir_difference@cont,fsr2l
  5292  001182  C017  FFDA         	movff	ir_difference@cont+1,fsr2h
  5293  001186  CFDE F01E          	movff	postinc2,??_ir_difference+2
  5294  00118A  CFDD F01F          	movff	postdec2,??_ir_difference+3
  5295  00118E  1E1E               	comf	??_ir_difference+2,f,c
  5296  001190  1E1F               	comf	??_ir_difference+3,f,c
  5297  001192  4A1E               	infsnz	??_ir_difference+2,f,c
  5298  001194  2A1F               	incf	??_ir_difference+3,f,c
  5299  001196  501C               	movf	??_ir_difference,w,c
  5300  001198  261E               	addwf	??_ir_difference+2,f,c
  5301  00119A  501D               	movf	??_ir_difference+1,w,c
  5302  00119C  221F               	addwfc	??_ir_difference+3,f,c
  5303  00119E  EE20 F004          	lfsr	2,4
  5304  0011A2  5016               	movf	ir_difference@cont,w,c
  5305  0011A4  26D9               	addwf	fsr2l,f,c
  5306  0011A6  5017               	movf	ir_difference@cont+1,w,c
  5307  0011A8  22DA               	addwfc	fsr2h,f,c
  5308  0011AA  C01E  FFDE         	movff	??_ir_difference+2,postinc2
  5309  0011AE  C01F  FFDD         	movff	??_ir_difference+3,postdec2
  5310                           
  5311                           ;functions.c: 434:         cont->turn_direction = 1;
  5312  0011B2  EE20 F006          	lfsr	2,6
  5313  0011B6  5016               	movf	ir_difference@cont,w,c
  5314  0011B8  26D9               	addwf	fsr2l,f,c
  5315  0011BA  5017               	movf	ir_difference@cont+1,w,c
  5316  0011BC  22DA               	addwfc	fsr2h,f,c
  5317  0011BE  0E01               	movlw	1
  5318  0011C0  6EDF               	movwf	indf2,c
  5319                           
  5320                           ;functions.c: 435:     }
  5321  0011C2  0012               	return	
  5322  0011C4                     __end_of_ir_difference:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           indf1	equ	0xFE7
  5333                           postinc1	equ	0xFE6
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _init_serial *****************
  5344 ;; Defined at:
  5345 ;;		line 120 in file "functions.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, status,2
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5359 ;;      Params:         0       0       0       0
  5360 ;;      Locals:         0       0       0       0
  5361 ;;      Temps:          0       0       0       0
  5362 ;;      Totals:         0       0       0       0
  5363 ;;Total ram usage:        0 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    6
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		_main
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text23
  5374  001E9C                     __ptext23:
  5375                           	opt stack 0
  5376  001E9C                     _init_serial:
  5377                           	opt stack 24
  5378                           
  5379                           ;functions.c: 122:     TRISCbits.RC7 = 1;
  5380                           
  5381                           ;incstack = 0
  5382  001E9C  8E94               	bsf	3988,7,c	;volatile
  5383                           
  5384                           ;functions.c: 123:     TRISCbits.RC6 = 1;
  5385  001E9E  8C94               	bsf	3988,6,c	;volatile
  5386                           
  5387                           ;functions.c: 125:     SPBRG = 207;
  5388  001EA0  0ECF               	movlw	207
  5389  001EA2  6EAF               	movwf	4015,c	;volatile
  5390                           
  5391                           ;functions.c: 126:     SPBRGH = 0;
  5392  001EA4  0E00               	movlw	0
  5393  001EA6  6EB0               	movwf	4016,c	;volatile
  5394                           
  5395                           ;functions.c: 127:     BAUDCONbits.BRG16 = 1;
  5396  001EA8  86AA               	bsf	4010,3,c	;volatile
  5397                           
  5398                           ;functions.c: 128:     TXSTAbits.BRGH = 1;
  5399  001EAA  84AC               	bsf	4012,2,c	;volatile
  5400                           
  5401                           ;functions.c: 129:     RCSTAbits.CREN = 1;
  5402  001EAC  88AB               	bsf	4011,4,c	;volatile
  5403                           
  5404                           ;functions.c: 130:     RCSTAbits.SPEN = 1;
  5405  001EAE  8EAB               	bsf	4011,7,c	;volatile
  5406                           
  5407                           ;functions.c: 131:     TXSTAbits.TXEN = 1;
  5408  001EB0  8AAC               	bsf	4012,5,c	;volatile
  5409  001EB2  0012               	return		;funcret
  5410  001EB4                     __end_of_init_serial:
  5411                           	opt stack 0
  5412                           tblptru	equ	0xFF8
  5413                           tblptrh	equ	0xFF7
  5414                           tblptrl	equ	0xFF6
  5415                           tablat	equ	0xFF5
  5416                           prodh	equ	0xFF4
  5417                           prodl	equ	0xFF3
  5418                           postinc0	equ	0xFEE
  5419                           wreg	equ	0xFE8
  5420                           indf1	equ	0xFE7
  5421                           postinc1	equ	0xFE6
  5422                           fsr1h	equ	0xFE2
  5423                           fsr1l	equ	0xFE1
  5424                           indf2	equ	0xFDF
  5425                           postinc2	equ	0xFDE
  5426                           postdec2	equ	0xFDD
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function _init_pwm *****************
  5432 ;; Defined at:
  5433 ;;		line 47 in file "dc_motor_funct.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;  PWMperiod       2   21[COMRAM] int 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5447 ;;      Params:         2       0       0       0
  5448 ;;      Locals:         0       0       0       0
  5449 ;;      Temps:          0       0       0       0
  5450 ;;      Totals:         2       0       0       0
  5451 ;;Total ram usage:        2 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    6
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text24
  5462  001E2C                     __ptext24:
  5463                           	opt stack 0
  5464  001E2C                     _init_pwm:
  5465                           	opt stack 24
  5466                           
  5467                           ;dc_motor_funct.c: 50:     TRISBbits.RB0 = 0;
  5468                           
  5469                           ;incstack = 0
  5470  001E2C  9093               	bcf	3987,0,c	;volatile
  5471                           
  5472                           ;dc_motor_funct.c: 51:     TRISBbits.RB2 = 0;
  5473  001E2E  9493               	bcf	3987,2,c	;volatile
  5474                           
  5475                           ;dc_motor_funct.c: 53:     LATBbits.LATB0 = 0;
  5476  001E30  908A               	bcf	3978,0,c	;volatile
  5477                           
  5478                           ;dc_motor_funct.c: 54:     LATBbits.LATB2 = 0;
  5479  001E32  948A               	bcf	3978,2,c	;volatile
  5480                           
  5481                           ;dc_motor_funct.c: 57:     PTCON0 = 0b00000000;
  5482  001E34  0E00               	movlw	0
  5483  001E36  6E7F               	movwf	3967,c	;volatile
  5484                           
  5485                           ;dc_motor_funct.c: 58:     PTCON1 = 0b10000000;
  5486  001E38  0E80               	movlw	128
  5487  001E3A  6E7E               	movwf	3966,c	;volatile
  5488                           
  5489                           ;dc_motor_funct.c: 59:     PWMCON0 = 0b01101111;
  5490  001E3C  0E6F               	movlw	111
  5491  001E3E  6E6F               	movwf	3951,c	;volatile
  5492                           
  5493                           ;dc_motor_funct.c: 60:     PWMCON1 = 0x00;
  5494  001E40  0E00               	movlw	0
  5495  001E42  6E6E               	movwf	3950,c	;volatile
  5496                           
  5497                           ;dc_motor_funct.c: 66:     PTPERL = 0b11000111;
  5498  001E44  0EC7               	movlw	199
  5499  001E46  6E7B               	movwf	3963,c	;volatile
  5500                           
  5501                           ;dc_motor_funct.c: 67:     PTPERH = 0b0;
  5502  001E48  0E00               	movlw	0
  5503  001E4A  6E7A               	movwf	3962,c	;volatile
  5504  001E4C  0012               	return		;funcret
  5505  001E4E                     __end_of_init_pwm:
  5506                           	opt stack 0
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           indf1	equ	0xFE7
  5516                           postinc1	equ	0xFE6
  5517                           fsr1h	equ	0xFE2
  5518                           fsr1l	equ	0xFE1
  5519                           indf2	equ	0xFDF
  5520                           postinc2	equ	0xFDE
  5521                           postdec2	equ	0xFDD
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _init_lcd *****************
  5527 ;; Defined at:
  5528 ;;		line 139 in file "lcd_funct.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;		None
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5542 ;;      Params:         0       0       0       0
  5543 ;;      Locals:         0       0       0       0
  5544 ;;      Temps:          1       0       0       0
  5545 ;;      Totals:         1       0       0       0
  5546 ;;Total ram usage:        1 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    9
  5549 ;; This function calls:
  5550 ;;		_lcd_out
  5551 ;;		_send_lcd
  5552 ;; This function is called by:
  5553 ;;		_main
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text25
  5558  0016B2                     __ptext25:
  5559                           	opt stack 0
  5560  0016B2                     _init_lcd:
  5561                           	opt stack 21
  5562                           
  5563                           ;lcd_funct.c: 142:     LATCbits.LATC0 = 0;
  5564                           
  5565                           ;incstack = 0
  5566  0016B2  908B               	bcf	3979,0,c	;volatile
  5567                           
  5568                           ;lcd_funct.c: 143:     LATCbits.LATC1 = 0;
  5569  0016B4  928B               	bcf	3979,1,c	;volatile
  5570                           
  5571                           ;lcd_funct.c: 144:     LATCbits.LATC2 = 0;
  5572  0016B6  948B               	bcf	3979,2,c	;volatile
  5573                           
  5574                           ;lcd_funct.c: 145:     LATDbits.LATD0 = 0;
  5575  0016B8  908C               	bcf	3980,0,c	;volatile
  5576                           
  5577                           ;lcd_funct.c: 146:     LATDbits.LATD1 = 0;
  5578  0016BA  928C               	bcf	3980,1,c	;volatile
  5579                           
  5580                           ;lcd_funct.c: 147:     LATAbits.LATA6 = 0;
  5581  0016BC  9C89               	bcf	3977,6,c	;volatile
  5582                           
  5583                           ;lcd_funct.c: 150:     TRISC = 0;
  5584  0016BE  0E00               	movlw	0
  5585  0016C0  6E94               	movwf	3988,c	;volatile
  5586                           
  5587                           ;lcd_funct.c: 151:     TRISD = 0;
  5588  0016C2  0E00               	movlw	0
  5589  0016C4  6E95               	movwf	3989,c	;volatile
  5590                           
  5591                           ;lcd_funct.c: 152:     TRISA = 0;
  5592  0016C6  0E00               	movlw	0
  5593  0016C8  6E92               	movwf	3986,c	;volatile
  5594                           
  5595                           ;lcd_funct.c: 153:     TRISCbits.RC0 = 0;
  5596  0016CA  9094               	bcf	3988,0,c	;volatile
  5597                           
  5598                           ;lcd_funct.c: 154:     TRISCbits.RC1 = 0;
  5599  0016CC  9294               	bcf	3988,1,c	;volatile
  5600                           
  5601                           ;lcd_funct.c: 155:     TRISCbits.RC2 = 0;
  5602  0016CE  9494               	bcf	3988,2,c	;volatile
  5603                           
  5604                           ;lcd_funct.c: 156:     TRISDbits.RD0 = 0;
  5605  0016D0  9095               	bcf	3989,0,c	;volatile
  5606                           
  5607                           ;lcd_funct.c: 157:     TRISDbits.RD1 = 0;
  5608  0016D2  9295               	bcf	3989,1,c	;volatile
  5609                           
  5610                           ;lcd_funct.c: 158:     TRISAbits.RA6 = 0;
  5611  0016D4  9C92               	bcf	3986,6,c	;volatile
  5612                           
  5613                           ;lcd_funct.c: 161:     _delay((unsigned long)((15)*(8000000/4000000.0)));
  5614  0016D6  0E0A               	movlw	10
  5615  0016D8                     u3237:
  5616  0016D8  2EE8               	decfsz	wreg,f,c
  5617  0016DA  D7FE               	bra	u3237
  5618                           
  5619                           ;lcd_funct.c: 163:     lcd_out(3);
  5620  0016DC  0E03               	movlw	3
  5621  0016DE  ECC5  F00C         	call	_lcd_out
  5622                           
  5623                           ;lcd_funct.c: 164:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  5624  0016E2  0E03               	movlw	3
  5625  0016E4                     u3247:
  5626  0016E4  2EE8               	decfsz	wreg,f,c
  5627  0016E6  D7FE               	bra	u3247
  5628  0016E8  F000               	nop	
  5629                           
  5630                           ;lcd_funct.c: 166:     lcd_out(3);
  5631  0016EA  0E03               	movlw	3
  5632  0016EC  ECC5  F00C         	call	_lcd_out
  5633                           
  5634                           ;lcd_funct.c: 167:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  5635  0016F0  0E85               	movlw	133
  5636  0016F2                     u3257:
  5637  0016F2  2EE8               	decfsz	wreg,f,c
  5638  0016F4  D7FE               	bra	u3257
  5639  0016F6  F000               	nop	
  5640                           
  5641                           ;lcd_funct.c: 169:     lcd_out(3);
  5642  0016F8  0E03               	movlw	3
  5643  0016FA  ECC5  F00C         	call	_lcd_out
  5644                           
  5645                           ;lcd_funct.c: 170:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  5646  0016FE  0E21               	movlw	33
  5647  001700                     u3267:
  5648  001700  2EE8               	decfsz	wreg,f,c
  5649  001702  D7FE               	bra	u3267
  5650  001704  F000               	nop	
  5651                           
  5652                           ;lcd_funct.c: 172:     lcd_out(2);
  5653  001706  0E02               	movlw	2
  5654  001708  ECC5  F00C         	call	_lcd_out
  5655                           
  5656                           ;lcd_funct.c: 174:     send_lcd(40, 0);
  5657  00170C  0E00               	movlw	0
  5658  00170E  6E18               	movwf	send_lcd@type,c
  5659  001710  0E28               	movlw	40
  5660  001712  ECE1  F00E         	call	_send_lcd
  5661                           
  5662                           ;lcd_funct.c: 175:     _delay((unsigned long)((80)*(8000000/4000000.0)));
  5663  001716  0E35               	movlw	53
  5664  001718                     u3277:
  5665  001718  2EE8               	decfsz	wreg,f,c
  5666  00171A  D7FE               	bra	u3277
  5667  00171C  F000               	nop	
  5668                           
  5669                           ;lcd_funct.c: 177:     send_lcd(1, 0);
  5670  00171E  0E00               	movlw	0
  5671  001720  6E18               	movwf	send_lcd@type,c
  5672  001722  0E01               	movlw	1
  5673  001724  ECE1  F00E         	call	_send_lcd
  5674                           
  5675                           ;lcd_funct.c: 178:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5676  001728  0E0D               	movlw	13
  5677  00172A  6E1A               	movwf	??_init_lcd& (0+255),c
  5678  00172C  0EFC               	movlw	252
  5679  00172E                     u3287:
  5680  00172E  2EE8               	decfsz	wreg,f,c
  5681  001730  D7FE               	bra	u3287
  5682  001732  2E1A               	decfsz	??_init_lcd& (0+255),f,c
  5683  001734  D7FC               	bra	u3287
  5684                           
  5685                           ;lcd_funct.c: 180:     send_lcd(6, 0);
  5686  001736  0E00               	movlw	0
  5687  001738  6E18               	movwf	send_lcd@type,c
  5688  00173A  0E06               	movlw	6
  5689  00173C  ECE1  F00E         	call	_send_lcd
  5690                           
  5691                           ;lcd_funct.c: 181:     _delay((unsigned long)((80)*(8000000/4000000.0)));
  5692  001740  0E35               	movlw	53
  5693  001742                     u3297:
  5694  001742  2EE8               	decfsz	wreg,f,c
  5695  001744  D7FE               	bra	u3297
  5696  001746  F000               	nop	
  5697                           
  5698                           ;lcd_funct.c: 183:     send_lcd(14, 0);
  5699  001748  0E00               	movlw	0
  5700  00174A  6E18               	movwf	send_lcd@type,c
  5701  00174C  0E0E               	movlw	14
  5702  00174E  ECE1  F00E         	call	_send_lcd
  5703                           
  5704                           ;lcd_funct.c: 184:     _delay((unsigned long)((80)*(8000000/4000000.0)));
  5705  001752  0E35               	movlw	53
  5706  001754                     u3307:
  5707  001754  2EE8               	decfsz	wreg,f,c
  5708  001756  D7FE               	bra	u3307
  5709  001758  F000               	nop	
  5710  00175A  0012               	return		;funcret
  5711  00175C                     __end_of_init_lcd:
  5712                           	opt stack 0
  5713                           tblptru	equ	0xFF8
  5714                           tblptrh	equ	0xFF7
  5715                           tblptrl	equ	0xFF6
  5716                           tablat	equ	0xFF5
  5717                           prodh	equ	0xFF4
  5718                           prodl	equ	0xFF3
  5719                           postinc0	equ	0xFEE
  5720                           wreg	equ	0xFE8
  5721                           indf1	equ	0xFE7
  5722                           postinc1	equ	0xFE6
  5723                           fsr1h	equ	0xFE2
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _init_ir *****************
  5733 ;; Defined at:
  5734 ;;		line 257 in file "functions.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, status,2
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5748 ;;      Params:         0       0       0       0
  5749 ;;      Locals:         0       0       0       0
  5750 ;;      Temps:          0       0       0       0
  5751 ;;      Totals:         0       0       0       0
  5752 ;;Total ram usage:        0 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    6
  5755 ;; This function calls:
  5756 ;;		Nothing
  5757 ;; This function is called by:
  5758 ;;		_main
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text26
  5763  001D04                     __ptext26:
  5764                           	opt stack 0
  5765  001D04                     _init_ir:
  5766                           	opt stack 24
  5767                           
  5768                           ;functions.c: 258:     ANSEL0 = 0;
  5769                           
  5770                           ;incstack = 0
  5771  001D04  0E00               	movlw	0
  5772  001D06  6EB8               	movwf	4024,c	;volatile
  5773                           
  5774                           ;functions.c: 259:     QEICON = 0;
  5775  001D08  0E00               	movlw	0
  5776  001D0A  6EB6               	movwf	4022,c	;volatile
  5777                           
  5778                           ;functions.c: 260:     DFLTCON = 0b00110110;
  5779  001D0C  0E36               	movlw	54
  5780  001D0E  6E60               	movwf	3936,c	;volatile
  5781                           
  5782                           ;functions.c: 261:     TRISAbits.RA3 = 1;
  5783  001D10  8692               	bsf	3986,3,c	;volatile
  5784                           
  5785                           ;functions.c: 262:     TRISAbits.RA4 = 1;
  5786  001D12  8892               	bsf	3986,4,c	;volatile
  5787                           
  5788                           ;functions.c: 263:     CAP2CONbits.CAP2M = 0b0110;
  5789  001D14  5062               	movf	3938,w,c	;volatile
  5790  001D16  0BF0               	andlw	-16
  5791  001D18  0906               	iorlw	6
  5792  001D1A  6E62               	movwf	3938,c	;volatile
  5793                           
  5794                           ;functions.c: 264:     CAP3CONbits.CAP3M = 0b0110;
  5795  001D1C  5061               	movf	3937,w,c	;volatile
  5796  001D1E  0BF0               	andlw	-16
  5797  001D20  0906               	iorlw	6
  5798  001D22  6E61               	movwf	3937,c	;volatile
  5799                           
  5800                           ;functions.c: 267:     T5CONbits.TMR5ON = 1;
  5801  001D24  80B7               	bsf	4023,0,c	;volatile
  5802                           
  5803                           ;functions.c: 268:     T5CONbits.T5PS = 0b01;
  5804  001D26  50B7               	movf	4023,w,c	;volatile
  5805  001D28  0BE7               	andlw	-25
  5806  001D2A  0908               	iorlw	8
  5807  001D2C  6EB7               	movwf	4023,c	;volatile
  5808                           
  5809                           ;functions.c: 269:     T5CONbits.RESEN = 0;
  5810  001D2E  9CB7               	bcf	4023,6,c	;volatile
  5811                           
  5812                           ;functions.c: 270:     T5CONbits.T5MOD = 0;
  5813  001D30  9AB7               	bcf	4023,5,c	;volatile
  5814                           
  5815                           ;functions.c: 271:     T5CONbits.T5SEN = 0;
  5816  001D32  9EB7               	bcf	4023,7,c	;volatile
  5817                           
  5818                           ;functions.c: 272:     T5CONbits.TMR5CS = 0;
  5819  001D34  92B7               	bcf	4023,1,c	;volatile
  5820                           
  5821                           ;functions.c: 273:     PR5H = 0xFF;
  5822  001D36  6891               	setf	3985,c	;volatile
  5823                           
  5824                           ;functions.c: 274:     PR5L = 0xFF;
  5825  001D38  6890               	setf	3984,c	;volatile
  5826  001D3A  0012               	return		;funcret
  5827  001D3C                     __end_of_init_ir:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           indf1	equ	0xFE7
  5838                           postinc1	equ	0xFE6
  5839                           fsr1h	equ	0xFE2
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _init_interrupt *****************
  5849 ;; Defined at:
  5850 ;;		line 234 in file "functions.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  1    wreg      void 
  5857 ;; Registers used:
  5858 ;;		None
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5864 ;;      Params:         0       0       0       0
  5865 ;;      Locals:         0       0       0       0
  5866 ;;      Temps:          0       0       0       0
  5867 ;;      Totals:         0       0       0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    6
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_main
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text27
  5879  001ED0                     __ptext27:
  5880                           	opt stack 0
  5881  001ED0                     _init_interrupt:
  5882                           	opt stack 24
  5883                           
  5884                           ;functions.c: 235:     INTCONbits.GIEH = 1;
  5885                           
  5886                           ;incstack = 0
  5887  001ED0  8EF2               	bsf	intcon,7,c	;volatile
  5888                           
  5889                           ;functions.c: 236:     PIE1bits.RCIE = 1;
  5890  001ED2  8A9D               	bsf	3997,5,c	;volatile
  5891                           
  5892                           ;functions.c: 237:     INTCONbits.PEIE = 1;
  5893  001ED4  8CF2               	bsf	intcon,6,c	;volatile
  5894                           
  5895                           ;functions.c: 238:     INTCONbits.GIEL = 1;
  5896  001ED6  8CF2               	bsf	intcon,6,c	;volatile
  5897                           
  5898                           ;functions.c: 239:     RCONbits.IPEN = 1;
  5899  001ED8  8ED0               	bsf	4048,7,c	;volatile
  5900  001EDA  0012               	return		;funcret
  5901  001EDC                     __end_of_init_interrupt:
  5902                           	opt stack 0
  5903                           tblptru	equ	0xFF8
  5904                           tblptrh	equ	0xFF7
  5905                           tblptrl	equ	0xFF6
  5906                           tablat	equ	0xFF5
  5907                           prodh	equ	0xFF4
  5908                           prodl	equ	0xFF3
  5909                           intcon	equ	0xFF2
  5910                           postinc0	equ	0xFEE
  5911                           wreg	equ	0xFE8
  5912                           indf1	equ	0xFE7
  5913                           postinc1	equ	0xFE6
  5914                           fsr1h	equ	0xFE2
  5915                           fsr1l	equ	0xFE1
  5916                           indf2	equ	0xFDF
  5917                           postinc2	equ	0xFDE
  5918                           postdec2	equ	0xFDD
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _init_counter *****************
  5924 ;; Defined at:
  5925 ;;		line 378 in file "functions.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5939 ;;      Params:         0       0       0       0
  5940 ;;      Locals:         0       0       0       0
  5941 ;;      Temps:          0       0       0       0
  5942 ;;      Totals:         0       0       0       0
  5943 ;;Total ram usage:        0 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    6
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_main
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text28
  5954  001E4E                     __ptext28:
  5955                           	opt stack 0
  5956  001E4E                     _init_counter:
  5957                           	opt stack 24
  5958                           
  5959                           ;functions.c: 379:     INTCONbits.TMR0IE = 1;
  5960                           
  5961                           ;incstack = 0
  5962  001E4E  8AF2               	bsf	intcon,5,c	;volatile
  5963                           
  5964                           ;functions.c: 380:     INTCON2bits.TMR0IP = 0;
  5965  001E50  94F1               	bcf	intcon2,2,c	;volatile
  5966                           
  5967                           ;functions.c: 381:     T0CONbits.T016BIT = 1;
  5968  001E52  8CD5               	bsf	4053,6,c	;volatile
  5969                           
  5970                           ;functions.c: 382:     T0CONbits.T0CS = 0;
  5971  001E54  9AD5               	bcf	4053,5,c	;volatile
  5972                           
  5973                           ;functions.c: 383:     T0CONbits.PSA = 0;
  5974  001E56  96D5               	bcf	4053,3,c	;volatile
  5975                           
  5976                           ;functions.c: 384:     T0CONbits.T0PS = 0b010;
  5977  001E58  50D5               	movf	4053,w,c	;volatile
  5978  001E5A  0BF8               	andlw	-8
  5979  001E5C  0902               	iorlw	2
  5980  001E5E  6ED5               	movwf	4053,c	;volatile
  5981                           
  5982                           ;functions.c: 385:     T0CONbits.TMR0ON = 1;
  5983  001E60  8ED5               	bsf	4053,7,c	;volatile
  5984                           
  5985                           ;functions.c: 386:     TMR0L = 3;
  5986  001E62  0E03               	movlw	3
  5987  001E64  6ED6               	movwf	4054,c	;volatile
  5988  001E66  0012               	return		;funcret
  5989  001E68                     __end_of_init_counter:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           intcon2	equ	0xFF1
  5999                           postinc0	equ	0xFEE
  6000                           wreg	equ	0xFE8
  6001                           indf1	equ	0xFE7
  6002                           postinc1	equ	0xFE6
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _init_button *****************
  6013 ;; Defined at:
  6014 ;;		line 401 in file "functions.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6028 ;;      Params:         0       0       0       0
  6029 ;;      Locals:         0       0       0       0
  6030 ;;      Temps:          0       0       0       0
  6031 ;;      Totals:         0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    6
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_main
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text29
  6043  001EDC                     __ptext29:
  6044                           	opt stack 0
  6045  001EDC                     _init_button:
  6046                           	opt stack 24
  6047                           
  6048                           ;functions.c: 402:     LATC = 0;
  6049                           
  6050                           ;incstack = 0
  6051  001EDC  0E00               	movlw	0
  6052  001EDE  6E8B               	movwf	3979,c	;volatile
  6053                           
  6054                           ;functions.c: 403:     TRISCbits.RC3 = 1;
  6055  001EE0  8694               	bsf	3988,3,c	;volatile
  6056                           
  6057                           ;functions.c: 404:     INTCONbits.INT0IE = 1;
  6058  001EE2  88F2               	bsf	intcon,4,c	;volatile
  6059  001EE4  0012               	return		;funcret
  6060  001EE6                     __end_of_init_button:
  6061                           	opt stack 0
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           intcon	equ	0xFF2
  6069                           intcon2	equ	0xFF1
  6070                           postinc0	equ	0xFEE
  6071                           wreg	equ	0xFE8
  6072                           indf1	equ	0xFE7
  6073                           postinc1	equ	0xFE6
  6074                           fsr1h	equ	0xFE2
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           postdec2	equ	0xFDD
  6079                           fsr2h	equ	0xFDA
  6080                           fsr2l	equ	0xFD9
  6081                           status	equ	0xFD8
  6082                           
  6083 ;; *************** function _clear_lcd *****************
  6084 ;; Defined at:
  6085 ;;		line 121 in file "lcd_funct.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;		None
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;		None
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6099 ;;      Params:         0       0       0       0
  6100 ;;      Locals:         0       0       0       0
  6101 ;;      Temps:          1       0       0       0
  6102 ;;      Totals:         1       0       0       0
  6103 ;;Total ram usage:        1 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    9
  6106 ;; This function calls:
  6107 ;;		_send_lcd
  6108 ;; This function is called by:
  6109 ;;		_main
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           	psect	text30
  6114  001E68                     __ptext30:
  6115                           	opt stack 0
  6116  001E68                     _clear_lcd:
  6117                           	opt stack 21
  6118                           
  6119                           ;lcd_funct.c: 122:     send_lcd(1, 0);
  6120                           
  6121                           ;incstack = 0
  6122  001E68  0E00               	movlw	0
  6123  001E6A  6E18               	movwf	send_lcd@type,c
  6124  001E6C  0E01               	movlw	1
  6125  001E6E  ECE1  F00E         	call	_send_lcd
  6126                           
  6127                           ;lcd_funct.c: 123:     _delay((unsigned long)((5000)*(8000000/4000000.0)));
  6128  001E72  0E0D               	movlw	13
  6129  001E74  6E1A               	movwf	??_clear_lcd& (0+255),c
  6130  001E76  0EFC               	movlw	252
  6131  001E78                     u3317:
  6132  001E78  2EE8               	decfsz	wreg,f,c
  6133  001E7A  D7FE               	bra	u3317
  6134  001E7C  2E1A               	decfsz	??_clear_lcd& (0+255),f,c
  6135  001E7E  D7FC               	bra	u3317
  6136  001E80  0012               	return		;funcret
  6137  001E82                     __end_of_clear_lcd:
  6138                           	opt stack 0
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           intcon	equ	0xFF2
  6146                           intcon2	equ	0xFF1
  6147                           postinc0	equ	0xFEE
  6148                           wreg	equ	0xFE8
  6149                           indf1	equ	0xFE7
  6150                           postinc1	equ	0xFE6
  6151                           fsr1h	equ	0xFE2
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _send_lcd *****************
  6161 ;; Defined at:
  6162 ;;		line 97 in file "lcd_funct.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;  Byte            1    wreg     unsigned char 
  6165 ;;  type            1   23[COMRAM] unsigned char 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  Byte            1   24[COMRAM] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      void 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6177 ;;      Params:         1       0       0       0
  6178 ;;      Locals:         1       0       0       0
  6179 ;;      Temps:          0       0       0       0
  6180 ;;      Totals:         2       0       0       0
  6181 ;;Total ram usage:        2 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    8
  6184 ;; This function calls:
  6185 ;;		_lcd_out
  6186 ;; This function is called by:
  6187 ;;		_clear_lcd
  6188 ;;		_init_lcd
  6189 ;;		_set_line
  6190 ;;		_lcd_string
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text31
  6195  001DC2                     __ptext31:
  6196                           	opt stack 0
  6197  001DC2                     _send_lcd:
  6198                           	opt stack 20
  6199                           
  6200                           ;incstack = 0
  6201                           ;send_lcd@Byte stored from wreg
  6202  001DC2  6E19               	movwf	send_lcd@Byte,c
  6203                           
  6204                           ;lcd_funct.c: 100:     LATAbits.LATA6 = type;
  6205  001DC4  B018               	btfsc	send_lcd@type,0,c
  6206  001DC6  D002               	bra	u2275
  6207  001DC8  9C89               	bcf	3977,6,c	;volatile
  6208  001DCA  D001               	bra	u2276
  6209  001DCC                     u2275:
  6210  001DCC  8C89               	bsf	3977,6,c	;volatile
  6211  001DCE                     u2276:
  6212                           
  6213                           ;lcd_funct.c: 102:     lcd_out(Byte >> 4);
  6214  001DCE  3819               	swapf	send_lcd@Byte,w,c
  6215  001DD0  0B0F               	andlw	15
  6216  001DD2  ECC5  F00C         	call	_lcd_out
  6217                           
  6218                           ;lcd_funct.c: 103:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  6219  001DD6  0E06               	movlw	6
  6220  001DD8                     u3327:
  6221  001DD8  2EE8               	decfsz	wreg,f,c
  6222  001DDA  D7FE               	bra	u3327
  6223  001DDC  D000               	nop2	
  6224                           
  6225                           ;lcd_funct.c: 105:     lcd_out(Byte);
  6226  001DDE  5019               	movf	send_lcd@Byte,w,c
  6227  001DE0  ECC5  F00C         	call	_lcd_out
  6228  001DE4  0012               	return		;funcret
  6229  001DE6                     __end_of_send_lcd:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           postinc0	equ	0xFEE
  6240                           wreg	equ	0xFE8
  6241                           indf1	equ	0xFE7
  6242                           postinc1	equ	0xFE6
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _lcd_out *****************
  6253 ;; Defined at:
  6254 ;;		line 69 in file "lcd_funct.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  number          1    wreg     unsigned char 
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;  number          1   22[COMRAM] unsigned char 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		wreg, status,2, status,0, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6268 ;;      Params:         0       0       0       0
  6269 ;;      Locals:         1       0       0       0
  6270 ;;      Temps:          1       0       0       0
  6271 ;;      Totals:         2       0       0       0
  6272 ;;Total ram usage:        2 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    7
  6275 ;; This function calls:
  6276 ;;		_e_tog
  6277 ;; This function is called by:
  6278 ;;		_send_lcd
  6279 ;;		_init_lcd
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text32
  6284  00198A                     __ptext32:
  6285                           	opt stack 0
  6286  00198A                     _lcd_out:
  6287                           	opt stack 20
  6288                           
  6289                           ;incstack = 0
  6290                           ;lcd_out@number stored from wreg
  6291  00198A  6E17               	movwf	lcd_out@number,c
  6292                           
  6293                           ;lcd_funct.c: 72:     LATCbits.LATC1 = number & 1;
  6294  00198C  C017  F016         	movff	lcd_out@number,??_lcd_out
  6295  001990  0E01               	movlw	1
  6296  001992  1616               	andwf	??_lcd_out,f,c
  6297  001994  4616               	rlncf	??_lcd_out,f,c
  6298  001996  508B               	movf	3979,w,c	;volatile
  6299  001998  1816               	xorwf	??_lcd_out,w,c
  6300  00199A  0BFD               	andlw	-3
  6301  00199C  1816               	xorwf	??_lcd_out,w,c
  6302  00199E  6E8B               	movwf	3979,c	;volatile
  6303                           
  6304                           ;lcd_funct.c: 73:     LATCbits.LATC2 = (number & 2) >> 1;
  6305  0019A0  C017  F016         	movff	lcd_out@number,??_lcd_out
  6306  0019A4  90D8               	bcf	status,0,c
  6307  0019A6  3216               	rrcf	??_lcd_out,f,c
  6308  0019A8  0E01               	movlw	1
  6309  0019AA  1616               	andwf	??_lcd_out,f,c
  6310  0019AC  4616               	rlncf	??_lcd_out,f,c
  6311  0019AE  4616               	rlncf	??_lcd_out,f,c
  6312  0019B0  508B               	movf	3979,w,c	;volatile
  6313  0019B2  1816               	xorwf	??_lcd_out,w,c
  6314  0019B4  0BFB               	andlw	-5
  6315  0019B6  1816               	xorwf	??_lcd_out,w,c
  6316  0019B8  6E8B               	movwf	3979,c	;volatile
  6317                           
  6318                           ;lcd_funct.c: 74:     LATDbits.LATD0 = (number & 4) >> 2;
  6319  0019BA  C017  F016         	movff	lcd_out@number,??_lcd_out
  6320  0019BE  90D8               	bcf	status,0,c
  6321  0019C0  3216               	rrcf	??_lcd_out,f,c
  6322  0019C2  90D8               	bcf	status,0,c
  6323  0019C4  3216               	rrcf	??_lcd_out,f,c
  6324  0019C6  0E01               	movlw	1
  6325  0019C8  1616               	andwf	??_lcd_out,f,c
  6326  0019CA  508C               	movf	3980,w,c	;volatile
  6327  0019CC  1816               	xorwf	??_lcd_out,w,c
  6328  0019CE  0BFE               	andlw	-2
  6329  0019D0  1816               	xorwf	??_lcd_out,w,c
  6330  0019D2  6E8C               	movwf	3980,c	;volatile
  6331                           
  6332                           ;lcd_funct.c: 75:     LATDbits.LATD1 = (number & 8) >> 3;
  6333  0019D4  C017  F016         	movff	lcd_out@number,??_lcd_out
  6334  0019D8  90D8               	bcf	status,0,c
  6335  0019DA  3216               	rrcf	??_lcd_out,f,c
  6336  0019DC  90D8               	bcf	status,0,c
  6337  0019DE  3216               	rrcf	??_lcd_out,f,c
  6338  0019E0  90D8               	bcf	status,0,c
  6339  0019E2  3216               	rrcf	??_lcd_out,f,c
  6340  0019E4  0E01               	movlw	1
  6341  0019E6  1616               	andwf	??_lcd_out,f,c
  6342  0019E8  4616               	rlncf	??_lcd_out,f,c
  6343  0019EA  508C               	movf	3980,w,c	;volatile
  6344  0019EC  1816               	xorwf	??_lcd_out,w,c
  6345  0019EE  0BFD               	andlw	-3
  6346  0019F0  1816               	xorwf	??_lcd_out,w,c
  6347  0019F2  6E8C               	movwf	3980,c	;volatile
  6348                           
  6349                           ;lcd_funct.c: 76:     e_tog();
  6350  0019F4  EC5A  F00F         	call	_e_tog	;wreg free
  6351                           
  6352                           ;lcd_funct.c: 77:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6353  0019F8  0E03               	movlw	3
  6354  0019FA                     u3337:
  6355  0019FA  2EE8               	decfsz	wreg,f,c
  6356  0019FC  D7FE               	bra	u3337
  6357  0019FE  F000               	nop	
  6358  001A00  0012               	return		;funcret
  6359  001A02                     __end_of_lcd_out:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           intcon	equ	0xFF2
  6368                           intcon2	equ	0xFF1
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf1	equ	0xFE7
  6372                           postinc1	equ	0xFE6
  6373                           fsr1h	equ	0xFE2
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           postinc2	equ	0xFDE
  6377                           postdec2	equ	0xFDD
  6378                           fsr2h	equ	0xFDA
  6379                           fsr2l	equ	0xFD9
  6380                           status	equ	0xFD8
  6381                           
  6382 ;; *************** function _e_tog *****************
  6383 ;; Defined at:
  6384 ;;		line 50 in file "lcd_funct.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;		None
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      void 
  6391 ;; Registers used:
  6392 ;;		wreg
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6398 ;;      Params:         0       0       0       0
  6399 ;;      Locals:         0       0       0       0
  6400 ;;      Temps:          0       0       0       0
  6401 ;;      Totals:         0       0       0       0
  6402 ;;Total ram usage:        0 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    6
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_lcd_out
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text33
  6413  001EB4                     __ptext33:
  6414                           	opt stack 0
  6415  001EB4                     _e_tog:
  6416                           	opt stack 20
  6417                           
  6418                           ;lcd_funct.c: 51:     LATCbits.LATC0 = 1;
  6419                           
  6420                           ;incstack = 0
  6421  001EB4  808B               	bsf	3979,0,c	;volatile
  6422                           
  6423                           ;lcd_funct.c: 52:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  6424  001EB6  0E03               	movlw	3
  6425  001EB8                     u3347:
  6426  001EB8  2EE8               	decfsz	wreg,f,c
  6427  001EBA  D7FE               	bra	u3347
  6428  001EBC  F000               	nop	
  6429                           
  6430                           ;lcd_funct.c: 53:     LATCbits.LATC0 = 0;
  6431  001EBE  908B               	bcf	3979,0,c	;volatile
  6432  001EC0  0012               	return		;funcret
  6433  001EC2                     __end_of_e_tog:
  6434                           	opt stack 0
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           intcon2	equ	0xFF1
  6443                           postinc0	equ	0xFEE
  6444                           wreg	equ	0xFE8
  6445                           indf1	equ	0xFE7
  6446                           postinc1	equ	0xFE6
  6447                           fsr1h	equ	0xFE2
  6448                           fsr1l	equ	0xFE1
  6449                           indf2	equ	0xFDF
  6450                           postinc2	equ	0xFDE
  6451                           postdec2	equ	0xFDD
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456 ;; *************** function _lp_timer *****************
  6457 ;; Defined at:
  6458 ;;		line 134 in file "main.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      void 
  6465 ;; Registers used:
  6466 ;;		wreg, status,2, status,0
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6472 ;;      Params:         0       0       0       0
  6473 ;;      Locals:         0       0       0       0
  6474 ;;      Temps:          3       0       0       0
  6475 ;;      Totals:         3       0       0       0
  6476 ;;Total ram usage:        3 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    5
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		Interrupt level 1
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	intcodelo
  6487  000018                     __pintcodelo:
  6488                           	opt stack 0
  6489  000018                     _lp_timer:
  6490                           	opt stack 19
  6491                           
  6492                           ;incstack = 0
  6493  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6494  00001A  CFD8 F013          	movff	status,??_lp_timer
  6495  00001E  CFE8 F014          	movff	wreg,??_lp_timer+1
  6496  000022  CFE0 F015          	movff	bsr,??_lp_timer+2
  6497  000026  A4F2               	btfss	intcon,2,c	;volatile
  6498  000028  D006               	goto	i1l91
  6499  00002A  0100               	movlb	0	; () banked
  6500  00002C  4B87               	infsnz	_G_time_ms& (0+255),f,b	;volatile
  6501  00002E  2B88               	incf	(_G_time_ms+1)& (0+255),f,b	;volatile
  6502                           
  6503                           ; BSR set to: 0
  6504  000030  0E03               	movlw	3
  6505  000032  6ED6               	movwf	4054,c	;volatile
  6506                           
  6507                           ; BSR set to: 0
  6508  000034  94F2               	bcf	intcon,2,c	;volatile
  6509  000036                     i1l91:
  6510                           
  6511                           ; BSR set to: 0
  6512  000036  C015  FFE0         	movff	??_lp_timer+2,bsr
  6513  00003A  C014  FFE8         	movff	??_lp_timer+1,wreg
  6514  00003E  C013  FFD8         	movff	??_lp_timer,status
  6515  000042  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6516  000044  0010               	retfie	
  6517  000046                     __end_of_lp_timer:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           intcon2	equ	0xFF1
  6527                           postinc0	equ	0xFEE
  6528                           wreg	equ	0xFE8
  6529                           indf1	equ	0xFE7
  6530                           postinc1	equ	0xFE6
  6531                           fsr1h	equ	0xFE2
  6532                           fsr1l	equ	0xFE1
  6533                           bsr	equ	0xFE0
  6534                           indf2	equ	0xFDF
  6535                           postinc2	equ	0xFDE
  6536                           postdec2	equ	0xFDD
  6537                           fsr2h	equ	0xFDA
  6538                           fsr2l	equ	0xFD9
  6539                           status	equ	0xFD8
  6540                           
  6541 ;; *************** function _hp_rfid *****************
  6542 ;; Defined at:
  6543 ;;		line 95 in file "main.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6557 ;;      Params:         0       0       0       0
  6558 ;;      Locals:         0       0       0       0
  6559 ;;      Temps:         12       0       0       0
  6560 ;;      Totals:        12       0       0       0
  6561 ;;Total ram usage:       12 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    4
  6564 ;; This function calls:
  6565 ;;		_get_packet_serial
  6566 ;;		i2_clear_lcd
  6567 ;;		i2_lcd_string
  6568 ;;		i2_set_line
  6569 ;; This function is called by:
  6570 ;;		Interrupt level 2
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	intcode
  6575  000008                     __pintcode:
  6576                           	opt stack 0
  6577  000008                     _hp_rfid:
  6578                           	opt stack 19
  6579                           
  6580                           ;incstack = 0
  6581  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6582  00000A  EFE2  F008         	goto	int_func
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           intcon	equ	0xFF2
  6590                           intcon2	equ	0xFF1
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           indf1	equ	0xFE7
  6594                           postinc1	equ	0xFE6
  6595                           fsr1h	equ	0xFE2
  6596                           fsr1l	equ	0xFE1
  6597                           bsr	equ	0xFE0
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           fsr2h	equ	0xFDA
  6602                           fsr2l	equ	0xFD9
  6603                           status	equ	0xFD8
  6604                           
  6605                           	psect	intcode_body
  6606  0011C4                     __pintcode_body:
  6607                           	opt stack 19
  6608  0011C4                     int_func:
  6609                           	opt stack 19
  6610  0011C4  CFE1 F009          	movff	fsr1l,??_hp_rfid+2
  6611  0011C8  CFE2 F00A          	movff	fsr1h,??_hp_rfid+3
  6612  0011CC  CFD9 F00B          	movff	fsr2l,??_hp_rfid+4
  6613  0011D0  CFDA F00C          	movff	fsr2h,??_hp_rfid+5
  6614  0011D4  CFF3 F00D          	movff	prodl,??_hp_rfid+6
  6615  0011D8  CFF4 F00E          	movff	prodh,??_hp_rfid+7
  6616  0011DC  CFF6 F00F          	movff	tblptrl,??_hp_rfid+8
  6617  0011E0  CFF7 F010          	movff	tblptrh,??_hp_rfid+9
  6618  0011E4  CFF8 F011          	movff	tblptru,??_hp_rfid+10
  6619  0011E8  CFF5 F012          	movff	tablat,??_hp_rfid+11
  6620                           
  6621                           ;main.c: 99:     motorR.dutyLowByte = (unsigned char *) (&PDC1L);
  6622  0011EC  AA9E               	btfss	3998,5,c	;volatile
  6623  0011EE  D009               	goto	i2l79
  6624                           
  6625                           ;main.c: 100:     motorR.dutyHighByte = (unsigned char *) (&PDC1H);
  6626  0011F0  0E3A               	movlw	low _G_rfid_buf
  6627  0011F2  6E01               	movwf	get_packet_serial@packet,c
  6628  0011F4  0E00               	movlw	high _G_rfid_buf
  6629  0011F6  6E02               	movwf	get_packet_serial@packet+1,c
  6630  0011F8  EC55  F009         	call	_get_packet_serial	;wreg free
  6631                           
  6632                           ;main.c: 101:     motorR.dir_pin = 2;
  6633  0011FC  0E01               	movlw	1
  6634  0011FE  0100               	movlb	0	; () banked
  6635  001200  6F89               	movwf	_G_rfid_retrieved& (0+255),b	;volatile
  6636  001202                     i2l79:
  6637                           
  6638                           ;main.c: 107:     cont.turn_direction = 0;
  6639                           
  6640                           ; BSR set to: 0
  6641  001202  B2F2               	btfsc	intcon,1,c	;volatile
  6642                           
  6643                           ;main.c: 108: 
  6644  001204  A2F2               	btfss	intcon,1,c	;volatile
  6645  001206  D03B               	goto	i2l82
  6646                           
  6647                           ;main.c: 109: 
  6648  001208  A2F2               	btfss	intcon,1,c	;volatile
  6649  00120A  D039               	goto	i2l82
  6650                           
  6651                           ;main.c: 110:     cont.gain = 40;
  6652  00120C  0439               	decf	_G_run,w,c	;volatile
  6653  00120E  A4D8               	btfss	status,2,c
  6654  001210  D019               	goto	i2l83
  6655                           
  6656                           ;main.c: 112:     cont.ir_threshold = 350;
  6657  001212  0E00               	movlw	0
  6658  001214  6E39               	movwf	_G_run,c	;volatile
  6659                           
  6660                           ;main.c: 113:     cont.ir_min = 47000;
  6661  001216  EC41  F00F         	call	i2_clear_lcd	;wreg free
  6662                           
  6663                           ;main.c: 114:     cont.ir_buf[6];
  6664  00121A  0E01               	movlw	1
  6665  00121C  ECB6  F00E         	call	i2_set_line
  6666                           
  6667                           ;main.c: 115:     cont.i = 0;
  6668  001220  0E50               	movlw	low STR_1
  6669  001222  6E05               	movwf	i2lcd_string@string,c
  6670  001224  0E03               	movlw	high STR_1
  6671  001226  6E06               	movwf	i2lcd_string@string+1,c
  6672  001228  ECCE  F00D         	call	i2_lcd_string	;wreg free
  6673                           
  6674                           ;main.c: 116:     cont.finding_direction = 0;
  6675  00122C  0E08               	movlw	8
  6676  00122E  6E08               	movwf	(??_hp_rfid+1)& (0+255),c
  6677  001230  0E1B               	movlw	27
  6678  001232  6E07               	movwf	??_hp_rfid& (0+255),c
  6679  001234  0E27               	movlw	39
  6680  001236                     i2u335_47:
  6681  001236  2EE8               	decfsz	wreg,f,c
  6682  001238  D7FE               	bra	i2u335_47
  6683  00123A  2E07               	decfsz	??_hp_rfid& (0+255),f,c
  6684  00123C  D7FC               	bra	i2u335_47
  6685  00123E  2E08               	decfsz	(??_hp_rfid+1)& (0+255),f,c
  6686  001240  D7FA               	bra	i2u335_47
  6687  001242  D01B               	goto	L2
  6688  001244                     i2l83:
  6689  001244  5039               	movf	_G_run,w,c	;volatile
  6690  001246  A4D8               	btfss	status,2,c
  6691  001248  D019               	goto	i2l85
  6692                           
  6693                           ;main.c: 119: 
  6694  00124A  0E01               	movlw	1
  6695  00124C  6E39               	movwf	_G_run,c	;volatile
  6696                           
  6697                           ;main.c: 120:     unsigned char chksm[5];
  6698  00124E  EC41  F00F         	call	i2_clear_lcd	;wreg free
  6699                           
  6700                           ;main.c: 121:     unsigned char j = 0;
  6701  001252  0E01               	movlw	1
  6702  001254  ECB6  F00E         	call	i2_set_line
  6703                           
  6704                           ;main.c: 122: 
  6705  001258  0E4D               	movlw	low STR_2
  6706  00125A  6E05               	movwf	i2lcd_string@string,c
  6707  00125C  0E03               	movlw	high STR_2
  6708  00125E  6E06               	movwf	i2lcd_string@string+1,c
  6709  001260  ECCE  F00D         	call	i2_lcd_string	;wreg free
  6710                           
  6711                           ;main.c: 123: 
  6712  001264  0E08               	movlw	8
  6713  001266  6E08               	movwf	(??_hp_rfid+1)& (0+255),c
  6714  001268  0E1B               	movlw	27
  6715  00126A  6E07               	movwf	??_hp_rfid& (0+255),c
  6716  00126C  0E27               	movlw	39
  6717  00126E                     i2u336_47:
  6718  00126E  2EE8               	decfsz	wreg,f,c
  6719  001270  D7FE               	bra	i2u336_47
  6720  001272  2E07               	decfsz	??_hp_rfid& (0+255),f,c
  6721  001274  D7FC               	bra	i2u336_47
  6722  001276  2E08               	decfsz	(??_hp_rfid+1)& (0+255),f,c
  6723  001278  D7FA               	bra	i2u336_47
  6724  00127A                     L2:
  6725  00127A  F000               	nop	
  6726  00127C                     i2l85:
  6727                           
  6728                           ;main.c: 126:     lcd_string("INIT");
  6729  00127C  92F2               	bcf	intcon,1,c	;volatile
  6730  00127E                     i2l82:
  6731  00127E  C012  FFF5         	movff	??_hp_rfid+11,tablat
  6732  001282  C011  FFF8         	movff	??_hp_rfid+10,tblptru
  6733  001286  C010  FFF7         	movff	??_hp_rfid+9,tblptrh
  6734  00128A  C00F  FFF6         	movff	??_hp_rfid+8,tblptrl
  6735  00128E  C00E  FFF4         	movff	??_hp_rfid+7,prodh
  6736  001292  C00D  FFF3         	movff	??_hp_rfid+6,prodl
  6737  001296  C00C  FFDA         	movff	??_hp_rfid+5,fsr2h
  6738  00129A  C00B  FFD9         	movff	??_hp_rfid+4,fsr2l
  6739  00129E  C00A  FFE2         	movff	??_hp_rfid+3,fsr1h
  6740  0012A2  C009  FFE1         	movff	??_hp_rfid+2,fsr1l
  6741  0012A6  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6742  0012A8  0011               	retfie		f
  6743  0012AA                     __end_of_hp_rfid:
  6744                           	opt stack 0
  6745                           tblptru	equ	0xFF8
  6746                           tblptrh	equ	0xFF7
  6747                           tblptrl	equ	0xFF6
  6748                           tablat	equ	0xFF5
  6749                           prodh	equ	0xFF4
  6750                           prodl	equ	0xFF3
  6751                           intcon	equ	0xFF2
  6752                           intcon2	equ	0xFF1
  6753                           postinc0	equ	0xFEE
  6754                           wreg	equ	0xFE8
  6755                           indf1	equ	0xFE7
  6756                           postinc1	equ	0xFE6
  6757                           fsr1h	equ	0xFE2
  6758                           fsr1l	equ	0xFE1
  6759                           bsr	equ	0xFE0
  6760                           indf2	equ	0xFDF
  6761                           postinc2	equ	0xFDE
  6762                           postdec2	equ	0xFDD
  6763                           fsr2h	equ	0xFDA
  6764                           fsr2l	equ	0xFD9
  6765                           status	equ	0xFD8
  6766                           
  6767 ;; *************** function i2_set_line *****************
  6768 ;; Defined at:
  6769 ;;		line 200 in file "lcd_funct.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  line            1    wreg     unsigned char 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  line            1    4[COMRAM] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      void 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0, cstack
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6783 ;;      Params:         0       0       0       0
  6784 ;;      Locals:         1       0       0       0
  6785 ;;      Temps:          0       0       0       0
  6786 ;;      Totals:         1       0       0       0
  6787 ;;Total ram usage:        1 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    3
  6790 ;; This function calls:
  6791 ;;		i2_send_lcd
  6792 ;; This function is called by:
  6793 ;;		_hp_rfid
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text36
  6798  001D6C                     __ptext36:
  6799                           	opt stack 0
  6800  001D6C                     i2_set_line:
  6801                           	opt stack 19
  6802                           
  6803                           ;incstack = 0
  6804                           ;i2set_line@line stored from wreg
  6805  001D6C  6E05               	movwf	i2set_line@line,c
  6806                           
  6807                           ;lcd_funct.c: 203:     if (line == 1) {
  6808  001D6E  0405               	decf	i2set_line@line,w,c
  6809  001D70  A4D8               	btfss	status,2,c
  6810  001D72  D006               	goto	i2l441
  6811                           
  6812                           ;lcd_funct.c: 204:         send_lcd(128, 0);
  6813  001D74  0E00               	movlw	0
  6814  001D76  6E03               	movwf	i2send_lcd@type,c
  6815  001D78  0E80               	movlw	128
  6816  001D7A  ECF3  F00E         	call	i2_send_lcd
  6817                           
  6818                           ;lcd_funct.c: 205:     } else if (line == 2) {
  6819  001D7E  D009               	goto	i2l443
  6820  001D80                     i2l441:
  6821  001D80  0E02               	movlw	2
  6822  001D82  1805               	xorwf	i2set_line@line,w,c
  6823  001D84  A4D8               	btfss	status,2,c
  6824  001D86  D005               	goto	i2l443
  6825                           
  6826                           ;lcd_funct.c: 206:         send_lcd(192, 0);
  6827  001D88  0E00               	movlw	0
  6828  001D8A  6E03               	movwf	i2send_lcd@type,c
  6829  001D8C  0EC0               	movlw	192
  6830  001D8E  ECF3  F00E         	call	i2_send_lcd
  6831  001D92                     i2l443:
  6832                           
  6833                           ;lcd_funct.c: 208:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  6834  001D92  0E21               	movlw	33
  6835  001D94                     i2u337_47:
  6836  001D94  2EE8               	decfsz	wreg,f,c
  6837  001D96  D7FE               	bra	i2u337_47
  6838  001D98  F000               	nop	
  6839  001D9A  0012               	return		;funcret
  6840  001D9C                     __end_ofi2_set_line:
  6841                           	opt stack 0
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           intcon2	equ	0xFF1
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           indf1	equ	0xFE7
  6853                           postinc1	equ	0xFE6
  6854                           fsr1h	equ	0xFE2
  6855                           fsr1l	equ	0xFE1
  6856                           bsr	equ	0xFE0
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function i2_lcd_string *****************
  6865 ;; Defined at:
  6866 ;;		line 224 in file "lcd_funct.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  string          2    4[COMRAM] PTR unsigned char 
  6869 ;;		 -> STR_27(4), STR_26(4), STR_25(4), STR_24(2), 
  6870 ;;		 -> STR_23(2), STR_22(4), STR_21(7), STR_20(8), 
  6871 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(17), 
  6872 ;;		 -> STR_15(15), STR_14(3), STR_13(4), STR_12(4), 
  6873 ;;		 -> STR_11(4), STR_10(3), STR_9(2), STR_8(4), 
  6874 ;;		 -> STR_7(4), STR_6(2), STR_5(2), STR_4(2), 
  6875 ;;		 -> STR_3(5), main@cont(252), STR_2(3), STR_1(3), 
  6876 ;;		 -> G_rfid_buf(16), 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6888 ;;      Params:         2       0       0       0
  6889 ;;      Locals:         0       0       0       0
  6890 ;;      Temps:          0       0       0       0
  6891 ;;      Totals:         2       0       0       0
  6892 ;;Total ram usage:        2 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    3
  6895 ;; This function calls:
  6896 ;;		i2_send_lcd
  6897 ;; This function is called by:
  6898 ;;		_hp_rfid
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text37
  6903  001B9C                     __ptext37:
  6904                           	opt stack 0
  6905  001B9C                     i2_lcd_string:
  6906                           	opt stack 19
  6907                           
  6908                           ;lcd_funct.c: 226:     while (*string != 0) {
  6909                           
  6910                           ;incstack = 0
  6911  001B9C  D016               	goto	i2l447
  6912  001B9E                     
  6913                           ;lcd_funct.c: 229:         send_lcd(*string++, 1);
  6914  001B9E  0E01               	movlw	1
  6915  001BA0  6E03               	movwf	i2send_lcd@type,c
  6916  001BA2  C005  FFF6         	movff	i2lcd_string@string,tblptrl
  6917  001BA6  C006  FFF7         	movff	i2lcd_string@string+1,tblptrh
  6918  001BAA  6AF8               	clrf	tblptru,c
  6919  001BAC  0E02               	movlw	(high __ramtop+-1)
  6920  001BAE  64F7               	cpfsgt	tblptrh,c
  6921  001BB0  D003               	bra	i2u177_47
  6922  001BB2  0008               	tblrd		*
  6923  001BB4  50F5               	movf	tablat,w,c
  6924  001BB6  D005               	bra	i2u177_40
  6925  001BB8                     i2u177_47:
  6926  001BB8  CFF6 FFE1          	movff	tblptrl,fsr1l
  6927  001BBC  CFF7 FFE2          	movff	tblptrh,fsr1h
  6928  001BC0  50E7               	movf	indf1,w,c
  6929  001BC2                     i2u177_40:
  6930  001BC2  ECF3  F00E         	call	i2_send_lcd
  6931  001BC6  4A05               	infsnz	i2lcd_string@string,f,c
  6932  001BC8  2A06               	incf	i2lcd_string@string+1,f,c
  6933  001BCA                     i2l447:
  6934                           
  6935                           ;lcd_funct.c: 226:     while (*string != 0) {
  6936  001BCA  C005  FFF6         	movff	i2lcd_string@string,tblptrl
  6937  001BCE  C006  FFF7         	movff	i2lcd_string@string+1,tblptrh
  6938  001BD2  6AF8               	clrf	tblptru,c
  6939  001BD4  0E02               	movlw	(high __ramtop+-1)
  6940  001BD6  64F7               	cpfsgt	tblptrh,c
  6941  001BD8  D003               	bra	i2u178_47
  6942  001BDA  0008               	tblrd		*
  6943  001BDC  50F5               	movf	tablat,w,c
  6944  001BDE  D005               	bra	i2u178_40
  6945  001BE0                     i2u178_47:
  6946  001BE0  CFF6 FFE1          	movff	tblptrl,fsr1l
  6947  001BE4  CFF7 FFE2          	movff	tblptrh,fsr1h
  6948  001BE8  50E7               	movf	indf1,w,c
  6949  001BEA                     i2u178_40:
  6950  001BEA  0900               	iorlw	0
  6951  001BEC  B4D8               	btfsc	status,2,c
  6952  001BEE  0012               	return	
  6953  001BF0  D7D6               	goto	i2l448
  6954  001BF2                     __end_ofi2_lcd_string:
  6955                           	opt stack 0
  6956                           tblptru	equ	0xFF8
  6957                           tblptrh	equ	0xFF7
  6958                           tblptrl	equ	0xFF6
  6959                           tablat	equ	0xFF5
  6960                           prodh	equ	0xFF4
  6961                           prodl	equ	0xFF3
  6962                           intcon	equ	0xFF2
  6963                           intcon2	equ	0xFF1
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           indf1	equ	0xFE7
  6967                           postinc1	equ	0xFE6
  6968                           fsr1h	equ	0xFE2
  6969                           fsr1l	equ	0xFE1
  6970                           bsr	equ	0xFE0
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           postdec2	equ	0xFDD
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function i2_clear_lcd *****************
  6979 ;; Defined at:
  6980 ;;		line 121 in file "lcd_funct.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  1    wreg      void 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6994 ;;      Params:         0       0       0       0
  6995 ;;      Locals:         0       0       0       0
  6996 ;;      Temps:          1       0       0       0
  6997 ;;      Totals:         1       0       0       0
  6998 ;;Total ram usage:        1 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    3
  7001 ;; This function calls:
  7002 ;;		i2_send_lcd
  7003 ;; This function is called by:
  7004 ;;		_hp_rfid
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text38
  7009  001E82                     __ptext38:
  7010                           	opt stack 0
  7011  001E82                     i2_clear_lcd:
  7012                           	opt stack 19
  7013                           
  7014                           ;lcd_funct.c: 122:     send_lcd(1, 0);
  7015                           
  7016                           ;incstack = 0
  7017  001E82  0E00               	movlw	0
  7018  001E84  6E03               	movwf	i2send_lcd@type,c
  7019  001E86  0E01               	movlw	1
  7020  001E88  ECF3  F00E         	call	i2_send_lcd
  7021                           
  7022                           ;lcd_funct.c: 123:     _delay((unsigned long)((5000)*(8000000/4000000.0)));
  7023  001E8C  0E0D               	movlw	13
  7024  001E8E  6E05               	movwf	??i2_clear_lcd& (0+255),c
  7025  001E90  0EFC               	movlw	252
  7026  001E92                     i2u338_47:
  7027  001E92  2EE8               	decfsz	wreg,f,c
  7028  001E94  D7FE               	bra	i2u338_47
  7029  001E96  2E05               	decfsz	??i2_clear_lcd& (0+255),f,c
  7030  001E98  D7FC               	bra	i2u338_47
  7031  001E9A  0012               	return		;funcret
  7032  001E9C                     __end_ofi2_clear_lcd:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           postinc0	equ	0xFEE
  7043                           wreg	equ	0xFE8
  7044                           indf1	equ	0xFE7
  7045                           postinc1	equ	0xFE6
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           bsr	equ	0xFE0
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function i2_send_lcd *****************
  7057 ;; Defined at:
  7058 ;;		line 97 in file "lcd_funct.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  Byte            1    wreg     unsigned char 
  7061 ;;  type            1    2[COMRAM] unsigned char 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  Byte            1    3[COMRAM] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg, status,2, status,0, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7073 ;;      Params:         1       0       0       0
  7074 ;;      Locals:         1       0       0       0
  7075 ;;      Temps:          0       0       0       0
  7076 ;;      Totals:         2       0       0       0
  7077 ;;Total ram usage:        2 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    2
  7080 ;; This function calls:
  7081 ;;		i2_lcd_out
  7082 ;; This function is called by:
  7083 ;;		i2_clear_lcd
  7084 ;;		i2_set_line
  7085 ;;		i2_lcd_string
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	text39
  7090  001DE6                     __ptext39:
  7091                           	opt stack 0
  7092  001DE6                     i2_send_lcd:
  7093                           	opt stack 19
  7094                           
  7095                           ;incstack = 0
  7096                           ;i2send_lcd@Byte stored from wreg
  7097  001DE6  6E04               	movwf	i2send_lcd@Byte,c
  7098                           
  7099                           ;lcd_funct.c: 100:     LATAbits.LATA6 = type;
  7100  001DE8  B003               	btfsc	i2send_lcd@type,0,c
  7101  001DEA  D002               	bra	i2u146_45
  7102  001DEC  9C89               	bcf	3977,6,c	;volatile
  7103  001DEE  D001               	bra	i2u146_46
  7104  001DF0                     i2u146_45:
  7105  001DF0  8C89               	bsf	3977,6,c	;volatile
  7106  001DF2                     i2u146_46:
  7107                           
  7108                           ;lcd_funct.c: 102:     lcd_out(Byte >> 4);
  7109  001DF2  3804               	swapf	i2send_lcd@Byte,w,c
  7110  001DF4  0B0F               	andlw	15
  7111  001DF6  EC01  F00D         	call	i2_lcd_out
  7112                           
  7113                           ;lcd_funct.c: 103:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  7114  001DFA  0E06               	movlw	6
  7115  001DFC                     i2u339_47:
  7116  001DFC  2EE8               	decfsz	wreg,f,c
  7117  001DFE  D7FE               	bra	i2u339_47
  7118  001E00  D000               	nop2	
  7119                           
  7120                           ;lcd_funct.c: 105:     lcd_out(Byte);
  7121  001E02  5004               	movf	i2send_lcd@Byte,w,c
  7122  001E04  EC01  F00D         	call	i2_lcd_out
  7123  001E08  0012               	return		;funcret
  7124  001E0A                     __end_ofi2_send_lcd:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           intcon	equ	0xFF2
  7133                           intcon2	equ	0xFF1
  7134                           postinc0	equ	0xFEE
  7135                           wreg	equ	0xFE8
  7136                           indf1	equ	0xFE7
  7137                           postinc1	equ	0xFE6
  7138                           fsr1h	equ	0xFE2
  7139                           fsr1l	equ	0xFE1
  7140                           bsr	equ	0xFE0
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function i2_lcd_out *****************
  7149 ;; Defined at:
  7150 ;;		line 69 in file "lcd_funct.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  number          1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  number          1    1[COMRAM] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      void 
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7164 ;;      Params:         0       0       0       0
  7165 ;;      Locals:         1       0       0       0
  7166 ;;      Temps:          1       0       0       0
  7167 ;;      Totals:         2       0       0       0
  7168 ;;Total ram usage:        2 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    1
  7171 ;; This function calls:
  7172 ;;		i2_e_tog
  7173 ;; This function is called by:
  7174 ;;		i2_send_lcd
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text40
  7179  001A02                     __ptext40:
  7180                           	opt stack 0
  7181  001A02                     i2_lcd_out:
  7182                           	opt stack 19
  7183                           
  7184                           ;incstack = 0
  7185                           ;i2lcd_out@number stored from wreg
  7186  001A02  6E02               	movwf	i2lcd_out@number,c
  7187                           
  7188                           ;lcd_funct.c: 72:     LATCbits.LATC1 = number & 1;
  7189  001A04  C002  F001         	movff	i2lcd_out@number,??i2_lcd_out
  7190  001A08  0E01               	movlw	1
  7191  001A0A  1601               	andwf	??i2_lcd_out,f,c
  7192  001A0C  4601               	rlncf	??i2_lcd_out,f,c
  7193  001A0E  508B               	movf	3979,w,c	;volatile
  7194  001A10  1801               	xorwf	??i2_lcd_out,w,c
  7195  001A12  0BFD               	andlw	-3
  7196  001A14  1801               	xorwf	??i2_lcd_out,w,c
  7197  001A16  6E8B               	movwf	3979,c	;volatile
  7198                           
  7199                           ;lcd_funct.c: 73:     LATCbits.LATC2 = (number & 2) >> 1;
  7200  001A18  C002  F001         	movff	i2lcd_out@number,??i2_lcd_out
  7201  001A1C  90D8               	bcf	status,0,c
  7202  001A1E  3201               	rrcf	??i2_lcd_out,f,c
  7203  001A20  0E01               	movlw	1
  7204  001A22  1601               	andwf	??i2_lcd_out,f,c
  7205  001A24  4601               	rlncf	??i2_lcd_out,f,c
  7206  001A26  4601               	rlncf	??i2_lcd_out,f,c
  7207  001A28  508B               	movf	3979,w,c	;volatile
  7208  001A2A  1801               	xorwf	??i2_lcd_out,w,c
  7209  001A2C  0BFB               	andlw	-5
  7210  001A2E  1801               	xorwf	??i2_lcd_out,w,c
  7211  001A30  6E8B               	movwf	3979,c	;volatile
  7212                           
  7213                           ;lcd_funct.c: 74:     LATDbits.LATD0 = (number & 4) >> 2;
  7214  001A32  C002  F001         	movff	i2lcd_out@number,??i2_lcd_out
  7215  001A36  90D8               	bcf	status,0,c
  7216  001A38  3201               	rrcf	??i2_lcd_out,f,c
  7217  001A3A  90D8               	bcf	status,0,c
  7218  001A3C  3201               	rrcf	??i2_lcd_out,f,c
  7219  001A3E  0E01               	movlw	1
  7220  001A40  1601               	andwf	??i2_lcd_out,f,c
  7221  001A42  508C               	movf	3980,w,c	;volatile
  7222  001A44  1801               	xorwf	??i2_lcd_out,w,c
  7223  001A46  0BFE               	andlw	-2
  7224  001A48  1801               	xorwf	??i2_lcd_out,w,c
  7225  001A4A  6E8C               	movwf	3980,c	;volatile
  7226                           
  7227                           ;lcd_funct.c: 75:     LATDbits.LATD1 = (number & 8) >> 3;
  7228  001A4C  C002  F001         	movff	i2lcd_out@number,??i2_lcd_out
  7229  001A50  90D8               	bcf	status,0,c
  7230  001A52  3201               	rrcf	??i2_lcd_out,f,c
  7231  001A54  90D8               	bcf	status,0,c
  7232  001A56  3201               	rrcf	??i2_lcd_out,f,c
  7233  001A58  90D8               	bcf	status,0,c
  7234  001A5A  3201               	rrcf	??i2_lcd_out,f,c
  7235  001A5C  0E01               	movlw	1
  7236  001A5E  1601               	andwf	??i2_lcd_out,f,c
  7237  001A60  4601               	rlncf	??i2_lcd_out,f,c
  7238  001A62  508C               	movf	3980,w,c	;volatile
  7239  001A64  1801               	xorwf	??i2_lcd_out,w,c
  7240  001A66  0BFD               	andlw	-3
  7241  001A68  1801               	xorwf	??i2_lcd_out,w,c
  7242  001A6A  6E8C               	movwf	3980,c	;volatile
  7243                           
  7244                           ;lcd_funct.c: 76:     e_tog();
  7245  001A6C  EC61  F00F         	call	i2_e_tog	;wreg free
  7246                           
  7247                           ;lcd_funct.c: 77:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  7248  001A70  0E03               	movlw	3
  7249  001A72                     i2u340_47:
  7250  001A72  2EE8               	decfsz	wreg,f,c
  7251  001A74  D7FE               	bra	i2u340_47
  7252  001A76  F000               	nop	
  7253  001A78  0012               	return		;funcret
  7254  001A7A                     __end_ofi2_lcd_out:
  7255                           	opt stack 0
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           intcon	equ	0xFF2
  7263                           intcon2	equ	0xFF1
  7264                           postinc0	equ	0xFEE
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           postinc1	equ	0xFE6
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           bsr	equ	0xFE0
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278 ;; *************** function i2_e_tog *****************
  7279 ;; Defined at:
  7280 ;;		line 50 in file "lcd_funct.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;		None
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      void 
  7287 ;; Registers used:
  7288 ;;		wreg
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7294 ;;      Params:         0       0       0       0
  7295 ;;      Locals:         0       0       0       0
  7296 ;;      Temps:          0       0       0       0
  7297 ;;      Totals:         0       0       0       0
  7298 ;;Total ram usage:        0 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; This function calls:
  7301 ;;		Nothing
  7302 ;; This function is called by:
  7303 ;;		i2_lcd_out
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text41
  7308  001EC2                     __ptext41:
  7309                           	opt stack 0
  7310  001EC2                     i2_e_tog:
  7311                           	opt stack 19
  7312                           
  7313                           ;lcd_funct.c: 51:     LATCbits.LATC0 = 1;
  7314                           
  7315                           ;incstack = 0
  7316  001EC2  808B               	bsf	3979,0,c	;volatile
  7317                           
  7318                           ;lcd_funct.c: 52:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  7319  001EC4  0E03               	movlw	3
  7320  001EC6                     i2u341_47:
  7321  001EC6  2EE8               	decfsz	wreg,f,c
  7322  001EC8  D7FE               	bra	i2u341_47
  7323  001ECA  F000               	nop	
  7324                           
  7325                           ;lcd_funct.c: 53:     LATCbits.LATC0 = 0;
  7326  001ECC  908B               	bcf	3979,0,c	;volatile
  7327  001ECE  0012               	return		;funcret
  7328  001ED0                     __end_ofi2_e_tog:
  7329                           	opt stack 0
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           intcon	equ	0xFF2
  7337                           intcon2	equ	0xFF1
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           indf1	equ	0xFE7
  7341                           postinc1	equ	0xFE6
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           bsr	equ	0xFE0
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _get_packet_serial *****************
  7353 ;; Defined at:
  7354 ;;		line 197 in file "functions.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  packet          2    0[COMRAM] PTR unsigned char 
  7357 ;;		 -> NULL(0), G_rfid_buf(16), 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  i               1    3[COMRAM] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7369 ;;      Params:         2       0       0       0
  7370 ;;      Locals:         1       0       0       0
  7371 ;;      Temps:          1       0       0       0
  7372 ;;      Totals:         4       0       0       0
  7373 ;;Total ram usage:        4 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    1
  7376 ;; This function calls:
  7377 ;;		_get_char_serial
  7378 ;; This function is called by:
  7379 ;;		_hp_rfid
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text42
  7384  0012AA                     __ptext42:
  7385                           	opt stack 0
  7386  0012AA                     _get_packet_serial:
  7387                           	opt stack 21
  7388                           
  7389                           ;functions.c: 198:     unsigned char i = 0;
  7390                           
  7391                           ;incstack = 0
  7392  0012AA  0E00               	movlw	0
  7393  0012AC  6E04               	movwf	get_packet_serial@i,c
  7394                           
  7395                           ;functions.c: 199:     packet[i] = get_char_serial();
  7396  0012AE  5004               	movf	get_packet_serial@i,w,c
  7397  0012B0  0D01               	mullw	1
  7398  0012B2  50F3               	movf	prodl,w,c
  7399  0012B4  2401               	addwf	get_packet_serial@packet,w,c
  7400  0012B6  6ED9               	movwf	fsr2l,c
  7401  0012B8  50F4               	movf	prodh,w,c
  7402  0012BA  2002               	addwfc	get_packet_serial@packet+1,w,c
  7403  0012BC  6EDA               	movwf	fsr2h,c
  7404  0012BE  EC73  F00F         	call	_get_char_serial	;wreg free
  7405  0012C2  6EDF               	movwf	indf2,c
  7406                           
  7407                           ;functions.c: 201:     if (packet[i] == 0x02) {
  7408  0012C4  5004               	movf	get_packet_serial@i,w,c
  7409  0012C6  0D01               	mullw	1
  7410  0012C8  50F3               	movf	prodl,w,c
  7411  0012CA  2401               	addwf	get_packet_serial@packet,w,c
  7412  0012CC  6ED9               	movwf	fsr2l,c
  7413  0012CE  50F4               	movf	prodh,w,c
  7414  0012D0  2002               	addwfc	get_packet_serial@packet+1,w,c
  7415  0012D2  6EDA               	movwf	fsr2h,c
  7416  0012D4  0E02               	movlw	2
  7417  0012D6  18DE               	xorwf	postinc2,w,c
  7418  0012D8  A4D8               	btfss	status,2,c
  7419  0012DA  D04B               	goto	i2l331
  7420                           
  7421                           ;functions.c: 202:         packet[i] = 0;
  7422  0012DC  5004               	movf	get_packet_serial@i,w,c
  7423  0012DE  0D01               	mullw	1
  7424  0012E0  50F3               	movf	prodl,w,c
  7425  0012E2  2401               	addwf	get_packet_serial@packet,w,c
  7426  0012E4  6ED9               	movwf	fsr2l,c
  7427  0012E6  50F4               	movf	prodh,w,c
  7428  0012E8  2002               	addwfc	get_packet_serial@packet+1,w,c
  7429  0012EA  6EDA               	movwf	fsr2h,c
  7430  0012EC  0E00               	movlw	0
  7431  0012EE  6EDF               	movwf	indf2,c
  7432                           
  7433                           ;functions.c: 203:         while (i < 16) {
  7434  0012F0  D03C               	goto	i2l332
  7435  0012F2                     
  7436                           ;functions.c: 204:             packet[i] = get_char_serial();
  7437  0012F2  5004               	movf	get_packet_serial@i,w,c
  7438  0012F4  0D01               	mullw	1
  7439  0012F6  50F3               	movf	prodl,w,c
  7440  0012F8  2401               	addwf	get_packet_serial@packet,w,c
  7441  0012FA  6ED9               	movwf	fsr2l,c
  7442  0012FC  50F4               	movf	prodh,w,c
  7443  0012FE  2002               	addwfc	get_packet_serial@packet+1,w,c
  7444  001300  6EDA               	movwf	fsr2h,c
  7445  001302  EC73  F00F         	call	_get_char_serial	;wreg free
  7446  001306  6EDF               	movwf	indf2,c
  7447                           
  7448                           ;functions.c: 206:             if ((packet[i] == 0x03) & ((i < 15))) {
  7449  001308  5004               	movf	get_packet_serial@i,w,c
  7450  00130A  0D01               	mullw	1
  7451  00130C  50F3               	movf	prodl,w,c
  7452  00130E  2401               	addwf	get_packet_serial@packet,w,c
  7453  001310  6ED9               	movwf	fsr2l,c
  7454  001312  50F4               	movf	prodh,w,c
  7455  001314  2002               	addwfc	get_packet_serial@packet+1,w,c
  7456  001316  6EDA               	movwf	fsr2h,c
  7457  001318  0E03               	movlw	3
  7458  00131A  18DE               	xorwf	postinc2,w,c
  7459  00131C  A4D8               	btfss	status,2,c
  7460  00131E  D010               	goto	i2l334
  7461  001320  0E0F               	movlw	15
  7462  001322  6004               	cpfslt	get_packet_serial@i,c
  7463  001324  D00D               	goto	i2l334
  7464                           
  7465                           ;functions.c: 207:                 packet[i] = 0;
  7466  001326  5004               	movf	get_packet_serial@i,w,c
  7467  001328  0D01               	mullw	1
  7468  00132A  50F3               	movf	prodl,w,c
  7469  00132C  2401               	addwf	get_packet_serial@packet,w,c
  7470  00132E  6ED9               	movwf	fsr2l,c
  7471  001330  50F4               	movf	prodh,w,c
  7472  001332  2002               	addwfc	get_packet_serial@packet+1,w,c
  7473  001334  6EDA               	movwf	fsr2h,c
  7474  001336  0E00               	movlw	0
  7475  001338  6EDF               	movwf	indf2,c
  7476                           
  7477                           ;functions.c: 208:                 i = 16;
  7478  00133A  0E10               	movlw	16
  7479  00133C  6E04               	movwf	get_packet_serial@i,c
  7480                           
  7481                           ;functions.c: 209:             } else if ((i == 15) & (packet[i] != 0x03)) {
  7482  00133E  D014               	goto	i2l336
  7483  001340                     i2l334:
  7484  001340  0E0F               	movlw	15
  7485  001342  1804               	xorwf	get_packet_serial@i,w,c
  7486  001344  A4D8               	btfss	status,2,c
  7487  001346  D010               	goto	i2l336
  7488  001348  5004               	movf	get_packet_serial@i,w,c
  7489  00134A  0D01               	mullw	1
  7490  00134C  50F3               	movf	prodl,w,c
  7491  00134E  2401               	addwf	get_packet_serial@packet,w,c
  7492  001350  6ED9               	movwf	fsr2l,c
  7493  001352  50F4               	movf	prodh,w,c
  7494  001354  2002               	addwfc	get_packet_serial@packet+1,w,c
  7495  001356  6EDA               	movwf	fsr2h,c
  7496  001358  0E03               	movlw	3
  7497  00135A  18DE               	xorwf	postinc2,w,c
  7498  00135C  B4D8               	btfsc	status,2,c
  7499  00135E  D004               	goto	i2l336
  7500                           
  7501                           ;functions.c: 212:                 packet = 0;
  7502  001360  0E00               	movlw	0
  7503  001362  6E01               	movwf	get_packet_serial@packet,c
  7504  001364  0E00               	movlw	0
  7505  001366  6E02               	movwf	get_packet_serial@packet+1,c
  7506  001368                     i2l336:
  7507                           
  7508                           ;functions.c: 214:             i++;
  7509  001368  2A04               	incf	get_packet_serial@i,f,c
  7510  00136A                     i2l332:
  7511                           
  7512                           ;functions.c: 203:         while (i < 16) {
  7513  00136A  0E0F               	movlw	15
  7514  00136C  6404               	cpfsgt	get_packet_serial@i,c
  7515  00136E  D7C1               	goto	i2l333
  7516  001370  0012               	return	
  7517  001372                     i2l331:
  7518                           
  7519                           ;functions.c: 218:         packet[i] = 0;
  7520  001372  5004               	movf	get_packet_serial@i,w,c
  7521  001374  0D01               	mullw	1
  7522  001376  50F3               	movf	prodl,w,c
  7523  001378  2401               	addwf	get_packet_serial@packet,w,c
  7524  00137A  6ED9               	movwf	fsr2l,c
  7525  00137C  50F4               	movf	prodh,w,c
  7526  00137E  2002               	addwfc	get_packet_serial@packet+1,w,c
  7527  001380  6EDA               	movwf	fsr2h,c
  7528  001382  0E00               	movlw	0
  7529  001384  6EDF               	movwf	indf2,c
  7530  001386  0012               	return	
  7531  001388                     __end_of_get_packet_serial:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           intcon2	equ	0xFF1
  7541                           postinc0	equ	0xFEE
  7542                           wreg	equ	0xFE8
  7543                           indf1	equ	0xFE7
  7544                           postinc1	equ	0xFE6
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           bsr	equ	0xFE0
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           postdec2	equ	0xFDD
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _get_char_serial *****************
  7556 ;; Defined at:
  7557 ;;		line 177 in file "functions.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;		None
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;		None
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      unsigned char 
  7564 ;; Registers used:
  7565 ;;		wreg, status,2
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7571 ;;      Params:         0       0       0       0
  7572 ;;      Locals:         0       0       0       0
  7573 ;;      Temps:          0       0       0       0
  7574 ;;      Totals:         0       0       0       0
  7575 ;;Total ram usage:        0 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_get_packet_serial
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text43
  7585  001EE6                     __ptext43:
  7586                           	opt stack 0
  7587  001EE6                     _get_char_serial:
  7588                           	opt stack 21
  7589                           
  7590                           ;functions.c: 178:     while (!PIR1bits.RCIF);
  7591                           
  7592                           ;incstack = 0
  7593  001EE6  AA9E               	btfss	3998,5,c	;volatile
  7594  001EE8  D7FE               	goto	_get_char_serial
  7595                           
  7596                           ;functions.c: 179:     return RCREG;
  7597  001EEA  50AE               	movf	4014,w,c	;volatile
  7598  001EEC  0012               	return	
  7599  001EEE                     __end_of_get_char_serial:
  7600                           	opt stack 0
  7601                           tblptru	equ	0xFF8
  7602                           tblptrh	equ	0xFF7
  7603                           tblptrl	equ	0xFF6
  7604                           tablat	equ	0xFF5
  7605                           prodh	equ	0xFF4
  7606                           prodl	equ	0xFF3
  7607                           intcon	equ	0xFF2
  7608                           intcon2	equ	0xFF1
  7609                           postinc0	equ	0xFEE
  7610                           wreg	equ	0xFE8
  7611                           indf1	equ	0xFE7
  7612                           postinc1	equ	0xFE6
  7613                           fsr1h	equ	0xFE2
  7614                           fsr1l	equ	0xFE1
  7615                           bsr	equ	0xFE0
  7616                           indf2	equ	0xFDF
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           intcon2	equ	0xFF1
  7630                           postinc0	equ	0xFEE
  7631                           wreg	equ	0xFE8
  7632                           indf1	equ	0xFE7
  7633                           postinc1	equ	0xFE6
  7634                           fsr1h	equ	0xFE2
  7635                           fsr1l	equ	0xFE1
  7636                           bsr	equ	0xFE0
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644                           	psect	rparam
  7645  0000                     tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           intcon2	equ	0xFF1
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           indf1	equ	0xFE7
  7656                           postinc1	equ	0xFE6
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           bsr	equ	0xFE0
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667                           	psect	temp
  7668  00004A                     btemp:
  7669                           	opt stack 0
  7670  00004A                     	ds	1
  7671  0000                     int$flags	set	btemp
  7672  0000                     wtemp8	set	btemp+1
  7673  0000                     ttemp5	set	btemp+1
  7674  0000                     ttemp6	set	btemp+4
  7675  0000                     ttemp7	set	btemp+8
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           intcon2	equ	0xFF1
  7684                           postinc0	equ	0xFEE
  7685                           wreg	equ	0xFE8
  7686                           indf1	equ	0xFE7
  7687                           postinc1	equ	0xFE6
  7688                           fsr1h	equ	0xFE2
  7689                           fsr1l	equ	0xFE1
  7690                           bsr	equ	0xFE0
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           fsr2h	equ	0xFDA
  7695                           fsr2l	equ	0xFD9
  7696                           status	equ	0xFD8


Data Sizes:
    Strings     92
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      73
    BANK0           160     39      42
    BANK1           256    252     252
    BANK2           256      0       0

Pointer List with Targets:

    ir_difference@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ir_difference@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    lcd_string@string	PTR unsigned char  size(2) Largest target is 252
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), STR_22(CODE[4]), STR_21(CODE[7]), STR_20(CODE[8]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[17]), 
		 -> STR_15(CODE[15]), STR_14(CODE[3]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[3]), STR_9(CODE[2]), STR_8(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[5]), main@cont(BANK1[252]), STR_2(CODE[3]), STR_1(CODE[3]), 
		 -> G_rfid_buf(COMRAM[16]), 

    steer@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    steer@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    steer@cont	PTR struct Control size(2) Largest target is 252
		 -> main@cont(BANK1[252]), 

    orientate@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    orientate@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    orientate@cont	PTR struct Control size(2) Largest target is 252
		 -> main@cont(BANK1[252]), 

    ir_display@cont	PTR struct Control size(2) Largest target is 252
		 -> main@cont(BANK1[252]), 

    ir_difference@cont	PTR struct Control size(2) Largest target is 252
		 -> main@cont(BANK1[252]), 

    get_packet_serial@packet	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), G_rfid_buf(COMRAM[16]), 

    itoa_5@buffer	PTR unsigned char  size(2) Largest target is 252
		 -> main@cont(BANK1[252]), 

    turn_right@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn_right@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn_right@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn_right@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn_right@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn_right@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn_left@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn_left@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn_left@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn_left@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn_left@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn_left@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop_all@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop_all@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop_all@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop_all@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop_all@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop_all@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    veer_right@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    veer_right@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    veer_right@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    veer_right@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    veer_right@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    veer_right@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    veer_left@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    veer_left@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    veer_left@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    veer_left@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    veer_left@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    veer_left@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    full_speed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    full_speed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    full_speed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    full_speed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    full_speed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    full_speed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    set_motor_pwm@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    set_motor_pwm@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    set_motor_pwm@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S201DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S201DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_veer_left
    _main->_veer_right
    _steer->_veer_left
    _steer->_veer_right
    _veer_right->_set_motor_pwm
    _veer_left->_set_motor_pwm
    _turn_right->_stop_all
    _turn_left->_stop_all
    _stop_all->_set_motor_pwm
    _set_line->_send_lcd
    _ir_display->_itoa_5
    _lcd_string->_send_lcd
    _itoa_5->___lwdiv
    _power->___wmul
    ___lwmod->_power
    ___lwdiv->_power
    _full_speed->_set_motor_pwm
    _set_motor_pwm->___awdiv
    ___awdiv->___wmul
    _ir_filter->_get_ir
    _init_lcd->_send_lcd
    _clear_lcd->_send_lcd
    _send_lcd->_lcd_out

Critical Paths under _lp_timer in COMRAM

    None.

Critical Paths under _hp_rfid in COMRAM

    _hp_rfid->i2_lcd_string
    i2_set_line->i2_send_lcd
    i2_lcd_string->i2_send_lcd
    i2_clear_lcd->i2_send_lcd
    i2_send_lcd->i2_lcd_out

Critical Paths under _main in BANK0

    _main->_orientate
    _orientate->_ir_display

Critical Paths under _lp_timer in BANK0

    None.

Critical Paths under _hp_rfid in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _lp_timer in BANK1

    None.

Critical Paths under _hp_rfid in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lp_timer in BANK2

    None.

Critical Paths under _hp_rfid in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               279   279      0   94624
                                             12 BANK0     27    27      0
                                              0 BANK1    252   252      0
                          _clear_lcd
                            _delay_s
                         _full_speed
                             _get_ir
                        _init_button
                       _init_counter
                     _init_interrupt
                            _init_ir
                           _init_lcd
                           _init_pwm
                        _init_serial
                      _ir_difference
                         _ir_display
                          _ir_filter
                             _itoa_5
                         _lcd_string
                          _orientate
                           _set_line
                              _steer
                           _stop_all
                          _veer_left
                         _veer_right
 ---------------------------------------------------------------------------------
 (1) _steer                                               10     4      6   15736
                                              0 BANK0     10     4      6
                         _full_speed
                         _lcd_string
                          _veer_left
                         _veer_right
 ---------------------------------------------------------------------------------
 (1) _veer_right                                          12     7      5    3467
                                             44 COMRAM    12     7      5
                      _set_motor_pwm
 ---------------------------------------------------------------------------------
 (1) _veer_left                                           12     7      5    3467
                                             44 COMRAM    12     7      5
                      _set_motor_pwm
 ---------------------------------------------------------------------------------
 (1) _orientate                                           10     4      6   39454
                                              2 BANK0     10     4      6
                            _delay_s
                         _full_speed
                         _ir_display
                         _lcd_string
                           _set_line
                           _stop_all
                          _turn_left
                         _turn_right
 ---------------------------------------------------------------------------------
 (2) _turn_right                                           5     1      4    8126
                                             49 COMRAM     5     1      4
                      _set_motor_pwm
                           _stop_all
 ---------------------------------------------------------------------------------
 (2) _turn_left                                            5     1      4    8306
                                             49 COMRAM     5     1      4
                      _set_motor_pwm
                           _stop_all
 ---------------------------------------------------------------------------------
 (1) _stop_all                                             5     1      4    4932
                                             44 COMRAM     5     1      4
                      _set_motor_pwm
 ---------------------------------------------------------------------------------
 (1) _set_line                                             1     1      0     999
                                             25 COMRAM     1     1      0
                           _send_lcd
 ---------------------------------------------------------------------------------
 (2) _ir_display                                           2     0      2    7533
                                              0 BANK0      2     0      2
                             _itoa_5
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           2     0      2    3812
                                             25 COMRAM     2     0      2
                           _send_lcd
 ---------------------------------------------------------------------------------
 (3) _itoa_5                                              11     7      4    3175
                                             44 COMRAM    11     7      4
                            ___lwdiv
                            ___lwmod
                              _power
 ---------------------------------------------------------------------------------
 (4) _power                                               10     6      4    1124
                                             27 COMRAM    10     6      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                             37 COMRAM     5     1      4
                              _power (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             37 COMRAM     7     3      4
                              _power (ARG)
 ---------------------------------------------------------------------------------
 (2) _full_speed                                           7     2      5    4162
                                             44 COMRAM     7     2      5
                      _set_motor_pwm
 ---------------------------------------------------------------------------------
 (2) _set_motor_pwm                                        9     7      2    2524
                                             35 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     532
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     565
                                             27 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              6     6      0     105
                                             21 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _ir_filter                                           23    21      2     742
                                             26 COMRAM    23    21      2
                             _get_ir
 ---------------------------------------------------------------------------------
 (2) _get_ir                                               5     3      2     139
                                             21 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ir_difference                                       10     4      6     912
                                             21 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (1) _init_serial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_pwm                                             2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0    1061
                                             25 COMRAM     1     1      0
                            _lcd_out
                           _send_lcd
 ---------------------------------------------------------------------------------
 (1) _init_ir                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_button                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_lcd                                            1     1      0     937
                                             25 COMRAM     1     1      0
                           _send_lcd
 ---------------------------------------------------------------------------------
 (3) _send_lcd                                             2     1      1     937
                                             23 COMRAM     2     1      1
                            _lcd_out
 ---------------------------------------------------------------------------------
 (4) _lcd_out                                              2     2      0     124
                                             21 COMRAM     2     2      0
                              _e_tog
 ---------------------------------------------------------------------------------
 (5) _e_tog                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _lp_timer                                             3     3      0       0
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _hp_rfid                                             12    12      0    1413
                                              6 COMRAM    12    12      0
                  _get_packet_serial
                        i2_clear_lcd
                       i2_lcd_string
                         i2_set_line
 ---------------------------------------------------------------------------------
 (9) i2_set_line                                           1     1      0     302
                                              4 COMRAM     1     1      0
                         i2_send_lcd
 ---------------------------------------------------------------------------------
 (9) i2_lcd_string                                         2     0      2     355
                                              4 COMRAM     2     0      2
                         i2_send_lcd
 ---------------------------------------------------------------------------------
 (9) i2_clear_lcd                                          1     1      0     258
                                              4 COMRAM     1     1      0
                         i2_send_lcd
 ---------------------------------------------------------------------------------
 (10) i2_send_lcd                                          2     1      1     258
                                              2 COMRAM     2     1      1
                          i2_lcd_out
 ---------------------------------------------------------------------------------
 (11) i2_lcd_out                                           2     2      0      88
                                              0 COMRAM     2     2      0
                            i2_e_tog
 ---------------------------------------------------------------------------------
 (12) i2_e_tog                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _get_packet_serial                                    4     2      2     498
                                              0 COMRAM     4     2      2
                    _get_char_serial
 ---------------------------------------------------------------------------------
 (10) _get_char_serial                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clear_lcd
     _send_lcd
       _lcd_out
         _e_tog
   _delay_s
   _full_speed
     _set_motor_pwm
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _get_ir
   _init_button
   _init_counter
   _init_interrupt
   _init_ir
   _init_lcd
     _lcd_out
       _e_tog
     _send_lcd
       _lcd_out
         _e_tog
   _init_pwm
   _init_serial
   _ir_difference
   _ir_display
     _itoa_5
       ___lwdiv
         _power (ARG)
           ___wmul
       ___lwmod
         _power (ARG)
           ___wmul
       _power
         ___wmul
     _lcd_string
       _send_lcd
         _lcd_out
           _e_tog
   _ir_filter
     _get_ir
   _itoa_5
     ___lwdiv
       _power (ARG)
         ___wmul
     ___lwmod
       _power (ARG)
         ___wmul
     _power
       ___wmul
   _lcd_string
     _send_lcd
       _lcd_out
         _e_tog
   _orientate
     _delay_s
     _full_speed
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _ir_display
       _itoa_5
         ___lwdiv
           _power (ARG)
             ___wmul
         ___lwmod
           _power (ARG)
             ___wmul
         _power
           ___wmul
       _lcd_string
         _send_lcd
           _lcd_out
             _e_tog
     _lcd_string
       _send_lcd
         _lcd_out
           _e_tog
     _set_line
       _send_lcd
         _lcd_out
           _e_tog
     _stop_all
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turn_left
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _stop_all
         _set_motor_pwm
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turn_right
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _stop_all
         _set_motor_pwm
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _set_line
     _send_lcd
       _lcd_out
         _e_tog
   _steer
     _full_speed
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _lcd_string
       _send_lcd
         _lcd_out
           _e_tog
     _veer_left
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _veer_right
       _set_motor_pwm
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _stop_all
     _set_motor_pwm
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _veer_left
     _set_motor_pwm
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _veer_right
     _set_motor_pwm
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _lp_timer (ROOT)

 _hp_rfid (ROOT)
   _get_packet_serial
     _get_char_serial
   i2_clear_lcd
     i2_send_lcd
       i2_lcd_out
         i2_e_tog
   i2_lcd_string
     i2_send_lcd
       i2_lcd_out
         i2_e_tog
   i2_set_line
     i2_send_lcd
       i2_lcd_out
         i2_e_tog

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      2A       5       26.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16F       3        0.0%
DATA                 0      0     16F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Dec 10 09:10:08 2019

          ??_init_interrupt 0016                          l98 0362                ___awdiv@sign 0021  
                        bsr 000FE0         ___wmul@multiplicand 0018                         l101 0456  
                       l102 048C                         l103 0474                         l120 05E0  
                       l105 04FE                         l202 15AE                         l106 04DE  
                       l203 157C                         l300 1B12                         l220 186A  
                       l124 0744                         l116 0574                         l108 0560  
                       l301 1AF4                         l221 1824                         l133 08E2  
                       l125 068A                         l109 0506                         l310 1442  
                       l214 18F6                         l150 0A4A                         l134 07B8  
                       l118 05C2                         l303 1B3C                         l311 13C4  
                       l215 18B0                         l143 09C2                         l135 0838  
                       l119 067A                         l320 1CA6                         l208 1AD6  
                       l152 0A42                         l144 095E                         l209 1A90  
                       l401 0E1E                         l145 09BE                         l137 0880  
                       l154 0A5C                         l307 13A4                         l147 0A06  
                       l139 08C6                         l308 138E                         l148 09EE  
                       l182 0F22                         l190 151E                         l319 1CB8  
                       l183 0F4A                         l191 14D8                         l360 1082  
                       l441 1D50                         l354 1040                         l355 0FBA  
                       l187 14AA                         l443 1D62                         l348 1CEA  
                       l364 10C0                         l196 1670                         l365 1092  
                       l357 1028                         l197 163E                         l375 114A  
                       l359 108C                         l447 1B74                         l448 1B48  
                       l392 0C56                         l384 0AC8                         l394 0CAE  
                       l386 0B82                         l389 0B48                         l399 0D94  
                       l681 1968                         l682 1972                         l674 191A  
                       l683 1980                         l675 192A                         l677 1948  
                       l678 1940                         l950 1C3A                         l960 1C7C  
                       l945 1C10                         l946 1C08                         l955 1C5A  
                       l956 1C52                         l949 1C30                         l959 1C72  
                       prod 000FF3                         wreg 000FE8                get_ir@sensor 0018  
                      STR_1 0350                        STR_2 034D                        STR_3 0330  
                      STR_4 0351                        STR_5 034E                        STR_6 0359  
                      STR_7 0345                        STR_8 0349                        STR_9 035B  
                      _LATB 000F8A                        _LATC 000F8B                        u2224 0EE6  
                      u2320 1C5E                        u2225 0EE2                        u2234 0F3E  
                      u2235 0F3A                        u3107 159A                        u3027 0446  
                      u2180 194C                        u2340 1B6C                        u2245 0F96  
                      u3117 165C                        u3037 04C8                        u2350 1B94  
                      u3207 150A                        u3127 0B2A                        u3047 0554  
                      u3217 1CAC                        u3137 0B64                        u3057 0596  
                      u2530 1024                        u2290 1C14                        u2275 1DCC  
                      u3307 1754                        u3227 1032                        u2347 1B62  
                      u3147 0C90                        u3067 066C                        u2276 1DCE  
                      u3317 1E78                        u3237 16D8                        u2357 1B8A  
                      u3157 0CEA                        u3077 0734                        u2630 0AEE  
                      u3327 1DD8                        u3247 16E4                        u3167 1856  
                      u3087 0792                        u3337 19FA                        u3257 16F2  
                      u3177 18E2                        u3097 08D2                        u3347 1EB8  
                      u3267 1700                        u3187 1AC2                        u3277 1718  
                      u3197 1D64                        u3287 172E                        u2840 0758  
                      u3297 1742                        u2930 08F0                        u2770 0566  
                      u2940 097A                        u2860 0766                        u2780 056C  
                      u2950 099E                        u2942 097C                        u2952 09A0  
                      _PR5H 000F91                        i1l91 0036                        _PR5L 000F90  
                      i2l82 127E                        i2l83 1244                        i2l85 127C  
                      i2l79 1202                        _main 035E                        fsr1h 000FE2  
                      fsr2h 000FDA                        indf1 000FE7                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 004A  
                      prodh 000FF4                        prodl 000FF3             __end_ofi2_e_tog 1ED0  
                      start 0046              delay_s@seconds 0017                  i2_send_lcd 1DE6  
               i2_clear_lcd 1E82                  i2_set_line 1D6C                ___param_bank 000000  
                _G_rfid_buf 003A      __size_of_ir_difference 00F4              i2set_line@line 0005  
                     ?_main 0001             __end_of___awdiv 198A                       STR_10 0353  
                     STR_11 033D                       STR_12 0341                       STR_20 0321  
                     STR_13 0339                       STR_21 0329                       STR_14 0356  
                     STR_22 0335                       STR_23 033F                       STR_15 0312  
                     STR_24 034E                       STR_16 0301                       STR_17 033F  
                     STR_25 033D                       STR_26 0341                       STR_18 0347  
                     STR_27 0339                       STR_19 034E             ___awdiv@divisor 001E  
                     _PDC0H 000F78                       _PDC1H 000F76                       _PDC0L 000F79  
                     _PDC1L 000F77             __end_of___lwdiv 1C44             __end_of___lwmod 1C86  
                     i2l331 1372                       i2l332 136A                       i2l333 12F2  
                     i2l334 1340                       i2l336 1368                       i2l441 1D80  
                     i2l443 1D92                       i2l447 1BCA                       i2l448 1B9E  
           ___awdiv@counter 0020                       _RCREG 000FAE                       _TMR0L 000FD6  
                     _SPBRG 000FAF                       _TRISA 000F92                ?_init_button 0001  
                     _TRISC 000F94                       _TRISD 000F95             __end_of_delay_s 1CC6  
                     _G_run 0039                ?_init_serial 0001             __end_of_lcd_out 1A02  
           __end_of_hp_rfid 12AA                       _e_tog 1EB4             __end_of_init_ir 1D3C  
            get_ir@ir_value 0019                       _power 1AE6                       _steer 0D0A  
                     main@j 0074                       tablat 000FF5                       ttemp5 004B  
                     ttemp6 004E                       ttemp7 0052                       status 000FD8  
                     wtemp8 004B       __size_ofi2_lcd_string 0056             __initialization 1E0A  
  __size_of_get_char_serial 0008                __end_of_main 0A66          __size_ofi2_lcd_out 0078  
            __CFG_OSC$IRCIO 000000         veer_right@direction 0031                      ??_main 006C  
             __activetblptr 000002               _ir_difference 10D0                      ?_e_tog 0001  
          ___awdiv@dividend 001C                      ?_power 001C                      _ANSEL0 000FB8  
              i2_lcd_string 1B9C                      ?_steer 0060                   ??i2_e_tog 0001  
            __CFG_WDTEN$OFF 000000                      _QEICON 000FB6                      _OSCCON 000FD3  
                    _PTCON0 000F7F                      _PTCON1 000F7E               ?_init_counter 0001  
                    _SPBRGH 000FB0                      _PTPERH 000F7A                      _PTPERL 000F7B  
             lcd_out@number 0017         full_speed@direction 0031                 ?i2_send_lcd 0003  
               ?i2_set_line 0001                      ___wmul 1D9C                   ??___awdiv 0020  
                 ??___lwdiv 002A                   ??___lwmod 002A                      _get_ir 1CC6  
          __end_of_init_lcd 175C                      _itoa_5 1388            __end_of_init_pwm 1E4E  
                    clear_0 1E18            ___awdiv@quotient 0022                   ??_delay_s 0016  
          __end_of_lp_timer 0046                   ??_lcd_out 0016            __end_of_send_lcd 1DE6  
                 ??_hp_rfid 0007                   ??_init_ir 0016            __end_of_set_line 1D6C  
            ?_ir_difference 0016                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                      power@i 0025  
         __end_ofi2_lcd_out 1A7A            __end_of_stop_all 1AE6              ??_init_counter 0016  
                __accesstop 0060     __end_of__initialization 1E1E               ___rparam_used 000001  
            __pcstackCOMRAM 0001               __end_of_e_tog 1EC2               __end_of_power 1B46  
             __end_of_steer 0E72          __size_of_clear_lcd 001A           ??_get_char_serial 0001  
       __size_ofi2_send_lcd 0024       __end_of_set_motor_pwm 0FA6        __size_of_init_button 000A  
                   ??_e_tog 0016         __size_ofi2_set_line 0030        __size_of_init_serial 0018  
                   ??_power 0020                     ??_steer 0066                  __pbssBANK0 0087  
        __size_of_ir_filter 012A          i2lcd_string@string 0005                ?i2_clear_lcd 0001  
                   ?___wmul 0016                     ?_get_ir 0016                     ?_itoa_5 002D  
                   _DFLTCON 000F60          __size_of_veer_left 00C2          __size_of_orientate 02A4  
           ??_ir_difference 001C              ir_display@cont 0060              ir_filter@array 0028  
                   _PWMCON0 000F6F                     _PWMCON1 000F6E                  _lcd_string 1B46  
                   i2_e_tog 1EC2                   ?_init_lcd 0001           __end_of_clear_lcd 1E82  
        veer_left@direction 0031                   ?_init_pwm 0016                   ?_lp_timer 0001  
        __size_of_turn_left 008C                     __Hparam 0000                   ?_send_lcd 0018  
                   __Lparam 0000                   ?_set_line 0001                  _ir_display 175C  
                   ___awdiv 1906             __size_of___wmul 0026                     ___lwdiv 1BF2  
                   ___lwmod 1C44                __psmallconst 0300             __size_of_get_ir 003E  
                   __pcinit 1E0A                   ?_stop_all 002D             __size_of_itoa_5 00D8  
                   _delay_s 1C86                     __ramtop 0300        __end_of_init_counter 1E68  
                _full_speed 1460                     __ptext0 035E                     __ptext1 0D0A  
                   __ptext2 152E                     __ptext3 15F0                     __ptext4 0A66  
                   __ptext5 17EE                     __ptext6 187A                     __ptext7 1A7A  
                   __ptext8 1D3C                     __ptext9 175C           __end_of_ir_filter 10D0  
                   _lcd_out 198A                   _T0CONbits 000FD5                     _hp_rfid 0008  
   get_packet_serial@packet 0001                     _init_ir 1D04                itoa_5@buffer 002F  
                 _T5CONbits 000FB7                itoa_5@number 002D     __size_of_init_interrupt 000C  
          _G_rfid_retrieved 0089              __pintcode_body 11C4        end_of_initialization 1E1E  
                   itoa_5@i 0037                     itoa_5@j 0036                     itoa_5@k 0035  
             __Lmediumconst 0000                  ??_init_lcd 001A                     int_func 11C4  
                ??_init_pwm 0018                  ??_lp_timer 0013           __end_of_veer_left 16B2  
           orientate@motorL 0064             orientate@motorR 0066           __end_of_orientate 0D0A  
              ??i2_send_lcd 0004                  ??_send_lcd 0019                 veer_left@mL 002D  
               veer_left@mR 002F                ??i2_set_line 0005                  ??_set_line 001A  
           itoa_5@remainder 0031                   _RCSTAbits 000FAB                     postdec2 000FDD  
                   postinc0 000FEE                     postinc1 000FE6                     postinc2 000FDE  
                _veer_right 152E                full_speed@mL 002D                full_speed@mR 002F  
                ??_stop_all 0031           __end_of_turn_left 1906                   _TRISAbits 000F92  
                 _TRISBbits 000F93                   _TRISCbits 000F94                   _TRISDbits 000F95  
        __end_ofi2_send_lcd 1E0A                 _CAP2CONbits 000F62                 ?_lcd_string 001A  
               _CAP3CONbits 000F61          __end_ofi2_set_line 1D9C                   i2_lcd_out 1A02  
                 _TXSTAbits 000FAC                  main@motorL 007E                  main@motorR 0075  
             delay_s@cycles 0018             _get_char_serial 1EE6                 power@number 001C  
               ?_ir_display 0060                turn_right@mL 0032                turn_right@mR 0034  
                 _G_time_ms 0087        ir_filter@filtered_ir 0026        __size_ofi2_clear_lcd 001A  
            __end_of___wmul 1DC2                 _BAUDCONbits 000FAA        set_motor_pwm@PWMduty 002B  
            __end_of_get_ir 1D04                  _turn_right 17EE                 ?_full_speed 002D  
            __end_of_itoa_5 1460           init_pwm@PWMperiod 0016         start_initialization 1E0A  
               steer@motorL 0062                 steer@motorR 0064                  ir_filter@i 0031  
                ?i2_lcd_out 0001       __size_of_init_counter 001A             i2lcd_out@number 0002  
                  ??___wmul 001A                 ?_veer_right 002D                    ??_get_ir 0018  
       __size_of_lcd_string 0056                    ??_itoa_5 0031               ??_init_button 0016  
             ??_init_serial 0016                 __pbssCOMRAM 0039               __pcstackBANK0 0060  
             __pcstackBANK1 0100              _init_interrupt 1ED0              set_motor_pwm@m 0024  
       __size_of_ir_display 0092                    ?i2_e_tog 0001     __end_of_get_char_serial 1EEE  
              _init_counter 1E4E         __size_of_full_speed 00CE           __size_of_init_lcd 00AA  
         __size_of_init_pwm 0022            ___lwdiv@dividend 0026                   _clear_lcd 1E68  
         __size_of_lp_timer 002E          get_packet_serial@i 0004                   __pintcode 0008  
         ir_difference@cont 0016           __size_of_send_lcd 0024                    ?___awdiv 001C  
    __size_of_set_motor_pwm 0134           __size_of_set_line 0030                    ?___lwdiv 0026  
                  ?___lwmod 0026                 __pintcodelo 0018                    ?_delay_s 0001  
               ?_turn_right 0032                    _CAP2BUFH 000F67                    _CAP2BUFL 000F66  
                  _CAP3BUFH 000F65                    _CAP3BUFL 000F64         ir_difference@motorL 0018  
                  ?_lcd_out 0001         ir_difference@motorR 001A                    ?_hp_rfid 0001  
               __smallconst 0300      __end_of_init_interrupt 1EDC           __size_of_stop_all 006C  
                  ?_init_ir 0001       __end_of_ir_difference 11C4                   _ir_filter 0FA6  
          ___lwdiv@quotient 002B              __size_of_e_tog 000E               ?i2_lcd_string 0005  
       __end_of_init_button 1EE6              __size_of_power 0060              __size_of_steer 0168  
       __end_of_init_serial 1EB4         __size_of_veer_right 00C2              ___wmul@product 001A  
                  _LATAbits 000F89                    _LATBbits 000F8A                 ??i2_lcd_out 0001  
                  _LATCbits 000F8B                    _LATDbits 000F8C                    _PIE1bits 000F9D  
                  i2u146_45 1DF0                    i2u146_46 1DF2                    i2u340_47 1A72  
                  i2u341_47 1EC6                    i2u335_47 1236                    i2u336_47 126E  
                  i2u177_40 1BC2                    _PIR1bits 000F9E                    i2u177_47 1BB8  
                  i2u337_47 1D94                    i2u178_40 1BEA                    i2u338_47 1E92  
                  i2u178_47 1BE0                    i2u339_47 1DFC                  ?_clear_lcd 0001  
                  _RCONbits 000FD0                   _veer_left 15F0                   _orientate 0A66  
           ir_filter@sensor 0025                send_lcd@Byte 0019                send_lcd@type 0018  
         ___wmul@multiplier 0016              itoa_5@quotient 0033           _get_packet_serial 12AA  
           ?_init_interrupt 0001                   main@chksm 006F                 turn_left@mL 0032  
               turn_left@mR 0034          ?_get_packet_serial 0001                  power@power 001E  
                ?_ir_filter 001B              ??i2_lcd_string 0007                ??_lcd_string 001C  
             _set_motor_pwm 0E72                   _turn_left 187A                 _INTCON2bits 000FF1  
       ??_get_packet_serial 0003            ?_get_char_serial 0001            __size_ofi2_e_tog 000E  
       __size_of_turn_right 008C                    __Hrparam 0000                ??_ir_display 0038  
                  __Lrparam 0000                  ?_veer_left 002D                  ?_orientate 0062  
          __size_of___awdiv 0084   ir_filter@same_values_flag 0030            __size_of___lwdiv 0052  
        __end_of_lcd_string 1B9C            __size_of___lwmod 0042   __end_of_get_packet_serial 1388  
              ??_full_speed 0032            __size_of_delay_s 0040            __size_of_lcd_out 0078  
               _init_button 1EDC            __size_of_hp_rfid 12A2                 _init_serial 1E9C  
          __size_of_init_ir 0038             ___lwdiv@divisor 0028             ___lwdiv@counter 002A  
            ?_set_motor_pwm 0024                    __ptext10 1B46                    __ptext11 1388  
                  __ptext20 0FA6                    __ptext12 1AE6                    __ptext21 1CC6  
                  __ptext13 1C44                    __ptext30 1E68                    __ptext22 10D0  
                  __ptext14 1BF2                    __ptext31 1DC2                    __ptext23 1E9C  
                  __ptext15 1460                    __ptext40 1A02                    __ptext32 198A  
                  __ptext24 1E2C                    __ptext16 0E72                    __ptext41 1EC2  
                  __ptext33 1EB4                    __ptext25 16B2                    __ptext17 1D9C  
                  __ptext42 12AA                    __ptext26 1D04                    __ptext18 1906  
                  __ptext43 1EE6                    __ptext27 1ED0                    __ptext19 1C86  
                  __ptext36 1D6C                    __ptext28 1E4E                    __ptext37 1B9C  
                  __ptext29 1EDC                    __ptext38 1E82                    __ptext39 1DE6  
                stop_all@mL 002D                  stop_all@mR 002F                  ?_turn_left 0032  
        __end_of_ir_display 17EE                    _init_lcd 16B2               __size_of_main 0708  
                  _init_pwm 1E2C                    _lp_timer 0018          __end_of_full_speed 152E  
                  delay_s@i 001A               orientate@cont 0062                    _send_lcd 1DC2  
             ??i2_clear_lcd 0005                 ??_clear_lcd 001A                    _set_line 1D3C  
              set_line@line 001A                    int$flags 004A                ??_veer_right 0032  
                  main@cont 0100                    _stop_all 1A7A                   power@temp 0023  
                 steer@cont 0060                  _INTCONbits 000FF2                 ??_ir_filter 001D  
                  intlevel1 0000                    intlevel2 0000          __end_of_veer_right 15F0  
          ___lwmod@dividend 0026                  _OSCCONbits 000FD3                 ??_veer_left 0032  
               ??_orientate 0068        __end_ofi2_lcd_string 1BF2                veer_right@mL 002D  
              veer_right@mR 002F  __size_of_get_packet_serial 00DE                ??_turn_right 0036  
       __end_ofi2_clear_lcd 1E9C              i2send_lcd@Byte 0004              i2send_lcd@type 0003  
           ___lwmod@divisor 0028             ??_set_motor_pwm 0026             ___lwmod@counter 002A  
               ??_turn_left 0036            lcd_string@string 001A          __end_of_turn_right 187A  
